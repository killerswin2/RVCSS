using System;
using System.Collections.Generic;
using System.Runtime.InteropServices;
using System.Runtime.CompilerServices;
using System.Security;
using System.Text;
using System.Numerics;
using System.Collections;

namespace RV
{
    namespace Scripting
    {
        public static class Commands
        {
            /// <summary>
            /// Returns absolute (positive) value of a real number.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value scalar_nan</returns>
            public static Value Abs(Value rightInstance)
            {
                return new Value(GameValueMethods.Abs(rightInstance));
            }

            /// <summary>
            /// Returns the current simulation acceleration factor.
            /// </summary>
            /// <returns>Value scalar</returns>
            public static Value AccTime()
            {
                return new Value(GameValueMethods.AccTime());
            }

            /// <summary>
            /// ArcCosine of a number, result in Degrees
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value scalar_nan</returns>
            public static Value Acos(Value rightInstance)
            {
                return new Value(GameValueMethods.Acos(rightInstance));
            }

            /// <summary>
            /// Make a unit perform an action. See Actions for action names and syntaxes. in singleplayer, when user Alt-Tabs the simulation is paused and so the action will also halt until user returns to the game. For example, player action ["GetInDriver", car]; executed while user is Alt-Tabbed will result in the user seeing the action happening when he returns to the game screen. This doesn't happen in Multiplayer. the alternative syntax creates a temporary Logic entity in place of unit.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value Action(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.Action(leftInstance, rightInstance));
            }

            /// <summary>
            /// Returns Array of Numbers, where numbers are IDs of all user actions added to given entity with addAction command.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value ActionIDs(Value rightInstance)
            {
                return new Value(GameValueMethods.ActionIDs(rightInstance));
            }

            /// <summary>
            /// Returns Array containing dikCodes of keys, buttons and combos assigned to the given user action. Action names could be found in config class ControllerSchemes or user action names or user profile, for example: keyWatch[] = { 24 }; To retrieve the value, use the property name without 'key': actionKeys "Watch"; // 24 In addition, some of the actions are also listed in here: inputAction/actions
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value ActionKeys(Value rightInstance)
            {
                return new Value(GameValueMethods.ActionKeys(rightInstance));
            }

            /// <summary>
            /// Gives a broken down version of actionKeys return. Returns an Array containing the breakdowns of the dikCodes of keys, buttons and combos assigned to the given user action. Action names can be found in config class ControllerSchemes or user action names or user profile (see Example 1). In addition, some of the actions are also listed here: inputAction/actions The Key Device can be one of several types: "KEYBOARD" "MOUSE_BUTTON" "MOUSE_AXIS" "JOYSTICK_BUTTON" "JOYSTICK_AXIS" "JOYSTICK_POV" "XINPUT" - (Xbox) Controller Input "TRACKER" - Motion Tracking (TrackIR, Tobii etc)
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value ActionKeysEx(Value rightInstance)
            {
                return new Value(GameValueMethods.ActionKeysEx(rightInstance));
            }

            /// <summary>
            /// Returns a list of button images or names assigned to the given user action. A maximum of maxKeys keys is listed. You can find the action names in config class ControllerSchemes or user action names.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value text</returns>
            public static Value ActionKeysImages(Value rightInstance)
            {
                return new Value(GameValueMethods.ActionKeysImages(rightInstance));
            }

            /// <summary>
            /// Returns a list of button names assigned to the given user action. Action names can be found in config class ControllerSchemes or user action names.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value string</returns>
            public static Value ActionKeysNames(Value rightInstance)
            {
                return new Value(GameValueMethods.ActionKeysNames(rightInstance));
            }

            /// <summary>
            /// Returns a list of button names assigned to the given user action. You can find the action names in config class ControllerSchemes or user action names.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value ActionKeysNamesArray(Value rightInstance)
            {
                return new Value(GameValueMethods.ActionKeysNamesArray(rightInstance));
            }

            /// <summary>
            /// Returns localized name of action.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value string</returns>
            public static Value ActionName(Value rightInstance)
            {
                return new Value(GameValueMethods.ActionName(rightInstance));
            }

            /// <summary>
            /// Returns Array with params for given user action id (similar to addAction param array).
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value ActionParams(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.ActionParams(leftInstance, rightInstance));
            }

            /// <summary>
            /// Activates the listed addons.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value ActivateAddons(Value rightInstance)
            {
                return new Value(GameValueMethods.ActivateAddons(rightInstance));
            }

            /// <summary>
            /// Returns a list of all activated addons.
            /// </summary>
            /// <returns>Value array</returns>
            public static Value ActivatedAddons()
            {
                return new Value(GameValueMethods.ActivatedAddons());
            }

            /// <summary>
            /// Activates the given keyname for the current user profile. The keys are used to unlock missions or campaigns. See keys, keysLimit and doneKeys in the Description.ext#Mission Keys chapter.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value ActivateKey(Value rightInstance)
            {
                return new Value(GameValueMethods.ActivateKey(rightInstance));
            }

            /// <summary>
            /// Returns type, effect, speed and map visibility of the given active title effect (see allActiveTitleEffects)
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value ActiveTitleEffectParams(Value rightInstance)
            {
                return new Value(GameValueMethods.ActiveTitleEffectParams(rightInstance));
            }

            /// <summary>
            /// Connect entities together.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value Add3DENConnection(Value rightInstance)
            {
                return new Value(GameValueMethods.Add3DENConnection(rightInstance));
            }

            /// <summary>
            /// Adds an Eden Editor Event Handler.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value scalar</returns>
            public static Value Add3DENEventHandler(Value rightInstance)
            {
                return new Value(GameValueMethods.Add3DENEventHandler(rightInstance));
            }

            /// <summary>
            /// Adds an editing layer in Eden Editor.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value scalar</returns>
            public static Value Add3DENLayer(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.Add3DENLayer(leftInstance, rightInstance));
            }

            /// <summary>
            /// Adds an entry to the action menu of an object. The action can only be activated when in proximity to the object and looking at it. Adding an action to the player makes that action available to the player at all times. For event handling of user interaction see inGameUISetEventHandler.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing_scalar</returns>
            public static Value AddAction(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.AddAction(leftInstance, rightInstance));
            }

            /// <summary>
            /// Adds a backpack for a unit. If a unit already has a backpack, the old backpack will be placed on the ground under the unit. Items defined in the backpack's config will be added as well. Classname list of available backpacks: Arma 2 OA backpacks Arma 3 backpacks - objects starting with "B_", starts with "B_AssaultPack_khk"
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value AddBackpack(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.AddBackpack(leftInstance, rightInstance));
            }

            /// <summary>
            /// Add backpack(s) to the cargo space of vehicle. Classname list of available backpacks is here. For a list of possible backpacks, see: 1.50 Arma 2: Operation Arrowhead: Backpacks 1.00 Arma 3: CfgVehicles Equipment (starting with B_) In Arma 3, arguments for this command are local LALocal. For the global variant, see addBackpackCargoGlobal.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value AddBackpackCargo(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.AddBackpackCargo(leftInstance, rightInstance));
            }

            /// <summary>
            /// Add backpack(s) to the cargo space of vehicle. Classname list of available backpacks: Arma 2 OA backpacks Arma 3 backpacks - objects starting with "B_", starts with "B_AssaultPack_khk"
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value AddBackpackCargoGlobal(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.AddBackpackCargoGlobal(leftInstance, rightInstance));
            }

            /// <summary>
            /// Adds a backpack to a unit (even non-local).⚠Beware, the backpack added with this command will be created on the PC local to the unit you are adding it to, even if executed on the server. Because of this, if non-local unit is the target and one tries to immediately access added backpack, the backpack returned will be  Null. When adding backpack dynamically to a remote unit, wait until backpack is added (See Example 2)
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value AddBackpackGlobal(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.AddBackpackGlobal(leftInstance, rightInstance));
            }

            /// <summary>
            /// Adds weapon item, including magazine, directly to the binocular weapon. This is used for infantry weapons.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value AddBinocularItem(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.AddBinocularItem(leftInstance, rightInstance));
            }

            /// <summary>
            /// Creates the camera shaking effect, like when you are near an explosion
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value AddCamShake(Value rightInstance)
            {
                return new Value(GameValueMethods.AddCamShake(rightInstance));
            }

            /// <summary>
            /// Allow curator use of given addon.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value AddCuratorAddons(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.AddCuratorAddons(leftInstance, rightInstance));
            }

            /// <summary>
            /// Adds or changes curator camera area (depends on if ID is already used).
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value AddCuratorCameraArea(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.AddCuratorCameraArea(leftInstance, rightInstance));
            }

            /// <summary>
            /// Register objects which can be edited by a curator.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value AddCuratorEditableObjects(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.AddCuratorEditableObjects(leftInstance, rightInstance));
            }

            /// <summary>
            /// Adds or changes curator edit area (depends on if ID is already used).
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value AddCuratorEditingArea(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.AddCuratorEditingArea(leftInstance, rightInstance));
            }

            /// <summary>
            /// Adds or removes curator points. Points can be only in range from 0 to 1.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value AddCuratorPoints(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.AddCuratorPoints(leftInstance, rightInstance));
            }

            /// <summary>
            /// Add an object to the editor and assign arguments. Create script is,called with _new equal to true. Returns the ID of the new EditorObject.,Subtype class is optional.  Some Old Editor Command
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value string</returns>
            public static Value AddEditorObject(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.AddEditorObject(leftInstance, rightInstance));
            }

            /// <summary>
            /// Adds an Event Handler to the given object. As many Event Handlers of any type can be added - existing Event Handlers do not get overwritten Use removeEventHandler to remove an Event Handler Read Event Handlers for more information and a list of all available Event Handlers.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing_scalar</returns>
            public static Value AddEventHandler(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.AddEventHandler(leftInstance, rightInstance));
            }

            /// <summary>
            /// Applies impulse force to unit or given PhysX object at given position. For more information see NVIDIA docs.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value AddForce(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.AddForce(leftInstance, rightInstance));
            }

            /// <summary>
            /// Adds force generator to world. For this command to have any effect, the Advanced Flight Model (AFM) has to be enabled. AFM status can be checked with difficultyEnabledRTD.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value scalar</returns>
            public static Value AddForceGeneratorRTD(Value rightInstance)
            {
                return new Value(GameValueMethods.AddForceGeneratorRTD(rightInstance));
            }

            /// <summary>
            /// Create a new item and try to link it into goggles (glasses) slot. This command does not add NVGs, which are hmd slot items (see linkItem instead).
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value AddGoggles(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.AddGoggles(leftInstance, rightInstance));
            }

            /// <summary>
            /// Adds icon to a group leader. Returns icon ID, Control icons visibility with setGroupIconsVisible.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value scalar</returns>
            public static Value AddGroupIcon(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.AddGroupIcon(leftInstance, rightInstance));
            }

            /// <summary>
            /// Adds weapon item, including magazine, directly to the handgunWeapon. This is used for infantry weapons.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value AddHandgunItem(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.AddHandgunItem(leftInstance, rightInstance));
            }

            /// <summary>
            /// Creates a headgear item and tries to link it to headgear slot. If slot is occupied with another item, the item in the slot will be replaced.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value AddHeadgear(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.AddHeadgear(leftInstance, rightInstance));
            }

            /// <summary>
            /// Creates new item and tries to add it into inventory. Inventory must have enough space to accomodate new item or command will fail.The item can also be a weapon or a magazine.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value AddItem(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.AddItem(leftInstance, rightInstance));
            }

            /// <summary>
            /// Creates new items and stores them in given container. Works with items, weapons, magazines, equipment and glasses but not backpacks. In the latter case use addBackpackCargo instead. For the global variant, see addItemCargoGlobal.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value AddItemCargo(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.AddItemCargo(leftInstance, rightInstance));
            }

            /// <summary>
            /// Global variant of addItemCargo.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value AddItemCargoGlobal(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.AddItemCargoGlobal(leftInstance, rightInstance));
            }

            /// <summary>
            /// Adds count items of type name into the weapon pool (used in the campaign to transfer items to the next mission)
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value AddItemPool(Value rightInstance)
            {
                return new Value(GameValueMethods.AddItemPool(rightInstance));
            }

            /// <summary>
            /// Create new item and store it to soldier's backpack. The item can also be a weapon or a magazine.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value AddItemToBackpack(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.AddItemToBackpack(leftInstance, rightInstance));
            }

            /// <summary>
            /// Create new item and store it to soldier's uniform. The item can also be a weapon or a magazine.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value AddItemToUniform(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.AddItemToUniform(leftInstance, rightInstance));
            }

            /// <summary>
            /// Create new item and store it to soldier's vest. The item can also be a weapon or a magazine.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value AddItemToVest(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.AddItemToVest(leftInstance, rightInstance));
            }

            /// <summary>
            /// Adds score to the Xbox Live Statistics score for the given unit (or the commander unit of the given vehicle).
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value AddLiveStats(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.AddLiveStats(leftInstance, rightInstance));
            }

            /// <summary>
            /// Adds a magazine to a person. Infantry units can only carry a specific number of magazines, once the magazine slots are filled (or uniform/vest/bagpack are full in Arma 3), any further addMagazine commands are ignored. If class of magazine does not exist, an error message is printed in .rpt: player addMagazine "dasdsa"; // .rpt: Given magazine[dasdsa] not found) Use addMagazine before addWeapon for the weapon to be loaded with magazine automatically.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value AddMagazine(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.AddMagazine(leftInstance, rightInstance));
            }

            /// <summary>
            /// Adds magazines with specified ammo count to the cargo space of a vehicle or a container.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value AddMagazineAmmoCargo(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.AddMagazineAmmoCargo(leftInstance, rightInstance));
            }

            /// <summary>
            /// Add magazines to the cargo space of vehicles, which can be taken out by infantry units. Once the magazine cargo space is filled up, any further addMagazineCargo commands are ignored. In Arma 3, arguments for this command must be local (LALocal). For the global variant see addMagazineCargoGlobal.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value AddMagazineCargo(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.AddMagazineCargo(leftInstance, rightInstance));
            }

            /// <summary>
            /// Add magazines to the cargo space of vehicles, which can be taken out by infantry units. MP Synchronized
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value AddMagazineCargoGlobal(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.AddMagazineCargoGlobal(leftInstance, rightInstance));
            }

            /// <summary>
            /// Adds magazine to a unit regardless of locality. This command can also be used to add magazine to a vehicle, like a static gun, for example.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value AddMagazineGlobal(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.AddMagazineGlobal(leftInstance, rightInstance));
            }

            /// <summary>
            /// Adds magazines to the magazine pool, of which the player may choose in the following mission. Available in campaigns only.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value AddMagazinePool(Value rightInstance)
            {
                return new Value(GameValueMethods.AddMagazinePool(rightInstance));
            }

            /// <summary>
            /// Adds multiple magazines to the unit. For cargo containers use addMagazineCargoGlobal command.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value AddMagazines(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.AddMagazines(leftInstance, rightInstance));
            }

            /// <summary>
            /// Adds a magazine to the turret. Use turret path [-1] for driver's turret. ⚠You may create invalid combinations by using this function, for example by adding 20 grenades. When doing so, application behaviour is undefined.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value AddMagazineTurret(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.AddMagazineTurret(leftInstance, rightInstance));
            }

            /// <summary>
            /// Adds a new menu button. Priority is optional. Some Old Editor Command
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value scalar</returns>
            public static Value AddMenu(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.AddMenu(leftInstance, rightInstance));
            }

            /// <summary>
            /// Creates a new menu item. Menu can be "file" or "view",index is index,as returned from addMenu command. priority is optional and determines,where in the menu the item will reside (higher priority items first).  Some Old Editor Command
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value scalar</returns>
            public static Value AddMenuItem(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.AddMenuItem(leftInstance, rightInstance));
            }

            /// <summary>
            /// Adds event handler attached to the current mission and returns event handler handle. For the list of available mission event handlers see: Arma 3: Mission Event Handlers
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value scalar</returns>
            public static Value AddMissionEventHandler(Value rightInstance)
            {
                return new Value(GameValueMethods.AddMissionEventHandler(rightInstance));
            }

            /// <summary>
            /// Adds a multiplayer event handler (EH) to the given object and returns EH handle. See Event Handlers. ⚠A Multiplayer Event Handler is not saved in a save file and therefore will not be restored on load - use it accordingly.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing_scalar</returns>
            public static Value AddMPEventHandler(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.AddMPEventHandler(leftInstance, rightInstance));
            }

            /// <summary>
            /// Adds playMusic event handler. Returns id of the handler or -1 when failed. Like addMissionEventHandler, the music event handler is attached to the mission. See Arma 3: Event Handlers - Music Event Handlers.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value scalar</returns>
            public static Value AddMusicEventHandler(Value rightInstance)
            {
                return new Value(GameValueMethods.AddMusicEventHandler(rightInstance));
            }

            /// <summary>
            /// Returns a list of files present in the addon. Querying protected .ebo addons will return an empty array [].
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value AddonFiles(Value rightInstance)
            {
                return new Value(GameValueMethods.AddonFiles(rightInstance));
            }

            /// <summary>
            /// Sets ownership over a remotely detonatable mine to the unit.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value AddOwnedMine(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.AddOwnedMine(leftInstance, rightInstance));
            }

            /// <summary>
            /// MP server only: Adds player score.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value AddPlayerScores(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.AddPlayerScores(leftInstance, rightInstance));
            }

            /// <summary>
            /// Adds weapon item, including magazine, directly to the primaryWeapon. This is used for infantry weapons.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value AddPrimaryWeaponItem(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.AddPrimaryWeaponItem(leftInstance, rightInstance));
            }

            /// <summary>
            /// This command is deprecated since the introduction of remoteExec and remoteExecCall. This event handler will detect if a missionNamespace variable (it is attached to) has been broadcast over network with publicVariable, publicVariableClient or publicVariableServer commands and will execute EH code upon detection. Arguments passed to the code in _this array are: _this select 0: String - broadcast variable name (same variable name EH is attached to) _this select 1: Anything - broadcast variable value _this select 2: Object, Group - target the variable got set on with setVariable  (see Alternative Syntax) This EH works only in Multiplayer environment There is no way to remove this EH This EH will not fire on the machine that executed broadcast with publicVariable command, only on the machines that receive the broadcast The value of broadcast variable can be exactly the same, it is the actual broadcast that triggers EH not the change in variable
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value AddPublicVariableEventHandler(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.AddPublicVariableEventHandler(leftInstance, rightInstance));
            }

            /// <summary>
            /// Add a number to the rating of a unit - negative values can be used to reduce the rating. This command is usually used to reward for completed mission objectives. The rating is given at the end of the mission and is automatically adjusted when killing enemies or friendlies.  When the rating gets below -2000, the unit's side switches to "ENEMY" (sideEnemy) and the unit is attacked by everyone.(see Rating Values) See also: Arma 3: Event Handlers
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value AddRating(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.AddRating(leftInstance, rightInstance));
            }

            /// <summary>
            /// Adds resources to a team member.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value AddResources(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.AddResources(leftInstance, rightInstance));
            }

            /// <summary>
            /// Adds a number to the score of a unit. Negative values will remove from the score.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value AddScore(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.AddScore(leftInstance, rightInstance));
            }

            /// <summary>
            /// Adds side score. This is shown in the MP score tab as the total score. MP only.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value AddScoreSide(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.AddScoreSide(leftInstance, rightInstance));
            }

            /// <summary>
            /// Adds weapon item, including magazine, directly to the secondaryWeapon. This is used for infantry weapons.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value AddSecondaryWeaponItem(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.AddSecondaryWeaponItem(leftInstance, rightInstance));
            }

            /// <summary>
            /// Adds a unit to the list of units available for Team Switch. Units marked as playable in editor are automatically switchable. This command adds non-playable unit into array of switchableUnits and makes them available for teamSwitch. Singleplayer only!
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value AddSwitchableUnit(Value rightInstance)
            {
                return new Value(GameValueMethods.AddSwitchableUnit(rightInstance));
            }

            /// <summary>
            /// Add given member to given team. Effect is local, unless both member and team are local to PC on which command is executed, then effect is global.  The same Team Member can be member of several different teams at the same time.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value AddTeamMember(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.AddTeamMember(leftInstance, rightInstance));
            }

            /// <summary>
            /// Adds an array of vehicles/units to disposal manager for automatic wreck/body removal. The disposal manager follows wreck/body removal values set in description.ext
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value AddToRemainsCollector(Value rightInstance)
            {
                return new Value(GameValueMethods.AddToRemainsCollector(rightInstance));
            }

            /// <summary>
            /// Applies torque (rotation momentum) to the  center of mass of the given object. Torque force is defined as vector [x, y, z] applied in world space. If you need to define torque in model space, convert the torque vector first by vectorModelToWorld or vectorModelToWorldVisual command. The torque applied as impulse. Diagram below explain which way the object would rotate.  For more information see NVIDIA docs  A single application of torque would produce one impulse, which may not be enough. In this case consider applying a series of continuous impulses, for example to make a quad bike to roll forward: onEachFrame { quad addTorque (quad vectorModelToWorld [100,0,0]) }; ⚠This command doesn't follow convention for torque direction, which obeys right-hand rule. To comply, negate all values in the vector.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value AddTorque(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.AddTorque(leftInstance, rightInstance));
            }

            /// <summary>
            /// Create a new uniform and try to link it into uniform slot (given uniform has to be supported by allowedUniforms list of target soldier). To check if a uniform is allowed use isUniformAllowed, and to force an incompatible uniform use forceAddUniform.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value AddUniform(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.AddUniform(leftInstance, rightInstance));
            }

            /// <summary>
            /// Adds a user action event handler to the current mission and returns its event handler index.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value scalar</returns>
            public static Value AddUserActionEventHandler(Value rightInstance)
            {
                return new Value(GameValueMethods.AddUserActionEventHandler(rightInstance));
            }

            /// <summary>
            /// Adds a specified vehicle for use by a specified AI led group. See AI Group Vehicle Management for more information.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value AddVehicle(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.AddVehicle(leftInstance, rightInstance));
            }

            /// <summary>
            /// Create a new vest and try to link it into vest slot.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value AddVest(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.AddVest(leftInstance, rightInstance));
            }

            /// <summary>
            /// Adds (or inserts when index is given) a new waypoint to a group. The waypoint is placed randomly within a circle with the given center and radius. The function returns a waypoint with format [group, index]. Prior to Arma 3 v1.90, if you need exact waypoint placement, use setWaypointPosition
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value AddWaypoint(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.AddWaypoint(leftInstance, rightInstance));
            }

            /// <summary>
            /// Add a weapon to a unit. For a global version of this command see addWeaponGlobal. Infantry units can only carry a specific number of weapons, once the weapon slots are filled, any further addWeapon commands are ignored. a magazine must be added first for the added weapon to be loaded. ⚠In Arma 3 this command can also link items to the inventory slots, the functionality is identical to linkItem command, which it global and thus differ in how it should be used.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value AddWeapon(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.AddWeapon(leftInstance, rightInstance));
            }

            /// <summary>
            /// Add weapons to the cargo space of vehicles, which can be taken out by infantry units. Ignores available cargo space. In Arma 3, arguments for this command must be local (LALocal). For global variant see addWeaponCargoGlobal.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value AddWeaponCargo(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.AddWeaponCargo(leftInstance, rightInstance));
            }

            /// <summary>
            /// Add weapons to the cargo space of vehicles, which can be taken out by infantry units.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value AddWeaponCargoGlobal(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.AddWeaponCargoGlobal(leftInstance, rightInstance));
            }

            /// <summary>
            /// Add a weapon to a unit. Infantry units can only carry weapons in their respective slots (primary, secondary and handgun), the addWeaponGlobal command will replace the weapon currently in a slot with the added weapon if it shares the same slot. This command can link items to respective slots as well, in which case the functionality is identical to linkItem. To make sure the added weapon is loaded and ready, add the magazine first. ⚠This command is broken when used on dedicated server
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value AddWeaponGlobal(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.AddWeaponGlobal(leftInstance, rightInstance));
            }

            /// <summary>
            /// Adds a weapon item to the specified weapon. The item can be weapon magazine, in which case the amount of ammo and target muzzle could also be specified.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value AddWeaponItem(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.AddWeaponItem(leftInstance, rightInstance));
            }

            /// <summary>
            /// Add weapons to the weapon pool, of which the player may choose in the following mission. Available in campaigns only.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value AddWeaponPool(Value rightInstance)
            {
                return new Value(GameValueMethods.AddWeaponPool(rightInstance));
            }

            /// <summary>
            /// Adds a weapon to the turret. Use turret path [-1] for driver's turret.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value AddWeaponTurret(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.AddWeaponTurret(leftInstance, rightInstance));
            }

            /// <summary>
            /// Adds a weapon into the cargo space of a vehicle / box with given attachments / magazines. Ignores available cargo space. If the weapon class has any pre-attached items (LinkedItems), they are removed and new items, supplied via command arguments, are added.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value AddWeaponWithAttachmentsCargo(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.AddWeaponWithAttachmentsCargo(leftInstance, rightInstance));
            }

            /// <summary>
            /// Adds a weapon into the cargo space of a vehicle / box with given attachments / magazines. Ignores available cargo space. If the weapon class has any pre-attached items (LinkedItems), they are removed and new items, supplied via command arguments, are added.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value AddWeaponWithAttachmentsCargoGlobal(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.AddWeaponWithAttachmentsCargoGlobal(leftInstance, rightInstance));
            }

            /// <summary>
            /// This is dedicated server command, which queries the admin state of any client on the network by their client (owner) id. To self-check the admin state of a local client, use BIS_fnc_admin.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value scalar</returns>
            public static Value Admin(Value rightInstance)
            {
                return new Value(GameValueMethods.Admin(rightInstance));
            }

            /// <summary>
            /// Return a person for a given agent.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value object</returns>
            public static Value Agent(Value rightInstance)
            {
                return new Value(GameValueMethods.Agent(rightInstance));
            }

            /// <summary>
            /// Return a list of agents in the current mission.
            /// </summary>
            /// <returns>Value array</returns>
            public static Value Agents()
            {
                return new Value(GameValueMethods.Agents());
            }

            /// <summary>
            /// Converts position from PositionAGL to PositionASL.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value AGLToASL(Value rightInstance)
            {
                return new Value(GameValueMethods.AGLToASL(rightInstance));
            }

            /// <summary>
            /// Returns how good the weapon of the vehicle is aimed at the target.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value scalar</returns>
            public static Value AimedAtTarget(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.AimedAtTarget(leftInstance, rightInstance));
            }

            /// <summary>
            /// Returns the position of the object other units can aim to.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value AimPos(Value rightInstance)
            {
                return new Value(GameValueMethods.AimPos(rightInstance));
            }

            /// <summary>
            /// Returns array with air density data.For this command to have any effect, the Advanced Flight Model (AFM) has to be enabled. AFM status can be checked with difficultyEnabledRTD.
            /// </summary>
            /// <returns>Value array</returns>
            public static Value AirDensityCurveRTD()
            {
                return new Value(GameValueMethods.AirDensityCurveRTD());
            }

            /// <summary>
            /// Returns air density in given altitude. For this command to have any effect, the Advanced Flight Model (AFM) has to be enabled. AFM status can be checked with difficultyEnabledRTD.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value scalar</returns>
            public static Value AirDensityRTD(Value rightInstance)
            {
                return new Value(GameValueMethods.AirDensityRTD(rightInstance));
            }

            /// <summary>
            /// Returns throttle position. Works only on player's vehicle.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value scalar</returns>
            public static Value AirplaneThrottle(Value rightInstance)
            {
                return new Value(GameValueMethods.AirplaneThrottle(rightInstance));
            }

            /// <summary>
            /// Gets the side of an airport, set by setAirportSide. Default side is sideUnknown. See Arma: Airport IDs for a list of airport ids.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value side</returns>
            public static Value AirportSide(Value rightInstance)
            {
                return new Value(GameValueMethods.AirportSide(rightInstance));
            }

            /// <summary>
            /// Alternative Injury Simulation (AIS) end state. Used to tell engine that script side healing is done when using "HandleHeal" event handler.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value AISFinishHeal(Value rightInstance)
            {
                return new Value(GameValueMethods.AISFinishHeal(rightInstance));
            }

            /// <summary>
            /// Check if given vehicle/person/building is alive (i.e. not dead or destroyed).
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value bool</returns>
            public static Value Alive(Value rightInstance)
            {
                return new Value(GameValueMethods.Alive(rightInstance));
            }

            /// <summary>
            /// Returns an array of all currently placed Eden Editor entities. This information is only available in Eden Editor. If used during mission, it will return [[],[],[],[],[],[],[],[-999]].
            /// </summary>
            /// <returns>Value array</returns>
            public static Value All3DENEntities()
            {
                return new Value(GameValueMethods.All3DENEntities());
            }

            /// <summary>
            /// Returns a list of all layers that have currently active title effect. Numbers equal to or greater than 0 represent cut layers, where as -1 represents title layer (see Title Effect Type). Named layers are represented by their respective index.Effects created with titleText, titleRsc and titleObj commands do not have a numbered layer, so they are represented as -1 layer in the result. Effects created with cutText, cutRsc and cutObj are created either on layer 0, if no layer is specified, or on the given layer, if the layer index is specified, so they are represented by the layer index.
            /// </summary>
            /// <returns>Value array</returns>
            public static Value AllActiveTitleEffects()
            {
                return new Value(GameValueMethods.AllActiveTitleEffects());
            }

            /// <summary>
            /// Returns the list of all loaded addons.
            /// </summary>
            /// <returns>Value array</returns>
            public static Value AllAddonsInfo()
            {
                return new Value(GameValueMethods.AllAddonsInfo());
            }

            /// <summary>
            /// Returns all map airports, both static and dynamic.
            /// </summary>
            /// <returns>Value array</returns>
            public static Value AllAirports()
            {
                return new Value(GameValueMethods.AllAirports());
            }

            /// <summary>
            /// Returns a list of all controls for desired existing display. Returned controls also include controls from CT_CONTROLS_GROUPs.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value AllControls(Value rightInstance)
            {
                return new Value(GameValueMethods.AllControls(rightInstance));
            }

            /// <summary>
            /// Returns list of all curator logic units, not the units assigned to the logic.
            /// </summary>
            /// <returns>Value array</returns>
            public static Value AllCurators()
            {
                return new Value(GameValueMethods.AllCurators());
            }

            /// <summary>
            /// Returns all named layers used by cutRsc, cutText, cutObj or cutFadeOut. The layer normally would be added on the first use of any of the aforementioned commands, however if a layer needs to be reserved it could be done like so: private _layerNum = "TAG_myLayerName" cutFadeOut 0;
            /// </summary>
            /// <returns>Value array</returns>
            public static Value AllCutLayers()
            {
                return new Value(GameValueMethods.AllCutLayers());
            }

            /// <summary>
            /// Return a list of all dead units including agents and destroyed vehicles. Dead units may be in vehicles.
            /// </summary>
            /// <returns>Value array</returns>
            public static Value AllDead()
            {
                return new Value(GameValueMethods.AllDead());
            }

            /// <summary>
            /// Return a list of dead units including agents. Dead unit might be inside vehicle.
            /// </summary>
            /// <returns>Value array</returns>
            public static Value AllDeadMen()
            {
                return new Value(GameValueMethods.AllDeadMen());
            }

            /// <summary>
            /// Returns array with all Diary Records for the given subject available to the given person. See Diary for the explanation on the available subjects and their structure.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value AllDiaryRecords(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.AllDiaryRecords(leftInstance, rightInstance));
            }

            /// <summary>
            /// Returns array with all Diary subjects available to the given person. See Diary for the explanation on the available subjects and their structure.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value AllDiarySubjects(Value rightInstance)
            {
                return new Value(GameValueMethods.AllDiarySubjects(rightInstance));
            }

            /// <summary>
            /// Returns a list of all opened GUI displays. Other displays could be accessed via uiNamespace variable which is updated every time a display is opened or closed. For example, to access IGUI displays: private _iguiDisplays = uiNamespace getVariable ["IGUI_displays", []]; Other display variables: "3DENDisplaysTemp_displays" "3DENDisplays_displays" "BootcampDisplays_displays" "BootcampTitles_displays" "CuratorDisplays_displays" "CuratorTitles_displays" "GUI_displays" "IGUI_displays" "KartDisplays_displays" "Loading_displays"
            /// </summary>
            /// <returns>Value array</returns>
            public static Value AllDisplays()
            {
                return new Value(GameValueMethods.AllDisplays());
            }

            /// <summary>
            /// Returns all environmental 3D sound sources (Objects) like trees and houses in camera vicinity.
            /// </summary>
            /// <returns>Value array</returns>
            public static Value AllEnv3DSoundSources()
            {
                return new Value(GameValueMethods.AllEnv3DSoundSources());
            }

            /// <summary>
            /// Return a list of all groups created on the following sides east, west, resistance/independent and civilian only. Does not contain groups of sideLogic.
            /// </summary>
            /// <returns>Value array</returns>
            public static Value AllGroups()
            {
                return new Value(GameValueMethods.AllGroups());
            }

            /// <summary>
            /// Returns the list of object or model LODs.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value AllLODs(Value rightInstance)
            {
                return new Value(GameValueMethods.AllLODs(rightInstance));
            }

            /// <summary>
            /// Returns all markers in map including user placed markers (_USER_DEFINED #).  Since Arma 3 v1.58 User defined markers have the following name format: _USER_DEFINED #<PlayerID>/<MarkerID>/<ChannelID> where: <PlayerID> - unique network id of the player in String format, also available as String in the 6th param in  "PlayerConnected" and "PlayerDisconnected" EHs <MarkerID> - a marker counter id <ChannelID> - id of the chat channel on which marker was placed (see currentChannel) For custom waypoint position (LShift+LMB) see customWaypointPosition
            /// </summary>
            /// <returns>Value array</returns>
            public static Value AllMapMarkers()
            {
                return new Value(GameValueMethods.AllMapMarkers());
            }

            /// <summary>
            /// Returns an array of all mines in the mission
            /// </summary>
            /// <returns>Value array</returns>
            public static Value AllMines()
            {
                return new Value(GameValueMethods.AllMines());
            }

            /// <summary>
            /// Returns all objects of the given type that are currently present in the mission. In some cases, the entities command is a much faster alternative to this command. Some of the special types that can be detected with this command (and with nearestObject): "" - returns everything, e.g. agents, bees, mosquitoes, footprints, armed mines, ... "all" - more restrictive than "": no ambient insects, only agents such as rabbits and snakes, no footprints, tracks, no armed mines "#slop" - blood drops "#mark" - unit footprints "#track" - vehicle tracks "#crater" - explosion craters on the ground "#crateronvehicle" - bullet marks on vehicles "#explosion" - explosions "#objectdestructed" - building, tree or bush destruction "#soundonvehicle" - sounds created with say3D for example "#dynamicsound" - sound sources created using createSoundSource "EmptyDetector" - all Triggers "Logic" - all game logics ⚠This command is quite performance heavy. Use with caution!
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value AllMissionObjects(Value rightInstance)
            {
                return new Value(GameValueMethods.AllMissionObjects(rightInstance));
            }

            /// <summary>
            /// Returns array of requested objects as fast as the engine allows it. The objects can be requested by object type and simulation kind. Some terrain placed objects are not part of slow vehicles collection, use nearestTerrainObjects command to return these objects
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value AllObjects(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.AllObjects(leftInstance, rightInstance));
            }

            /// <summary>
            /// Allow/dissallow 3D mode.,  Some Old Editor Command
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value Allow3DMode(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.Allow3DMode(leftInstance, rightInstance));
            }

            /// <summary>
            /// If true, units will remain in a vehicle with broken tracks/wheels; they will still eject if the vehicle is drowning, about to explode or upside down for a while. The alternative syntax provides the ability to keep the crew in vehicle when it is upside down.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value AllowCrewInImmobile(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.AllowCrewInImmobile(leftInstance, rightInstance));
            }

            /// <summary>
            /// Allows curator placing and working with modules outside of edit areas.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value AllowCuratorLogicIgnoreAreas(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.AllowCuratorLogicIgnoreAreas(leftInstance, rightInstance));
            }

            /// <summary>
            /// Enables / disables an entity's ability to receive damage. This command does not prevent the entity from taking scripted damage from commands such as setDamage, setHit, setHitIndex or setHitPointDamage. This command only supports entities (Entity is a child class of Object, i.e. all entities are objects, but not all objects are entities). Consequently, there are objects that are not affected by this command, for example terrain vegetation such as trees.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value AllowDamage(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.AllowDamage(leftInstance, rightInstance));
            }

            /// <summary>
            /// Allow or prevent an object being damaged (or injured, or killed). The command does not prevent object from taking scripted damage such as setDamage or setHit.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value AllowDammage(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.AllowDammage(leftInstance, rightInstance));
            }

            /// <summary>
            /// Returns which types of repair/refuel/rearm service are allowed. The two available types are manual, where the action is displayed to the user, and auto, where the service happens within distance. The engine default is both (manual and auto) for historic reasons.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value scalar</returns>
            public static Value AllowedService(Value rightInstance)
            {
                return new Value(GameValueMethods.AllowedService(rightInstance));
            }

            /// <summary>
            /// Allow/dissallow file ops (load/save etc). Some Old Editor Command
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value AllowFileOperations(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.AllowFileOperations(leftInstance, rightInstance));
            }

            /// <summary>
            /// Sets the cowardice level (the lack of courage or bravery) of a group or unit.  Notes: Fleeing only affects AI led groups. Only the group as a whole can flee (or not). The courage of the AI group is based on the group's leader courage subskill. Each group has a max strength (summed "armor" of all infantry units - plus armor when inside vehicles). If the group losses by injury/damage or death/destruction are higher than the max strength, multiplied by leader's courage or allowFleeing level , then the group will start fleeing. As result primarily the AI flees to a nearby "supply point" (some friendly units - preferably with medic or engineer, or a vehicle with repair/ammo/fuel cargo). Alternatively it will try to find a safe position within a 600m radius from the initial waypoint (danger, distance, amount of cover positions are taken into account). After the fleeing has been finished the group's initial strength is reset. Fleeing units in combatMode red, will be set to yellow when fleeing to avoid engaging enemies while doing so. While fleeing, the group leader will be set to green, to avoid giving engage or fire orders, unless in combatMode blue already. Also speedMode is set to full. When reaching their flee point/destination, they will change to combatMode yellow and speedMode normal. With allowFleeing one can make unit's flee earlier (or essentially never flee). Apply it, overrides the courage subskill influence.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value AllowFleeing(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.AllowFleeing(leftInstance, rightInstance));
            }

            /// <summary>
            /// Set if the units given in the list are allowed to enter vehicles. See AI Group Vehicle Management for more information.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value AllowGetIn(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.AllowGetIn(leftInstance, rightInstance));
            }

            /// <summary>
            /// Sets which type of repair/refuel/rearm service is allowed. The two available types are manual, where the action is displayed to the user, and auto, where the service happens within distance. The engine default is both (manual and auto) for historic reasons.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value AllowService(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.AllowService(leftInstance, rightInstance));
            }

            /// <summary>
            /// Force player to run/jog if set to false.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value AllowSprint(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.AllowSprint(leftInstance, rightInstance));
            }

            /// <summary>
            /// Returns a list of all units controlled by connected clients. This includes: Normal human players (including dead players) Virtual Entities (see Systems → Logic Entities → Virtual Entities in the Eden Editor) Headless Clients (HeadlessClient_F) Virtual Curators (VirtualCurator_F, *_VirtualCurator_F) Virtual Spectators (VirtualSpectator_F) Use BIS_fnc_listPlayers or see Example 1 to only get human players.
            /// </summary>
            /// <returns>Value array</returns>
            public static Value AllPlayers()
            {
                return new Value(GameValueMethods.AllPlayers());
            }

            /// <summary>
            /// Returns array of all simple objects that belong to the listed class names. If the array of types is empty [], all simple objects are returned including those without class name. There is no inheritance in simple objects, so only exact class match is allowed. className is not case sensitive.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value AllSimpleObjects(Value rightInstance)
            {
                return new Value(GameValueMethods.AllSimpleObjects(rightInstance));
            }

            /// <summary>
            /// Return all sites in map. ⚠This command is considered deprecated and is no longer supported
            /// </summary>
            /// <returns>Value array</returns>
            public static Value AllSites()
            {
                return new Value(GameValueMethods.AllSites());
            }

            /// <summary>
            /// Returns array of available turret paths from vehicle object. to look up turrets from config, use BIS_fnc_allTurrets to get config from turret path, use BIS_fnc_turretConfig
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value AllTurrets(Value rightInstance)
            {
                return new Value(GameValueMethods.AllTurrets(rightInstance));
            }

            /// <summary>
            /// Returns a list of all units, except agents, dead units or units waiting for respawn, outside and inside vehicles that were created on the following sides east, west, independent and civilian. To get all units of given side, use units Side.
            /// </summary>
            /// <returns>Value array</returns>
            public static Value AllUnits()
            {
                return new Value(GameValueMethods.AllUnits());
            }

            /// <summary>
            /// Return a list of all UAV vehicles.
            /// </summary>
            /// <returns>Value array</returns>
            public static Value AllUnitsUAV()
            {
                return new Value(GameValueMethods.AllUnitsUAV());
            }

            /// <summary>
            /// Returns a list of player ids of all the users on an MP server. This also lists Headless Clients.
            /// </summary>
            /// <returns>Value array</returns>
            public static Value AllUsers()
            {
                return new Value(GameValueMethods.AllUsers());
            }

            /// <summary>
            /// Returns a list of all variables from the desired namespace.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value AllVariables(Value rightInstance)
            {
                return new Value(GameValueMethods.AllVariables(rightInstance));
            }

            /// <summary>
            /// Returns ambient temperature on the current terrain in Celsius in format: [airTemperature, blackSurfaceTemperature, whiteSurfaceTemperature]
            /// </summary>
            /// <returns>Value array</returns>
            public static Value AmbientTemperature()
            {
                return new Value(GameValueMethods.AmbientTemperature());
            }

            /// <summary>
            /// Check how many rounds are left in the currently loaded magazine in the given muzzle. Since Arma v1.56 the command also returns ammo for units in vehicles.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value scalar</returns>
            public static Value Ammo(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.Ammo(leftInstance, rightInstance));
            }

            /// <summary>
            /// Returns ammo count on given pylon (or false on failure).
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value scalar</returns>
            public static Value AmmoOnPylon(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.AmmoOnPylon(leftInstance, rightInstance));
            }

            /// <summary>
            /// Returns true only if both conditions are true. In case of the alternative syntax, lazy evaluation is used - if left operand is false, evaluation of the right side is ignored.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value bool</returns>
            public static Value And(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.And(leftInstance, rightInstance));
            }

            /// <summary>
            /// Activates given object animation. Animation is defined in CfgModels animations class. Class names listed in CfgVehicles AnimationSources bound to "Proxy" controller can also be animated with animate command (see Arma 3: createVehicle/vehicles). It is recommended that animateSource command is used instead of animate whenever is possible, as it is more efficient and optimised for multiplayer Since Arma 3 v1.58 animation names can be obtained with animationNames ⚠Mixing animateSource command with animate command to animate the same part may produce some undefined behaviour.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value Animate(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.Animate(leftInstance, rightInstance));
            }

            /// <summary>
            /// Forces animation of bay to given state, -1 for reset to engine handling, can cause weapon inoperative, because weapon is released when bay state == 1. While there is no getter to read the animation phase of the given bay, animationPhase command can be used with the individual bay door name from animationNames as a workaround. For example, for the UCAV Sentinel: ucav animateBay [1, 1]; // can be checked with ucav animationPhase "weapons_bay_l_1" // or ucav animationPhase "weapons_bay_l_2"
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value AnimateBay(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.AnimateBay(leftInstance, rightInstance));
            }

            /// <summary>
            /// Animates a door on a vehicle. Animation is defined in config file in CfgVehicles ->  AnimationSources. Wanted animation phase is set with phase param. This command works only on animation sources with "door" controller. Door_L in the example below can be animated with animateDoor but not CargoRamp_Open: heli animateDoor ["Door_L", 1];⚠animateDoor phase param will be rounded: anything >0.5 will be rounded to 1 and <=0.5 will be rounded to 0. Therefore it is not possible to open a door half way with this command  class AnimationSources { 	class CargoRamp_Open 	{ 		source = "user"; 		animPeriod = 5; 		initPhase = 0; 	}; 	class Door_L 	{ 		source = "door"; 		animPeriod = 1.6; 	}; }; To animate doors or other sources that have "user" controller, use animate command, or even better, animateSource (recommended). Sources with "hit" controller can be animated with setHitPointDamage command applied to the name contained in hitpoint property. For availability of animation sources and their controller types see: Arma 3: createVehicle/vehicles
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value AnimateDoor(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.AnimateDoor(leftInstance, rightInstance));
            }

            /// <summary>
            /// Force animation of pylon to given state, -1 for reset to engine handling, can cause weapon inoperative, because weapon is released  when pylon state == 1.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value AnimatePylon(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.AnimatePylon(leftInstance, rightInstance));
            }

            /// <summary>
            /// Process an animation of the object. If animate uses class name from CfgModels Animations, animateSource uses name defined by the source property. AnimationSources can animate multiple animate Animations. AnimationSource is defined in CfgVehicles' AnimationSources (see Arma 3: createVehicle/vehicles). It is recommended that animateSource command is used instead of animate whenever is possible, as it is more efficient and optimized for MP ⚠Mixing animateSource command with animate command to animate the same part may produce some undefined behaviour.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value AnimateSource(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.AnimateSource(leftInstance, rightInstance));
            }

            /// <summary>
            /// Returns Array of Strings where elements are the names of model animations, which should theoretically be available for use with animate command. However in practice this depends on whether animation is also made available for use in scripts via config.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value AnimationNames(Value rightInstance)
            {
                return new Value(GameValueMethods.AnimationNames(rightInstance));
            }

            /// <summary>
            /// Returns the phase of the given animation on the given object. Animation can be scripted (animate, animateSource, animateDoor) or engine driven. Animation names for an object could be found out with animationNames command. When animation is rotation, like with "MainTurret" for example, the output is in radians, to convert to degrees use deg command.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value scalar</returns>
            public static Value AnimationPhase(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.AnimationPhase(leftInstance, rightInstance));
            }

            /// <summary>
            /// Returns current animation phase of given source. Similar to animationPhase or doorPhase but designed to complement animateSource. This command could be used to obtain relative turret direction and gun elevation on a vehicle (see Example 2).
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value scalar</returns>
            public static Value AnimationSourcePhase(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.AnimationSourcePhase(leftInstance, rightInstance));
            }

            /// <summary>
            /// Returns the name of a unit's current primary animation. Seems to be forced to lower case in Arma 3. This command is only for a man unit, other units such as animals cannot use this command.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value string</returns>
            public static Value AnimationState(Value rightInstance)
            {
                return new Value(GameValueMethods.AnimationState(rightInstance));
            }

            /// <summary>
            /// Returns current aperture parameters.
            /// </summary>
            /// <returns>Value array</returns>
            public static Value ApertureParams()
            {
                return new Value(GameValueMethods.ApertureParams());
            }

            /// <summary>
            /// Appends array2 to the back of array1 modifying array1. See insert for an "appendUnique" equivalent. append does not return array, it modifies the existing array. If you need to return a copy, use "+": array3 = array1 + array2;
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value Append(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.Append(leftInstance, rightInstance));
            }

            /// <summary>
            /// Applies the given code to each element of the given data structure and collects the results in an array.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value Apply(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.Apply(leftInstance, rightInstance));
            }

            /// <summary>
            /// Returns, stored in [USERNAME].ArmaXProfile, value of armoryPoints entry. If the entry doesn't exist, it returns 0.
            /// </summary>
            /// <returns>Value scalar</returns>
            public static Value ArmoryPoints()
            {
                return new Value(GameValueMethods.ArmoryPoints());
            }

            /// <summary>
            /// Intersects two arrays returning an array of unique common elements, avoiding nil values. Using the same array as both parameters will return unique elements of that array. Intersects only the first dimension of said arrays. From Arma 3 v 2.14 the order of the intersected elements would follow 'array1' order
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value ArrayIntersect(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.ArrayIntersect(leftInstance, rightInstance));
            }

            /// <summary>
            /// Arcsine of a number, result in Degrees.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value scalar_nan</returns>
            public static Value Asin(Value rightInstance)
            {
                return new Value(GameValueMethods.Asin(rightInstance));
            }

            /// <summary>
            /// Converts position from PositionASL to PositionAGL
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value ASLToAGL(Value rightInstance)
            {
                return new Value(GameValueMethods.ASLToAGL(rightInstance));
            }

            /// <summary>
            /// Converts a position from PositionASL to PositionATL
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value ASLToATL(Value rightInstance)
            {
                return new Value(GameValueMethods.ASLToATL(rightInstance));
            }

            /// <summary>
            /// Tests a condition and if the condition is false, displays error on screen (if -showscripterrors enabled) and logs error into .rpt file. It does not interrupt the script execution. If script was pre-processed with preprocessFileLineNumbers, it will also show/log the error line number and the file name.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value bool</returns>
            public static Value Assert(Value rightInstance)
            {
                return new Value(GameValueMethods.Assert(rightInstance));
            }

            /// <summary>
            /// Assign a unit as cargo of a vehicle. Used together with orderGetIn to order a unit to get in as cargo into a specific vehicle. Before usage of this command a subordinate unit has not got the option to get into the cargo space of the vehicle. See AI Group Vehicle Management for more information.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value AssignAsCargo(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.AssignAsCargo(leftInstance, rightInstance));
            }

            /// <summary>
            /// Assigns the character to a specific cargo / passenger index of the given vehicle. See AI Group Vehicle Management for more information.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value AssignAsCargoIndex(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.AssignAsCargoIndex(leftInstance, rightInstance));
            }

            /// <summary>
            /// Assign a unit as commander of a vehicle. Used together with orderGetIn to order subordinate units to get in as commander of a specific vehicle. Before usage of this command a subordinate unit has not got the option to get into the commander place of the vehicle. See AI Group Vehicle Management for more information.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value AssignAsCommander(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.AssignAsCommander(leftInstance, rightInstance));
            }

            /// <summary>
            /// Assign a unit as driver of a vehicle. Used together with orderGetIn to order subordinate units to get in as driver of a specific vehicle. Before usage of this command a subordinate unit has not got the option to get into the driver place of the vehicle. See AI Group Vehicle Management for more information.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value AssignAsDriver(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.AssignAsDriver(leftInstance, rightInstance));
            }

            /// <summary>
            /// Assign a unit as gunner of a vehicle. Used together with orderGetIn to order subordinate units to get in as gunner of a specific vehicle. Before usage of this command a subordinate unit has not got the option to get into the gunner place of the vehicle. See AI Group Vehicle Management for more information.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value AssignAsGunner(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.AssignAsGunner(leftInstance, rightInstance));
            }

            /// <summary>
            /// Assigns the soldier to turret. See AI Group Vehicle Management for more information.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value AssignAsTurret(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.AssignAsTurret(leftInstance, rightInstance));
            }

            /// <summary>
            /// Assign player as curator. Two players cannot act as one curator.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value AssignCurator(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.AssignCurator(leftInstance, rightInstance));
            }

            /// <summary>
            /// Returns the list of soldiers assigned to the given vehicle as a cargo.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value AssignedCargo(Value rightInstance)
            {
                return new Value(GameValueMethods.AssignedCargo(rightInstance));
            }

            /// <summary>
            /// Returns the soldier assigned to the given vehicle as a commander.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value object</returns>
            public static Value AssignedCommander(Value rightInstance)
            {
                return new Value(GameValueMethods.AssignedCommander(rightInstance));
            }

            /// <summary>
            /// Returns the soldier assigned to the given vehicle as a driver.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value object</returns>
            public static Value AssignedDriver(Value rightInstance)
            {
                return new Value(GameValueMethods.AssignedDriver(rightInstance));
            }

            /// <summary>
            /// Returns Group to which the given vehicle was added last with addVehicle. To update assignedGroup to the current group, run addVehicle to the current group again.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value group</returns>
            public static Value AssignedGroup(Value rightInstance)
            {
                return new Value(GameValueMethods.AssignedGroup(rightInstance));
            }

            /// <summary>
            /// Returns the soldier assigned to the given vehicle as a gunner.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value object</returns>
            public static Value AssignedGunner(Value rightInstance)
            {
                return new Value(GameValueMethods.AssignedGunner(rightInstance));
            }

            /// <summary>
            /// Get array with assigned items. The resulting Array order is not guaranteed. To check availability of a particular slot item use getSlotItemName. To return stored items see items and itemsWithMagazines.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value AssignedItems(Value rightInstance)
            {
                return new Value(GameValueMethods.AssignedItems(rightInstance));
            }

            /// <summary>
            /// Returns the target assigned to an unit or the vehicle's effectiveCommander. The target can be assigned by the group/vehicle/formation leader (as player via quick command menu or "target" complex command menu). To unassign the target use doWatch objNull or commandWatch objNull or as player and group leader order "no target" in the "target" complex command menu. This command does not return the target a unit is actually engaging ("attack unit"). For this information, see getAttackTarget. If a player is inside a vehicle as the effectiveCommander, the vehicle's crew assignedTarget will always be objNull.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value object</returns>
            public static Value AssignedTarget(Value rightInstance)
            {
                return new Value(GameValueMethods.AssignedTarget(rightInstance));
            }

            /// <summary>
            /// Returns the team the unit belongs to. Possible values: "MAIN" (default and white) "RED" "GREEN" "BLUE" "YELLOW" 1.94 "" if given unit is objNull or remoteControlling another unit
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value string</returns>
            public static Value AssignedTeam(Value rightInstance)
            {
                return new Value(GameValueMethods.AssignedTeam(rightInstance));
            }

            /// <summary>
            /// Returns the vehicle to which a unit is assigned, usually with assignAsXXX command. If no vehicle is assigned objNull is returned. See AI Group Vehicle Management for more information.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value object</returns>
            public static Value AssignedVehicle(Value rightInstance)
            {
                return new Value(GameValueMethods.AssignedVehicle(rightInstance));
            }

            /// <summary>
            /// Returns the role a unit is assigned to within its assigned vehicle. See AI Group Vehicle Management for more information.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value AssignedVehicleRole(Value rightInstance)
            {
                return new Value(GameValueMethods.AssignedVehicleRole(rightInstance));
            }

            /// <summary>
            /// Returns all vehicles added to the given Group with addVehicle.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value AssignedVehicles(Value rightInstance)
            {
                return new Value(GameValueMethods.AssignedVehicles(rightInstance));
            }

            /// <summary>
            /// Assigns existing item from inventory (uniform, vest, backpack) to a correct slot. If the slot is occupied by another item, it gets replaced. See also linkItem.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value AssignItem(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.AssignItem(leftInstance, rightInstance));
            }

            /// <summary>
            /// Team Value White "MAIN" Red "RED" Green "GREEN" Blue "BLUE" Yellow "YELLOW" Assigns the unit (in case of a vehicle, its commander) to the given team. Team is an option in group control (unit management) menu that allows to split player group in teams and then give bulk order to separate teams. In order to operate properly, the command requires specific conditions: the command requires player to be fully initialised the unit getting assigned must be either player himself or a unit in player's group The colour of the assigned team for a unit is seen on the group management UI as well as squad radar. ⚠In older versions of the game (Arma 2?) the effect of this command is local LELocal.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value AssignTeam(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.AssignTeam(leftInstance, rightInstance));
            }

            /// <summary>
            /// Assigns a plane to an airport ID or object.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value AssignToAirport(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.AssignToAirport(leftInstance, rightInstance));
            }

            /// <summary>
            /// Returns the arcus tangens.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value scalar_nan</returns>
            public static Value Atan(Value rightInstance)
            {
                return new Value(GameValueMethods.Atan(rightInstance));
            }

            /// <summary>
            ///  ArcTangent of y/x. Used to determine the angle of a vector [y,x]. Result in Degrees between -180 and 180. This command can handle x being 0, unlike when using atan, and will return 90 ⚠Even though this command is a binary operator just like select command, it has  higher precedence than select command, therefore the following expression: _pos select 0 atan2 (_pos select 1) will produce an error. The correct usage in this case will be: (_pos select 0) atan2 (_pos select 1) Alternatively, consider using the # operator: _pos#0 atan2 _pos#1
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value scalar_nan</returns>
            public static Value Atan2(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.Atan2(leftInstance, rightInstance));
            }

            /// <summary>
            /// Returns the arcus tangens.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value scalar_nan</returns>
            public static Value Atg(Value rightInstance)
            {
                return new Value(GameValueMethods.Atg(rightInstance));
            }

            /// <summary>
            /// Converts a position from PositionATL to PositionASL
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value ATLToASL(Value rightInstance)
            {
                return new Value(GameValueMethods.ATLToASL(rightInstance));
            }

            /// <summary>
            /// Returns the object a location is attached to. If the location is unattached, then objNull is returned.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value object</returns>
            public static Value AttachedObject(Value rightInstance)
            {
                return new Value(GameValueMethods.AttachedObject(rightInstance));
            }

            /// <summary>
            /// Returns a list of objects attached to the given object.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value AttachedObjects(Value rightInstance)
            {
                return new Value(GameValueMethods.AttachedObjects(rightInstance));
            }

            /// <summary>
            /// Returns object the given object is attached to or objNull if the given object is not attached to anything.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value object</returns>
            public static Value AttachedTo(Value rightInstance)
            {
                return new Value(GameValueMethods.AttachedTo(rightInstance));
            }

            /// <summary>
            /// Attaches a location to the specified object. To detach a location, attach it to objNull.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value AttachObject(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.AttachObject(leftInstance, rightInstance));
            }

            /// <summary>
            /// Attaches an object to another object. The offset is applied to the object center unless a memory point is provided, in which case the offset will be applied to the memory point position. If no offset is specified, the current offset between the two objects will be used. All direction commands, such as setDir, setVectorDirAndUp, etc. for an attached object should be used relative to the reference object's direction (i.e. in model space), e.g _attachedObj setDir 0 will make it face the same direction as the reference object, 90 face to the right, 180 face to the back, etc. Attached triggers only follow the direction of the object to which they are attached, not pitch or roll.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value AttachTo(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.AttachTo(leftInstance, rightInstance));
            }

            /// <summary>
            /// Return whether a group's leader can issue attack commands to soldiers under his command.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value bool</returns>
            public static Value AttackEnabled(Value rightInstance)
            {
                return new Value(GameValueMethods.AttackEnabled(rightInstance));
            }

            /// <summary>
            /// Wakes up sleeping PhysX object or puts a PhysX object to sleep. In 2.10 this command can be used on corpses of type Man and has no effect on alive units. When unit gets killed it goes into ragdoll state for a short while, then the units get frozen and any simulation and collision is removed to save system resources. As a result, corpses do not react to their surrounding any more. Using this command will temporarily re-enable ragdoll state of a corpse to the same state it was when unit died. If this command is used in "enable/disable" sequence on a dead body, it gives the corpse a visible nudge (See example 3). This command won't have lasting effect on vehicles as vehicles are actively simulated, but it works rather well on smaller PhysX enabled objects.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value Awake(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.Awake(leftInstance, rightInstance));
            }

            /// <summary>
            /// Returns a class of a backpack.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value string</returns>
            public static Value Backpack(Value rightInstance)
            {
                return new Value(GameValueMethods.Backpack(rightInstance));
            }

            /// <summary>
            /// Get array with backpacks from ammo box (or any general weapon holder container).
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value BackpackCargo(Value rightInstance)
            {
                return new Value(GameValueMethods.BackpackCargo(rightInstance));
            }

            /// <summary>
            /// Returns a cargo container of a unit's backpack.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value object</returns>
            public static Value BackpackContainer(Value rightInstance)
            {
                return new Value(GameValueMethods.BackpackContainer(rightInstance));
            }

            /// <summary>
            /// Get array with all items (of any kind, even weapons) in backpack of the given unit.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value BackpackItems(Value rightInstance)
            {
                return new Value(GameValueMethods.BackpackItems(rightInstance));
            }

            /// <summary>
            /// Get array with all magazines from backpack of the given unit.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value BackpackMagazines(Value rightInstance)
            {
                return new Value(GameValueMethods.BackpackMagazines(rightInstance));
            }

            /// <summary>
            /// 
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value Backpacks(Value rightInstance)
            {
                return new Value(GameValueMethods.Backpacks(rightInstance));
            }

            /// <summary>
            /// Returns how much space is in backpack for given weapon or magazine
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value BackpackSpaceFor(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.BackpackSpaceFor(leftInstance, rightInstance));
            }

            /// <summary>
            /// Returns the behaviour of the individual unit, this is why it only accepts Object as the argument. For Arma 3 behaviour explanation see Arma_3_AI_Behavior
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value string</returns>
            public static Value Behaviour(Value rightInstance)
            {
                return new Value(GameValueMethods.Behaviour(rightInstance));
            }

            /// <summary>
            /// Returns the value of "3D Performance" in OFP Preferences (flashpoint.cfg). This can be used to estimate the computer performance to adapt CPU and GPU demanding settings like view distance dynamically in missions.
            /// </summary>
            /// <returns>Value scalar</returns>
            public static Value Benchmark()
            {
                return new Value(GameValueMethods.Benchmark());
            }

            /// <summary>
            /// Gets interpolated value based on Bézier curve with given control points (progress value is 0...1 for a curve that starts at pos0 and finishes at posN) 
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value BezierInterpolation(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.BezierInterpolation(leftInstance, rightInstance));
            }

            /// <summary>
            /// Returns class name of currently used binocular weapon.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value string</returns>
            public static Value Binocular(Value rightInstance)
            {
                return new Value(GameValueMethods.Binocular(rightInstance));
            }

            /// <summary>
            /// Returns array with all items assigned to the binocular weapon except magazines. Use binocularMagazine command for the latter. This command is used for infantry weapons only.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value BinocularItems(Value rightInstance)
            {
                return new Value(GameValueMethods.BinocularItems(rightInstance));
            }

            /// <summary>
            /// Collects all loaded magazines from all binocular muzzles and returns them in Array, otherwise it returns []. This command is used for infantry weapons only.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value string</returns>
            public static Value BinocularMagazine(Value rightInstance)
            {
                return new Value(GameValueMethods.BinocularMagazine(rightInstance));
            }

            /// <summary>
            /// Pre-defined variable for the blufor side.
            /// </summary>
            /// <returns>Value side</returns>
            public static Value Blufor()
            {
                return new Value(GameValueMethods.Blufor());
            }

            /// <summary>
            ///  Returns a bounding box of given object in model coordinate space, adjusted according to destruction/animation of an object. This command is rather generous on the size estimation, for more precise coordinates use boundingBoxReal. In 1.92 The output of both syntaxes got extended to include bounding sphere diameter. See also sizeOf.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value BoundingBox(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.BoundingBox(leftInstance, rightInstance));
            }

            /// <summary>
            ///  Returns a raw bounding box of given object in model coordinates space. This command is similar to boundingBox but gives more precise measurements. The alternative syntax allows to specify clipping type to be used, which in some cases could make the result even more precise.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value BoundingBoxReal(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.BoundingBoxReal(leftInstance, rightInstance));
            }

            /// <summary>
            /// Returns the position of the original (loaded) center of an object in model coordinates. Despite its name, it has nothing to do with boundingBox or boundingBoxReal, it returns offset where [0, 0, 0] was Object Builder / Oxygen 2 when model was created.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value BoundingCenter(Value rightInstance)
            {
                return new Value(GameValueMethods.BoundingCenter(rightInstance));
            }

            /// <summary>
            /// Returns the status of autobrake (see disableBrakes).
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value bool</returns>
            public static Value BrakesDisabled(Value rightInstance)
            {
                return new Value(GameValueMethods.BrakesDisabled(rightInstance));
            }

            /// <summary>
            /// Skips all loop iterations (for, forEach, while, findIf etc).
            /// </summary>
            /// <returns>Value nothing</returns>
            public static Value Break()
            {
                return new Value(GameValueMethods.Break());
            }

            /// <summary>
            /// Breaks out of the scope with given name. An unknown scopeName name will cause the script error Generic error in expression If multiple scopes with the same name exist, the command will break out the nearest scope. See Example 3.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value any</returns>
            public static Value BreakOut(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.BreakOut(leftInstance, rightInstance));
            }

            /// <summary>
            /// Breaks block to scope named name. Nil is returned. Scope name can be assigned using scopeName command.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value BreakTo(Value rightInstance)
            {
                return new Value(GameValueMethods.BreakTo(rightInstance));
            }

            /// <summary>
            /// Skips all loop iterations and immediately returns the given value.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value any</returns>
            public static Value BreakWith(Value rightInstance)
            {
                return new Value(GameValueMethods.BreakWith(rightInstance));
            }

            /// <summary>
            /// Returns the name of the current briefing/scenario name.
            /// </summary>
            /// <returns>Value string</returns>
            public static Value BriefingName()
            {
                return new Value(GameValueMethods.BriefingName());
            }

            /// <summary>
            /// Returns the given indexed exit in a building. The returned value is in format Position.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value BuildingExit(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.BuildingExit(leftInstance, rightInstance));
            }

            /// <summary>
            /// Returns position of a given indexed position in a building.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value BuildingPos(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.BuildingPos(leftInstance, rightInstance));
            }

            /// <summary>
            /// Returns the action assigned to a control of the currently active user dialog. Can be used for buttons and active texts. Read Arma: GUI Configuration for more information about user dialogs and controls.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value string</returns>
            public static Value ButtonAction(Value rightInstance)
            {
                return new Value(GameValueMethods.ButtonAction(rightInstance));
            }

            /// <summary>
            /// 🕖The following information is obsolete. Reason: Use ctrlAddEventHandler instead. Set the action of a control of the currently active user dialog. The script statement is executed on button release and _this is available, but contains ""; See Arma: GUI Configuration for more information about user dialogs. Works with: CT_BUTTON CT_XBUTTON CT_ACTIVETEXT CT_SHORTCUTBUTTON
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value ButtonSetAction(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.ButtonSetAction(leftInstance, rightInstance));
            }

            /// <summary>
            /// Prior to Arma 3 it returns if the player is currently playing in cadet or veteran mode.
            /// </summary>
            /// <returns>Value bool</returns>
            public static Value CadetMode()
            {
                return new Value(GameValueMethods.CadetMode());
            }

            /// <summary>
            /// Spawns an agent that will execute an AI path calculation and fire the "PathCalculated"  event handler. The vehicle type to simulate could be one of the following presets: "man" (will use "C_man_1") "car" (will use "C_Offroad_01_F") "tank" (will use "B_MBT_01_cannon_F") "wheeled_APC" (will use "B_APC_Tracked_01_rcws_F") "boat" (will use "C_Rubberboat") "plane" (will use "B_Plane_CAS_01_dynamicLoadout_F") "helicopter" (will use "B_Heli_Light_01_F") If the given vehicle type is not one of the above presets, the exact given type is used. ⚠In order to guarantee that the event handler is added to the result of this command before the path is calculated, use isNil to run the code in an Unscheduled Environment: isNil { calculatePath ["man", "safe", _startPos, _endPos] addEventHandler ["PathCalculated", { hint str _this }] }; If an exact path is desired, it is recommended to avoid this command and simply use the PathCalculated event handler. Paths to long distances are typically calculated in segments. This command only gives the first calculated segment.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value object</returns>
            public static Value CalculatePath(Value rightInstance)
            {
                return new Value(GameValueMethods.CalculatePath(rightInstance));
            }

            /// <summary>
            /// Sets if friendly units will calculate player's visibility or not. Default value is false.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value CalculatePlayerVisibilityByFriendly(Value rightInstance)
            {
                return new Value(GameValueMethods.CalculatePlayerVisibilityByFriendly(rightInstance));
            }

            /// <summary>
            /// Adds given set of compiled instructions to the current stack and waits for it to finish and return, provides an option to pass arguments to the executed Code. See Scheduler to learn more about how the code is executed and behaves.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value any</returns>
            public static Value Call(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.Call(leftInstance, rightInstance));
            }

            /// <summary>
            /// Calls custom .dll also known as Extension. The name of the extension is the name of the extension .dll without ".dll" part (or without "_x64.dll" part on 64-bit Arma). For example if the file is 'myExtension.dll' the name of the extension will be "myExtension". For 64-bit extensions, the name of the extension doesn't need to change and is still "myExtension". The game will automatically look for 'myExtension_x64.dll' when you use 64-bit Arma exe. This command is blocking, meaning that the game will wait for the extension to return before continuing. This may cause FPS drop if extension is not optimised. If extension takes too long, consider making asynchronous extension, where the result of the work of the extension is collected in a separate call. Currently there is no limit how much data you can send to the extension. However there is a limit on how much data you can return from extension in one call. The limit is known to the extension and is passed in  int outputSize. The limit may or may not change in the future and is currently 10240 bytes. It is up to extension designer to handle multipart results if returned data exceeds output limit. Since Arma 3 v1.67 it is possible to pass array of arguments to extensions. The array of arguments could be anything and all elements will be converted to strings, however you might want to only send simple types like Booleans, Strings, Numbers and Arrays of all of the above. There is currently a limit on how many arguments can be sent and it is 2048 (since Arma 3 v1.92; previous limit: 1024). However an argument could be an Array itself, in this case extension maker will have to provide additional methods for parsing such arguments. Possible error codes: 101: SYNTAX_ERROR_WRONG_PARAMS_SIZE 102: SYNTAX_ERROR_WRONG_PARAMS_TYPE 201: PARAMS_ERROR_TOO_MANY_ARGS 301: EXECUTION_WARNING_TAKES_TOO_LONG Each error will have entry in .rpt file with more details. The extension execution timeout, after which 301: EXECUTION_WARNING_TAKES_TOO_LONG warning is issued, is hardcoded on clients and is 1000.0 milliseconds (1 second). On the server the default limit is also 1 second, however it is possible to set custom limit with callExtReportLimit param (see  Server Options). If an extension with the given name can't be found (or it is found but doesn't implement the required interface properly / at all) the following error will be written into the RPT (In this example the given dll-name was "MyExtension"): 14:27:07 CallExtension 'MyExtension' could not be found If an extension is not whitelisted with BattlEye (see Extensions for more info) it will be blocked on clients running with enabled BattlEye protection. RPT message outputted however is a little obscure: 21:35:04 Call extension 'MyExtension' could not be loaded: Insufficient system resources exist to complete the requested service Since Arma 3 v1.69, RVExtensionVersion interface (see source code example below) has been added, which is called by the engine on extension load and expects extension version. This interface is designed to work with both, Linux and Windows. The max buffer size is 32 bytes. The version information will then appear in .rpt file like so: 19:06:36 CallExtension loaded: test_extension (.\test_extension.dll) [1.0.0.1] For more information see Extensions. Linux specific While on Windows the extension name is case-insensitive, on Linux the extension name is case-sensitive and should match the name of the .so file exactly (minus ".so" part). ⚠If a user has anti-virus software real time protection running, this could cause brand new extension to stutter the game and return with EXECUTION_WARNING_TAKES_TOO_LONG when executed for the first time, because of the AV software scanning. After the extension is whitelisted by AV this should go away until a new version of the extension is installed. Perhaps a dummy call to the extension on init should be considered as a feature of implementation to account for that Extension Callback Since Arma 3 v1.95 it is possible to call the game directly from the extension via function pointer provided when extension is called for the first time (assuming the extension implements at least one of the RVExtension or RVExtensionArgs methods). The function pointer passed over to RVExtensionRegisterCallback method is of the following signature (see Example 4): int(*callbackProc)(char const *name, char const *function, char const *data) Calling this function pointer from extension will trigger  "ExtensionCallback" mission event handler with 3 user supplied params. The params are name - make it unique name, for example the extension name, so that other modders can quickly filter out calls from own extensions function - make it name of the function the extension sends the result to. (Note: The returned function is just a STRING! So compile is needed, before using call or spawn, to execute it) data - make it the actual result. You can also format it as an array so it could be parsed by parseSimpleArray Calling function pointer returns an int. This is the number of available slots in the input buffer left for this frame after your call and can range from 99 to -1. The buffer is processed and cleared every frame and the maximum number of slots that can be filled per frame is 100. If you are planning to call back with more than 100 results per frame, make sure your extension retries if it receives negative int, which means the buffer was full and your call did not succeed. Ideally suited for callbacks from different threads, but if callback is initiated from the calling thread, the EH will fire on the next frame of game simulation. Needless to say, the "ExtensionCallback" event handler needs to exist before any callbacks, otherwise the data will just stay in the buffer. Removing all "ExtensionCallback" EHs clears the buffer as well as mission restart. Extension Context Since Arma 3 v2.11 the engine will call RVExtensionContext method (if exists, see Example 5) and pass the following data: steamID of the client calling extension getPlayerUID or "0" fileSource from which the extension was executed or "" if done on the fly missionName missionNameSource serverName serverName
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value CallExtension(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.CallExtension(leftInstance, rightInstance));
            }

            /// <summary>
            /// Executes a command on the given camera / actor object. Known commands: All cameras "Camera" "Seagull" "CamCurator" "manual on" "manual off" "inertia on" "inertia off" "landed" lands the seagull "airborne" makes the seagull fly "maxPitch (x)" (number, in degrees) "minPitch (x)" (number, in degrees) "speedDefault (x)" (number) "speedMax (x)" (number) "ceilingHeight (x)" (number, in meters, ASL) "atl (x)" (on/off) "surfaceSpeed (x)" (on/off) The camCommand effect is immediate and does not need camCommit/camCommitPrepared.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value CamCommand(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.CamCommand(leftInstance, rightInstance));
            }

            /// <summary>
            /// Smoothly conduct the changes that were assigned to a camera within the given time. If the time is set to zero, the changes are done immediately. For camPrepareXXX commands use camCommitPrepared.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value CamCommit(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.CamCommit(leftInstance, rightInstance));
            }

            /// <summary>
            /// Smoothly conducts the changes that were assigned to a camera within the given time. If the time is set to zero, the changes are done immediately. This command is for use with camPrepareXXX commands. For the normal cam command use camCommit.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value CamCommitPrepared(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.CamCommitPrepared(leftInstance, rightInstance));
            }

            /// <summary>
            /// Checks if the conduction of the last camCommit call already finished.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value bool</returns>
            public static Value CamCommitted(Value rightInstance)
            {
                return new Value(GameValueMethods.CamCommitted(rightInstance));
            }

            /// <summary>
            /// Sets construction camera parameters. To work with "camconstruct" object. ⚠Beware: camConstuctionSetParamssic.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value CamConstuctionSetParams(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.CamConstuctionSetParams(leftInstance, rightInstance));
            }

            /// <summary>
            /// Create a camera or a seagull object on the given position. The creation happens immediately and doesn't wait for camCommit. Among other commands, cameraEffect must be used to enter the camera's view and camDestroy to delete the created camera. See also Camera Control.⚠ Other objects can be created this way, but vehicles created with camCreate cannot be entered Any unit created with camCreate will remain static Unlike createVehicle, objects are created exactly at the given position, without consideration of the surrounding objects
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value object</returns>
            public static Value CamCreate(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.CamCreate(leftInstance, rightInstance));
            }

            /// <summary>
            /// Destroys camera object created with camCreate. This command doesn't need camCommit.  ⚠Destroying camera object does not terminate camera effect automatically, use cameraEffect prior to deleting the camera (see Example 2)
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value CamDestroy(Value rightInstance)
            {
                return new Value(GameValueMethods.CamDestroy(rightInstance));
            }

            /// <summary>
            /// Sets the given effect on the given camera. If you want to switch the screen directly to the first-person, aiming, third-person or group view of an object, use switchCamera instead. The effect type "Terminate" is used to exit the current camera view and switch back to the player's view. Does not need camCommit. Since 1.74, it is possible to terminate individual r2t source. For example: cam cameraEffect ["terminate", "back", "rtt1"]; // would terminate "rtt1" r2t source cam cameraEffect ["terminate", "back"]; // would terminate all r2t sources ⚠One cannot mix and match cameraEffect and can either have multiple r2t cameras or a single camera for the whole screen. If one needs a background stream overlayed with r2t streams, this could be achieved by creating an object and using switchCamera to switch to it for background image, while using cameraEffect for r2t overlay (see Example 4).
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value CameraEffect(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.CameraEffect(leftInstance, rightInstance));
            }

            /// <summary>
            /// Enable / disable showing of in-game UI during currently active camera effect. By default the HUD is off, which will make results of drawIcon3D invisible, for example.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value CameraEffectEnableHUD(Value rightInstance)
            {
                return new Value(GameValueMethods.CameraEffectEnableHUD(rightInstance));
            }

            /// <summary>
            /// Return camera interest for given entity, as set by setCameraInterest, or as autodetected.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value scalar</returns>
            public static Value CameraInterest(Value rightInstance)
            {
                return new Value(GameValueMethods.CameraInterest(rightInstance));
            }

            /// <summary>
            /// Returns the vehicle to which the camera is attached.
            /// </summary>
            /// <returns>Value object</returns>
            public static Value CameraOn()
            {
                return new Value(GameValueMethods.CameraOn());
            }

            /// <summary>
            /// Returns mode of active camera view. Mode is one of:  "INTERNAL" (1st person) "EXTERNAL" (3rd person) "GUNNER" (optics / sights) "GROUP" (commander view)
            /// </summary>
            /// <returns>Value string</returns>
            public static Value CameraView()
            {
                return new Value(GameValueMethods.CameraView());
            }

            /// <summary>
            /// Returns root of campaign description.ext entries hierarchy.
            /// </summary>
            /// <returns>Value config</returns>
            public static Value CampaignConfigFile()
            {
                return new Value(GameValueMethods.CampaignConfigFile());
            }

            /// <summary>
            /// Preloads the scene for the prepared camera with given timeout after which preloading is aborted. Max timeout is 30 seconds. Timeout of 0 means max timeout of 30 seconds as well. This command will read prepared params set with camPrepareFOV, camPreparePos and camPrepareTarget, so no camCommitPrepared is necessary. If camPrepareFOV is not set, the default value is 1. If camPrepareTarget (for direction) and camPreparePos (for position) are not set, current direction and position of the camera are used. The prepared camera preload will preload main camera as well. cameraEffect is not necessary
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value CamPreload(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.CamPreload(leftInstance, rightInstance));
            }

            /// <summary>
            /// Checks whether the camera has finished preloading.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value bool</returns>
            public static Value CamPreloaded(Value rightInstance)
            {
                return new Value(GameValueMethods.CamPreloaded(rightInstance));
            }

            /// <summary>
            /// Prepares the camera bank angle. ⚠This command is non-functional!
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value CamPrepareBank(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.CamPrepareBank(leftInstance, rightInstance));
            }

            /// <summary>
            /// Prepares the camera heading.  ⚠This command is non-functional!
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value CamPrepareDir(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.CamPrepareDir(leftInstance, rightInstance));
            }

            /// <summary>
            /// Prepares the camera dive angle.  ⚠This command is non-functional!
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value CamPrepareDive(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.CamPrepareDive(leftInstance, rightInstance));
            }

            /// <summary>
            /// focusRange is . Prepares the camera focus blur. [-1,1] will reset default values (auto focusing), [-1,-1] will disable postprocessing (all is focused). Needs the call of camCommitPrepared to be conducted.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value CamPrepareFocus(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.CamPrepareFocus(leftInstance, rightInstance));
            }

            /// <summary>
            /// Prepares the camera field of view (zoom). The default zoom level is 0.75, 0.01 is the nearest and 2 the furthest zoom value. The angle of the field of view is atan(FOV)*2 radians when in 4:3 aspect ratio. Needs the call of camCommitPrepared to be conducted.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value CamPrepareFov(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.CamPrepareFov(leftInstance, rightInstance));
            }

            /// <summary>
            /// Prepares the camera field of view range for auto zooming. ⚠This command is non-functional!
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value CamPrepareFovRange(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.CamPrepareFovRange(leftInstance, rightInstance));
            }

            /// <summary>
            /// Prepares the camera position. Needs the call of camCommitPrepared to be conducted.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value CamPreparePos(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.CamPreparePos(leftInstance, rightInstance));
            }

            /// <summary>
            /// Prepares the camera position relative to the current position of the currect target (see camPrepareTarget). Needs the call of camCommitPrepared to be conducted.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value CamPrepareRelPos(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.CamPrepareRelPos(leftInstance, rightInstance));
            }

            /// <summary>
            /// Prepares the camera target to a position or to a target. Needs the call of camCommitPrepared to be conducted.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value CamPrepareTarget(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.CamPrepareTarget(leftInstance, rightInstance));
            }

            /// <summary>
            /// Sets camera bank angle. Does not commit changes. ⚠This command is non-functional!
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value CamSetBank(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.CamSetBank(leftInstance, rightInstance));
            }

            /// <summary>
            /// Sets the orientation of the given camera in the direction of the given vector. Needs camCommit.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value CamSetDir(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.CamSetDir(leftInstance, rightInstance));
            }

            /// <summary>
            /// Sets camera dive angle. Does not commit changes.  ⚠This command is non-functional!
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value CamSetDive(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.CamSetDive(leftInstance, rightInstance));
            }

            /// <summary>
            /// Sets camera focus range in format [distance, blur]. blur param - sets the camera focus blur. It does not automatically commit changes (see camCommit). Use [-1, -1] to disable focus completely.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value CamSetFocus(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.CamSetFocus(leftInstance, rightInstance));
            }

            /// <summary>
            /// Set the zoom level (Field Of View) of the given camera. The zoom level is from 0.01 for the nearest and 8.5 for the furthest zoom value, with a default zoom level of 0.75 The angle of the field of view is atan(FOV)*2 radians when in 4:3 aspect ratio. Needs the call of camCommit to be conducted.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value CamSetFov(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.CamSetFov(leftInstance, rightInstance));
            }

            /// <summary>
            /// Set the zoom level (Field Of View) start and end values for automatical zooming.  The default zoom level is 0.7 where 0 is the nearest and 1 is the most far zoom value.  ⚠This command is non-functional!
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value CamSetFovRange(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.CamSetFovRange(leftInstance, rightInstance));
            }

            /// <summary>
            /// Sets the position of the given camera or seagull (see camCreate). It is worth mentioning that camera position can also be set with setPos, in which case it would be instant. With camSetPos it is possible to make smooth position transition in time, defined with camCommit, which is required in this case.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value CamSetPos(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.CamSetPos(leftInstance, rightInstance));
            }

            /// <summary>
            /// Sets the position of the given camera relative to its target, set with camSetTarget. Needs a call to camCommit to be conducted.⚠Since it sets relative position to the target, the camSetTarget command should be executed already, before camSetRelPos.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value CamSetRelPos(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.CamSetRelPos(leftInstance, rightInstance));
            }

            /// <summary>
            /// Set the target object or position where the given camera should point at. Needs the call of camCommit to be conducted. To reset the target use objNull.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value CamSetTarget(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.CamSetTarget(leftInstance, rightInstance));
            }

            /// <summary>
            /// Returns camera's target.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value object</returns>
            public static Value CamTarget(Value rightInstance)
            {
                return new Value(GameValueMethods.CamTarget(rightInstance));
            }

            /// <summary>
            /// Set / clear using of night vision during cutscenes. This command only works with camCreate created camera that is currently the main camera for the player (see example).
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value CamUseNVG(Value rightInstance)
            {
                return new Value(GameValueMethods.CamUseNVG(rightInstance));
            }

            /// <summary>
            /// Checks if given object can be stored in inventory of given object or any inventory container (uniform, vest, backpack) of given unit. Since Arma 3 v2.09 this command will count unit storage space as whole, instead of as biggest container, when multiple items are queried.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value bool</returns>
            public static Value CanAdd(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.CanAdd(leftInstance, rightInstance));
            }

            /// <summary>
            /// Checks if given object can be stored into soldier's backpack.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value bool</returns>
            public static Value CanAddItemToBackpack(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.CanAddItemToBackpack(leftInstance, rightInstance));
            }

            /// <summary>
            /// Checks if given object can be stored into soldier's uniform.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value bool</returns>
            public static Value CanAddItemToUniform(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.CanAddItemToUniform(leftInstance, rightInstance));
            }

            /// <summary>
            /// Checks if given object can be stored into soldier's vest.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value bool</returns>
            public static Value CanAddItemToVest(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.CanAddItemToVest(leftInstance, rightInstance));
            }

            /// <summary>
            /// Cancels a simple task destination.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value CancelSimpleTaskDestination(Value rightInstance)
            {
                return new Value(GameValueMethods.CancelSimpleTaskDestination(rightInstance));
            }

            /// <summary>
            /// Returns true if a unit's weapon can be deployed.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value bool</returns>
            public static Value CanDeployWeapon(Value rightInstance)
            {
                return new Value(GameValueMethods.CanDeployWeapon(rightInstance));
            }

            /// <summary>
            /// Returns true if the given vehicle is still able to fire. For the command to return true, vehicle must be alive, have weapon operator and the weapon cannot be damaged ≥ 0.9 but can be empty due to running out of ammo. If mission starts with vehicle having no ammo or setVehicleAmmo 0 command is executed on the vehicle, then canFire will always report false for it.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value bool</returns>
            public static Value CanFire(Value rightInstance)
            {
                return new Value(GameValueMethods.CanFire(rightInstance));
            }

            /// <summary>
            /// Returns if the given vehicle is still able to move. This command does not check for the amount of fuel the vehicle has, except for helicopters and airplanes. A helicopter with a damaged tail rotor may return that it cannot move, where a skilled pilot could use it.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value bool</returns>
            public static Value CanMove(Value rightInstance)
            {
                return new Value(GameValueMethods.CanMove(rightInstance));
            }

            /// <summary>
            /// Returns true if setSlingLoad is possible.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value bool</returns>
            public static Value CanSlingLoad(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.CanSlingLoad(leftInstance, rightInstance));
            }

            /// <summary>
            /// Returns if the given soldier is able to stand up. It only checks for the unit's legs and not its alive/dead status - it can return true for a dead unit. Since Arma 3 v1.60 and the introduction of limping, this command always returns true for humans.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value bool</returns>
            public static Value CanStand(Value rightInstance)
            {
                return new Value(GameValueMethods.CanStand(rightInstance));
            }

            /// <summary>
            /// Returns true if sleep, uiSleep or waitUntil commands can be used in current scope. Usually when suspension is not allowed but used, for example when code is executed in unscheduled environment, the script engine would ignore any suspension command and throw error: "Suspending not allowed in this context". Using canSuspend command allows to detect the correct environment for the code. The definition of scheduled and unscheduled environment is not the same as whether or not the script execution can or cannot be suspended. For example while .sqs and .fsm scripts are scheduled (i.e. added to the scheduler: diag_activeSQSScripts, diag_activeMissionFSMs), they cannot use sleep or be suspended like execVM or spawn scripts can, therefore canSuspend for these types of scripts will return false.
            /// </summary>
            /// <returns>Value bool</returns>
            public static Value CanSuspend()
            {
                return new Value(GameValueMethods.CanSuspend());
            }

            /// <summary>
            /// A getter for triggerDynamicSimulation
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value bool</returns>
            public static Value CanTriggerDynamicSimulation(Value rightInstance)
            {
                return new Value(GameValueMethods.CanTriggerDynamicSimulation(rightInstance));
            }

            /// <summary>
            /// Returns config value of `unloadInCombat` for a vehicle. Alternatively see getUnloadInCombat
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value bool</returns>
            public static Value CanUnloadInCombat(Value rightInstance)
            {
                return new Value(GameValueMethods.CanUnloadInCombat(rightInstance));
            }

            /// <summary>
            /// Returns bool array if it is possible to load cargo inside vehicle and if possible to load cargo into empty vehicle
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value CanVehicleCargo(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.CanVehicleCargo(leftInstance, rightInstance));
            }

            /// <summary>
            /// Returns the captive state of the given unit (set with setCaptive). A captive unit will not be attacked by its enemies. ⚠While a captive unit won't be attacked, it will still attack its enemies – be sure to setBehaviour "CARELESS" / removeAllWeapons accordingly.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value bool</returns>
            public static Value Captive(Value rightInstance)
            {
                return new Value(GameValueMethods.Captive(rightInstance));
            }

            /// <summary>
            /// Checks whether the unit is a captive. If the unit is a vehicle, its commander is checked instead. If a unit's captivity level was set as a Boolean, then the returned number is either 0 (for false) or 1 (for true).
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value scalar</returns>
            public static Value CaptiveNum(Value rightInstance)
            {
                return new Value(GameValueMethods.CaptiveNum(rightInstance));
            }

            /// <summary>
            /// This command is used inside a switch construct. Although the syntax below states that this operator takes only one argument, that is most likely not true. It seems like it needs two arguments of which the left one is some sort of hidden variable that gets defined inside a switch construct. That is the reason why this operator can not be used outside a switch construct. (see https://foxhound.international/arma-3-sqf-grammar.html for further explaination) Also note that it is not possible to store the returned Switch Type in a variable and use that variable in another switch construct. It will never lead to an execution of the corresponding code block.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value switch</returns>
            public static Value Case(Value rightInstance)
            {
                return new Value(GameValueMethods.Case(rightInstance));
            }

            /// <summary>
            /// Processes code when an exception is thrown in a try block. The exception caught can be found in the _exception variable.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value any</returns>
            public static Value Catch(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.Catch(leftInstance, rightInstance));
            }

            /// <summary>
            /// Returns the current state of a CT_CHECKBOX control.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value bool</returns>
            public static Value CbChecked(Value rightInstance)
            {
                return new Value(GameValueMethods.CbChecked(rightInstance));
            }

            /// <summary>
            /// Sets the current state of a CT_CHECKBOX control. Use "CheckedChanged" control event handler with it.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value CbSetChecked(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.CbSetChecked(leftInstance, rightInstance));
            }

            /// <summary>
            /// The ceil value of x.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value scalar_nan</returns>
            public static Value Ceil(Value rightInstance)
            {
                return new Value(GameValueMethods.Ceil(rightInstance));
            }

            /// <summary>
            /// Returns Array of Booleans in format [enabledChat, enabledVoN] for the given channel. For more information about enabling/disabling of chat channels see enableChannel. channel ID number correspondence Global Side Command Group Vehicle Direct Custom1 Custom2 Custom3 Custom4 Custom5 Custom6 Custom7 Custom8 Custom9 Custom10 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value ChannelEnabled(Value rightInstance)
            {
                return new Value(GameValueMethods.ChannelEnabled(rightInstance));
            }

            /// <summary>
            /// Checks whether cheats are enabled (whether the designers' version is running).
            /// </summary>
            /// <returns>Value bool</returns>
            public static Value CheatsEnabled()
            {
                return new Value(GameValueMethods.CheatsEnabled());
            }

            /// <summary>
            /// Checks if the given AI feature is currently enabled.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value bool</returns>
            public static Value CheckAIFeature(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.CheckAIFeature(leftInstance, rightInstance));
            }

            /// <summary>
            /// Affected by Not affected by terrain grid obstacles particles(with blockAIVisibility = 1) daylight distance overcast fog Checks if one position is visible from another position and how much. Particles that have blockAIVisibility set to 1 will influence the result, but will never make checkVisibility return 0; an extremely small number will be returned instead.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value scalar</returns>
            public static Value CheckVisibility(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.CheckVisibility(leftInstance, rightInstance));
            }

            /// <summary>
            /// Pre-defined variable for the civilian side. When used in a format statement (hint format["/// </summary>",civilian]), the string returned is "CIV".
            /// <returns>Value side</returns>
            public static Value Civilian()
            {
                return new Value(GameValueMethods.Civilian());
            }

            /// <summary>
            /// Returns short name of location. For config class name, see configName
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value string</returns>
            public static Value ClassName(Value rightInstance)
            {
                return new Value(GameValueMethods.ClassName(rightInstance));
            }

            /// <summary>
            /// Clears the value of the given entity's attribute in Eden Editor. An attribute is identified by its property (data when it is engine-drive attribute) value in config. For the list of all attributes with their properties, see Setting Attributes. ⚠Attributes are available only within the Eden Editor workspace. You cannot access them in scenario preview or exported scenario!
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value Clear3DENAttribute(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.Clear3DENAttribute(leftInstance, rightInstance));
            }

            /// <summary>
            /// Deletes inventory from mission.sqm of given units. Effect is not immediately visible, only when previewing the inventory resets to default.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value Clear3DENInventory(Value rightInstance)
            {
                return new Value(GameValueMethods.Clear3DENInventory(rightInstance));
            }

            /// <summary>
            /// Removes all items from backpack of a unit.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value ClearAllItemsFromBackpack(Value rightInstance)
            {
                return new Value(GameValueMethods.ClearAllItemsFromBackpack(rightInstance));
            }

            /// <summary>
            /// Removes all backpacks from ammo box (or any general weapon holder container).
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value ClearBackpackCargo(Value rightInstance)
            {
                return new Value(GameValueMethods.ClearBackpackCargo(rightInstance));
            }

            /// <summary>
            /// Removes all backpacks from the vehicle cargo space. MP synchronized.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value ClearBackpackCargoGlobal(Value rightInstance)
            {
                return new Value(GameValueMethods.ClearBackpackCargoGlobal(rightInstance));
            }

            /// <summary>
            /// Removes all force generators from world. For this command to have any effect, the Advanced Flight Model (AFM) has to be enabled. AFM status can be checked with difficultyEnabledRTD.
            /// </summary>
            /// <returns>Value nothing</returns>
            public static Value ClearForcesRTD()
            {
                return new Value(GameValueMethods.ClearForcesRTD());
            }

            /// <summary>
            /// Removes all icons from group.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value ClearGroupIcons(Value rightInstance)
            {
                return new Value(GameValueMethods.ClearGroupIcons(rightInstance));
            }

            /// <summary>
            /// Removes all items from ammo box (or any general weapon holder container).
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value ClearItemCargo(Value rightInstance)
            {
                return new Value(GameValueMethods.ClearItemCargo(rightInstance));
            }

            /// <summary>
            /// Removes all items from ammo box (or any general weapon holder container). It also removes vests and uniforms.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value ClearItemCargoGlobal(Value rightInstance)
            {
                return new Value(GameValueMethods.ClearItemCargoGlobal(rightInstance));
            }

            /// <summary>
            /// Removes all items from ammo box (or any general weapon holder container)
            /// </summary>
            /// <returns>Value nothing</returns>
            public static Value ClearItemPool()
            {
                return new Value(GameValueMethods.ClearItemPool());
            }

            /// <summary>
            /// Remove all magazines from the given vehicle's magazine cargo space.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value ClearMagazineCargo(Value rightInstance)
            {
                return new Value(GameValueMethods.ClearMagazineCargo(rightInstance));
            }

            /// <summary>
            /// Removes all magazines from the vehicle cargo space. MP synchronized.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value ClearMagazineCargoGlobal(Value rightInstance)
            {
                return new Value(GameValueMethods.ClearMagazineCargoGlobal(rightInstance));
            }

            /// <summary>
            /// Removes all magazines from the magazine pool, of which the player may choose in the following missions. Available in campaigns only.
            /// </summary>
            /// <returns>Value nothing</returns>
            public static Value ClearMagazinePool()
            {
                return new Value(GameValueMethods.ClearMagazinePool());
            }

            /// <summary>
            /// Clear the current overlay. Some Old Editor Command
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value ClearOverlay(Value rightInstance)
            {
                return new Value(GameValueMethods.ClearOverlay(rightInstance));
            }

            /// <summary>
            /// Clean up the content of radio protocol history.
            /// </summary>
            /// <returns>Value nothing</returns>
            public static Value ClearRadio()
            {
                return new Value(GameValueMethods.ClearRadio());
            }

            /// <summary>
            /// Remove all weapons from the given vehicle's weapon cargo space.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value ClearWeaponCargo(Value rightInstance)
            {
                return new Value(GameValueMethods.ClearWeaponCargo(rightInstance));
            }

            /// <summary>
            /// Removes all weapons from the vehicle cargo space. MP synchronized.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value ClearWeaponCargoGlobal(Value rightInstance)
            {
                return new Value(GameValueMethods.ClearWeaponCargoGlobal(rightInstance));
            }

            /// <summary>
            /// Remove all weapons from the weapon pool, of which the player may choose in the following missions. Available in campaigns only.
            /// </summary>
            /// <returns>Value nothing</returns>
            public static Value ClearWeaponPool()
            {
                return new Value(GameValueMethods.ClearWeaponPool());
            }

            /// <summary>
            /// Returns the  machine network ID of the client executing the command.
            /// </summary>
            /// <returns>Value scalar</returns>
            public static Value ClientOwner()
            {
                return new Value(GameValueMethods.ClientOwner());
            }

            /// <summary>
            /// Close the currently active user dialog with exit code. Most common exit codes are: #define IDC_OK 1 // emulate "Ok" button #define IDC_CANCEL 2 // emulate "Cancel" button
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value CloseDialog(Value rightInstance)
            {
                return new Value(GameValueMethods.CloseDialog(rightInstance));
            }

            /// <summary>
            /// Closes given display with exit code. It does not instantly close the display but does it on next simulation cycle. Most common exit codes are: #define IDC_OK		1 // emulate "OK" button #define IDC_CANCEL	2 // emulate "Cancel" button ⚠Sometimes when one display is opened on top of another display the previous display may not close properly; some display EHs such as "onUnload" may never fire. Use this command to manually handle such displays.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value CloseDisplay(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.CloseDisplay(leftInstance, rightInstance));
            }

            /// <summary>
            /// Closes the current overlay without committing.  Some Old Editor Command
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value CloseOverlay(Value rightInstance)
            {
                return new Value(GameValueMethods.CloseOverlay(rightInstance));
            }

            /// <summary>
            /// Collapse the object tree. Some Old Editor Command
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value CollapseObjectTree(Value rightInstance)
            {
                return new Value(GameValueMethods.CollapseObjectTree(rightInstance));
            }

            /// <summary>
            /// Execute a block of code in which all Eden Editor operations will be recorded as one history step. For example creating an entity, setting its attributes and then connections would normally be recorded as three different steps. Calling them all within single collect3DENHistory block will group them together and the user will need to undo only once to revert the changes. In order to only change the 2nd or 3rd parameter of the alternative syntax use nil as the preceding parameters. Some useful icons are: Show texture paths "\a3\3den\data\cfg3den\history\addtolayer_ca.paa" "\a3\3den\data\cfg3den\history\changeattributes_ca.paa" "\a3\3den\data\cfg3den\history\changeseat_ca.paa" "\a3\3den\data\cfg3den\history\connectitems_ca.paa" "\a3\3den\data\cfg3den\history\create_ca.paa" "\a3\3den\data\cfg3den\history\createcomment_ca.paa" "\a3\3den\data\cfg3den\history\deleteitems_ca.paa" "\a3\3den\data\cfg3den\history\disconnectitems_ca.paa" "\a3\3den\data\cfg3den\history\makenewlayer_ca.paa" "\a3\3den\data\cfg3den\history\missionnew_ca.paa" "\a3\3den\data\cfg3den\history\moveitems_ca.paa" "\a3\3den\data\cfg3den\history\multipleoperations_ca.paa" "\a3\3den\data\cfg3den\history\pasteitems_ca.paa" "\a3\3den\data\cfg3den\history\removefromlayer_ca.paa" "\a3\3den\data\cfg3den\history\rotateitems_ca.paa" "\a3\3den\data\cfg3den\history\scaleitems_ca.paa"
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value Collect3DENHistory(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.Collect3DENHistory(leftInstance, rightInstance));
            }

            /// <summary>
            /// Returns the current position of a helicopter's collective pitch control. 0: fully lowered 1: fully raised For this command to have any effect, the Advanced Flight Model (AFM) has to be enabled. AFM status can be checked with difficultyEnabledRTD.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value scalar</returns>
            public static Value CollectiveRTD(Value rightInstance)
            {
                return new Value(GameValueMethods.CollectiveRTD(rightInstance));
            }

            /// <summary>
            /// Returns the object, given object has collision disabled with and whether or not returned object has also collision disabled with given object.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value CollisionDisabledWith(Value rightInstance)
            {
                return new Value(GameValueMethods.CollisionDisabledWith(rightInstance));
            }

            /// <summary>
            /// Returns combat behaviour of unit or group. To set unit or group behaviour see setCombatBehaviour. The behaviour is one of:
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value string</returns>
            public static Value CombatBehaviour(Value rightInstance)
            {
                return new Value(GameValueMethods.CombatBehaviour(rightInstance));
            }

            /// <summary>
            /// Returns the combat mode of the given AI  group. See setCombatMode for more information about combat modes.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value string</returns>
            public static Value CombatMode(Value rightInstance)
            {
                return new Value(GameValueMethods.CombatMode(rightInstance));
            }

            /// <summary>
            /// Orders an artillery unit to fire a burst on the given position (via the radio).
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value CommandArtilleryFire(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.CommandArtilleryFire(leftInstance, rightInstance));
            }

            /// <summary>
            /// Types text to the command radio channel. The text will be visible only on the PC where command was executed. If you need the message to show on all computers, you have to execute it globally (see remoteExec) ⚠The unit must have an assigned radio item (such as "ItemRadio") to see or transmit the messages. A radio item must have the property simulation = "ItemRadio"; in its CfgWeapons config.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value CommandChat(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.CommandChat(leftInstance, rightInstance));
            }

            /// <summary>
            /// In Operation Flashpoint it returns the commander of a vehicle. Since Armed Assault it returns the primary observer. The commander of a vehicle can be found with effectiveCommander.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value object</returns>
            public static Value Commander(Value rightInstance)
            {
                return new Value(GameValueMethods.Commander(rightInstance));
            }

            /// <summary>
            /// Order the given unit to fire on the given target (via the radio). If the target is objNull, the unit is ordered to fire on its current target (set with doTarget or commandTarget).
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value CommandFire(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.CommandFire(leftInstance, rightInstance));
            }

            /// <summary>
            /// Order the given unit(s) to follow another from his own group (via radio). It can also be used to resume unit formation after e.g doStop.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value CommandFollow(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.CommandFollow(leftInstance, rightInstance));
            }

            /// <summary>
            /// Orders a unit to process command defined by FSM file (via the radio).
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value CommandFSM(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.CommandFSM(leftInstance, rightInstance));
            }

            /// <summary>
            /// Orders one or multiple units to get out from the vehicle (via the radio). Same as doGetOut with latter being silent.  Works for both AI and player entities AI unit gets back in - unless is under player command or combined with other sqf commands (orderGetIn false, allowGetIn false or leaveVehicle) Ignores vehicle's lock state - unlike action "Eject" and moveOut AI waits for execution until vehicle has stopped/is no longer flying (unclear if any timeout exists for order to be discarded) - unlike action "Eject" and moveOut Plays the vehicle's position's get out animation (same as action "Eject") - unlike moveOut When execute for multiple units, it waits till the action is completed, before the next to take his turn (same as action "Eject") - unlike moveOut AI gets back into formation afterwards Works only on alive units - unlike action "Eject" (one after another) or moveOut (instantly) Does not work on unconscious units - unless the AI is under player command. Unlike moveOut or action "Eject" (but one after another)
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value CommandGetOut(Value rightInstance)
            {
                return new Value(GameValueMethods.CommandGetOut(rightInstance));
            }

            /// <summary>
            /// Returns the name of the topmost commanding menu or "" if the menu is closed. For action menu visibility check see isActionMenuVisible. See Notes for Arma 2/Arma 3 structure.
            /// </summary>
            /// <returns>Value string</returns>
            public static Value CommandingMenu()
            {
                return new Value(GameValueMethods.CommandingMenu());
            }

            /// <summary>
            /// Order the given unit(s) to move to the given location (via the radio). Exactly the same as doMove, except this command displays a radio message. The command will not put a visible waypoint marker unlike when move command is given via commanding menu.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value CommandMove(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.CommandMove(leftInstance, rightInstance));
            }

            /// <summary>
            /// Sends the audio message to the command radio channel. The message is defined in CfgRadio in the description.ext file or config radio protocol. The transmission will play only on the PC where command was executed. If you need the transmission to play on all computers, you have to execute it globally (see remoteExec). ⚠The unit must have an assigned radio item (such as "ItemRadio") to see or transmit the messages. A radio item must have the property simulation = "ItemRadio"; in its CfgWeapons config. When transmitting unit gets killed, transmission will be interrupted. However when receiving unit gets killed, the transmission continues to play.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value CommandRadio(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.CommandRadio(leftInstance, rightInstance));
            }

            /// <summary>
            /// Order the given unit(s) to stop via radio. A stop command will never finish, the unit(s) will never be ready.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value CommandStop(Value rightInstance)
            {
                return new Value(GameValueMethods.CommandStop(rightInstance));
            }

            /// <summary>
            /// Orders the given unit or a group of units to suppress the given position or target (with radio messages, see doSuppressiveFire if you don't want messages).  When an Array of units is passed as param, only units from the same Group as the first unit in array are considered. The unit (units) starts firing at the given target or position random amount of shots (exact formula unknown, but seems to depend on amount of ammo unit has) after which it stops. currentCommand shows "Suppress" and there is no way of stopping unit before it completes random amount of rounds. If position is passed as target param, it stays fixed. If object is passed as target param, it depends on what kind of object. If it is considered a proper target by the unit, it is tracked by the unit dynamically. If it is not, the position gets obtained via getPosWorld, which could be different from PositionASL of the object, and it is fixed even if the target is able to change position later.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value CommandSuppressiveFire(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.CommandSuppressiveFire(leftInstance, rightInstance));
            }

            /// <summary>
            /// Order the given unit(s) to target the given target (via the radio). Command given to the player, puts a red square with words Target and Distance on player's HUD at target location. If player in vehicle and has radar facilities, it also adds target marker to the radar.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value CommandTarget(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.CommandTarget(leftInstance, rightInstance));
            }

            /// <summary>
            /// Orders the unit(s) to watch the given position or target (via the radio). Use objNull as the target to order a unit to stop watching a position/target.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value CommandWatch(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.CommandWatch(leftInstance, rightInstance));
            }

            /// <summary>
            /// Defines a comment. See SQF Syntax - Comments to learn more about comments. ⚠This command is evaluated during execution, and as such is infinitely slower than other SQF comment methods (// comment or /* comment */) which get preprocessed and do not exist at runtime). See SQF Syntax for additional documentation on comments. This command is only used to place comments in unpreprocessed codes, such as trigger On Activation field, object init field, etc. Alternatively, one can use a plain string followed by a semicolon as a way to comment; e.g "Some comment";.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value Comment(Value rightInstance)
            {
                return new Value(GameValueMethods.Comment(rightInstance));
            }

            /// <summary>
            /// Commit the current overlay.  Some Old Editor Command
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value CommitOverlay(Value rightInstance)
            {
                return new Value(GameValueMethods.CommitOverlay(rightInstance));
            }

            /// <summary>
            /// Returns all items (attachments) that can be mounted on the given weapon.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value CompatibleItems(Value rightInstance)
            {
                return new Value(GameValueMethods.CompatibleItems(rightInstance));
            }

            /// <summary>
            /// Returns all magazines that can be loaded in the given weapon.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value CompatibleMagazines(Value rightInstance)
            {
                return new Value(GameValueMethods.CompatibleMagazines(rightInstance));
            }

            /// <summary>
            /// Compiles String expression into Code.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value code</returns>
            public static Value Compile(Value rightInstance)
            {
                return new Value(GameValueMethods.Compile(rightInstance));
            }

            /// <summary>
            /// Compiles an expression / takes an existing Array/HashMap and makes it final, preventing it from being modified or overwritten (by = assignation, publicVariable, set or any other command). This feature is only available in the retail version of Arma 3.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value code</returns>
            public static Value CompileFinal(Value rightInstance)
            {
                return new Value(GameValueMethods.CompileFinal(rightInstance));
            }

            /// <summary>
            /// This command is an alias for compile(Final) (prefixHeader + preprocessFileLineNumbers path). See description of preprocessFileLineNumbers for more details. In addition, this command can also compile SQF Bytecode files, which can reduce compilation time.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value code</returns>
            public static Value CompileScript(Value rightInstance)
            {
                return new Value(GameValueMethods.CompileScript(rightInstance));
            }

            /// <summary>
            /// Checks whether the given FSM is completed. The FSM handle is the number returned by the execFSM command.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value bool</returns>
            public static Value CompletedFSM(Value rightInstance)
            {
                return new Value(GameValueMethods.CompletedFSM(rightInstance));
            }

            /// <summary>
            /// Creates a Structured Text by joining the given  structured or  plain text arguments.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value text</returns>
            public static Value ComposeText(Value rightInstance)
            {
                return new Value(GameValueMethods.ComposeText(rightInstance));
            }

            /// <summary>
            /// Returns an array of config entries which meet criteria in condition code. Command iterates through all available config sub classes of the given config class. Current looked at config is stored in _x variable (similar to alternative count command implementation). Condition has to return true in order for the looked at config to be added to the resulting array. Slightly faster than configProperties, but doesn't account for config properties or inherited entries. ⚠ The condition code passed to configClasses should only be used for simple filter expressions and nothing more Do not use "isClass _x" in the condition. The engine does this check already Arma 3 v2.02 brought specific engine optimisations for the following conditions: "true" "getNumber (_x >> 'scope') > 0"
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value ConfigClasses(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.ConfigClasses(leftInstance, rightInstance));
            }

            /// <summary>
            /// Return root of config entries hierarchy.
            /// </summary>
            /// <returns>Value config</returns>
            public static Value ConfigFile()
            {
                return new Value(GameValueMethods.ConfigFile());
            }

            /// <summary>
            /// Returns hierarchy of the given config class. Just like with inheritsFrom, only complete config classes are supported (before 2.14).
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value ConfigHierarchy(Value rightInstance)
            {
                return new Value(GameValueMethods.ConfigHierarchy(rightInstance));
            }

            /// <summary>
            /// Returns name of config entry.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value string</returns>
            public static Value ConfigName(Value rightInstance)
            {
                return new Value(GameValueMethods.ConfigName(rightInstance));
            }

            /// <summary>
            /// A non-existing Config. ⚠Unlike other null values (objNull, grpNull, etc), configNull returns true when compared to itself. configNull == configNull;							// returns true isNull configNull;									// returns true configNull isEqualTo configNull;					// returns true configNull == configFile >> "ANonExistentEntry";	// returns true
            /// </summary>
            /// <returns>Value config</returns>
            public static Value ConfigNull()
            {
                return new Value(GameValueMethods.ConfigNull());
            }

            /// <summary>
            /// Returns config path of the provided object.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value config</returns>
            public static Value ConfigOf(Value rightInstance)
            {
                return new Value(GameValueMethods.ConfigOf(rightInstance));
            }

            /// <summary>
            /// Returns an array of config entries which meet criteria in condition code. Command iterates through available classes and config properties for given config entry. If 3rd param is true the search also includes inherited properties. Current looked at config is stored in _x variable (similar to alternative count command implementation). Condition has to return true in order for the looked at property to be added to the resulting array. A bit slower than configClasses but allows to access inherited entries. ⚠The condition code passed to configProperties should only be used for simple filter expressions and nothing more. Since 2.02 the following conditions are optimised for performance: "true" (omitted condition) "isClass _x" "isClass _x && (...)"
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value ConfigProperties(Value rightInstance)
            {
                return new Value(GameValueMethods.ConfigProperties(rightInstance));
            }

            /// <summary>
            /// Returns an array of addons (CfgPatches) in which the given config class is defined.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value ConfigSourceAddonList(Value rightInstance)
            {
                return new Value(GameValueMethods.ConfigSourceAddonList(rightInstance));
            }

            /// <summary>
            /// Returns modDir of the mod that given config class was loaded from.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value string</returns>
            public static Value ConfigSourceMod(Value rightInstance)
            {
                return new Value(GameValueMethods.ConfigSourceMod(rightInstance));
            }

            /// <summary>
            /// Returns an array of mods (CfgMods) in which the given config class is defined.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value ConfigSourceModList(Value rightInstance)
            {
                return new Value(GameValueMethods.ConfigSourceModList(rightInstance));
            }

            /// <summary>
            /// Sets for which Side the entity becomes a "confirmed hostile" target - a target that becomes highlighted red on the sensors display.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value ConfirmSensorTarget(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.ConfirmSensorTarget(leftInstance, rightInstance));
            }

            /// <summary>
            /// Connect person with UAV terminal to UAV unit. UAV Terminal item needs to be assigned to GPS slot. If UAV is already connected to another terminal, this new connection will fail.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value bool</returns>
            public static Value ConnectTerminalToUAV(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.ConnectTerminalToUAV(leftInstance, rightInstance));
            }

            /// <summary>
            /// Connects the client to the provided server. only works on the Main Menu. must be executed from  UI context, such as onButtonDown or similar events (see User Interface Event Handlers).
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value ConnectToServer(Value rightInstance)
            {
                return new Value(GameValueMethods.ConnectToServer(rightInstance));
            }

            /// <summary>
            /// Skips current loop iteration and continues with the next one.
            /// </summary>
            /// <returns>Value nothing</returns>
            public static Value Continue()
            {
                return new Value(GameValueMethods.Continue());
            }

            /// <summary>
            /// Skips the current loop iteration, continues with the next one and returns the given value.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value any</returns>
            public static Value ContinueWith(Value rightInstance)
            {
                return new Value(GameValueMethods.ContinueWith(rightInstance));
            }

            /// <summary>
            /// A non-existing Control. To compare non-existent objects use isNull or isEqualTo (see examples).
            /// </summary>
            /// <returns>Value control</returns>
            public static Value ControlNull()
            {
                return new Value(GameValueMethods.ControlNull());
            }

            /// <summary>
            /// Returns a child control with specified idc from a controls group
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value control</returns>
            public static Value ControlsGroupCtrl(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.ControlsGroupCtrl(leftInstance, rightInstance));
            }

            /// <summary>
            /// A getter for disableConversation.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value bool</returns>
            public static Value ConversationDisabled(Value rightInstance)
            {
                return new Value(GameValueMethods.ConversationDisabled(rightInstance));
            }

            /// <summary>
            /// Return ANSI content of the (text) clipboard. If Unicode support is desired, see forceUnicode.
            /// </summary>
            /// <returns>Value string</returns>
            public static Value CopyFromClipboard()
            {
                return new Value(GameValueMethods.CopyFromClipboard());
            }

            /// <summary>
            /// Copies ANSI text string to the clipboard. If Unicode support is desired, see forceUnicode.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value CopyToClipboard(Value rightInstance)
            {
                return new Value(GameValueMethods.CopyToClipboard(rightInstance));
            }

            /// <summary>
            /// Copy the chain of waypoints from source to target group. The target group will start to process waypoints from the first one.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value CopyWaypoints(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.CopyWaypoints(leftInstance, rightInstance));
            }

            /// <summary>
            /// Cosine of a number, argument in degrees.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value scalar_nan</returns>
            public static Value Cos(Value rightInstance)
            {
                return new Value(GameValueMethods.Cos(rightInstance));
            }

            /// <summary>
            /// Can be used to count: The number of elements in an array (returns the already internally known array size) The number of elements in an array matching the condition The number of sub-entries in a config entry 1.28 The number of characters in an ANSI string If Unicode support is desired, see forceUnicode.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value scalar</returns>
            public static Value Count(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.Count(leftInstance, rightInstance));
            }

            /// <summary>
            /// Count how many units in the array are considered enemy to the given unit.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value scalar</returns>
            public static Value CountEnemy(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.CountEnemy(leftInstance, rightInstance));
            }

            /// <summary>
            /// Count how many units in the array are considered friendly to the given unit.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value scalar</returns>
            public static Value CountFriendly(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.CountFriendly(leftInstance, rightInstance));
            }

            /// <summary>
            /// Returns how many units in the given array belong to given side.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value scalar</returns>
            public static Value CountSide(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.CountSide(leftInstance, rightInstance));
            }

            /// <summary>
            /// Count how many objects in the array are of given type. This command also works with parent classes like "Air", "Tank", and "Car". For a full class reference see Classes.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value scalar</returns>
            public static Value CountType(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.CountType(leftInstance, rightInstance));
            }

            /// <summary>
            /// Count how many units in the array are unknown to the given unit.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value scalar</returns>
            public static Value CountUnknown(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.CountUnknown(leftInstance, rightInstance));
            }

            /// <summary>
            /// Create new Composition. To create individual entities, use create3DENEntity.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value Create3DENComposition(Value rightInstance)
            {
                return new Value(GameValueMethods.Create3DENComposition(rightInstance));
            }

            /// <summary>
            /// Create new Eden Entity. Used for creating individual entities; to create a composition (e.g., infantry squad), use create3DENComposition and to create a layer use add3DENLayer. This is the only way to add new editable entities to an Eden Editor scenario. Other 'create' commands like createVehicle or createUnit will still work, but the resulting entity will not be editable.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value any</returns>
            public static Value Create3DENEntity(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.Create3DENEntity(leftInstance, rightInstance));
            }

            /// <summary>
            /// Creates an agent of the given type. An agent does not have a group or leader or the standard soldier FSM associated with it - for instance, an enemy soldier spawned as an agent has limited AI and will do nothing when fired upon - which can be useful to limit the amount of AI processing being done in a mission with very large numbers of "AI". Animals are also commonly created as agents. Players assigned to an agent using selectPlayer will be able to control the agent, operate weapons and other actions, but will not be able to access their inventory using the gear screen. To create objects of type "Logic", use createUnit.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value object</returns>
            public static Value CreateAgent(Value rightInstance)
            {
                return new Value(GameValueMethods.CreateAgent(rightInstance));
            }

            /// <summary>
            /// Instanciate a Side center. A Side center is required to be able to create groups of this side. Centers can only be created for east, west, resistance, civilian and sideLogic sides. Created sides must have their "side-friendship" defined with setFriend. In Armed Assault and Arma 2, only Mission.sqm's units side centers are created; e.g if no resistance unit has been placed in the editor you must use createCenter before being able to create a resistance group. In Arma 3, centers for all sides are all created by the engine.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value side</returns>
            public static Value CreateCenter(Value rightInstance)
            {
                return new Value(GameValueMethods.CreateCenter(rightInstance));
            }

            /// <summary>
            /// Creates a dialog which is defined either in the mission's description.ext, in the campaign's description.ext or in the global resource.cpp. The given name has to be the class name used in one of these files. If another dialog is already opened, the desired dialog is created as a child dialog of the one already opened. By default, displays created with createDisplay are rendered on top of dialogs created with createDialog. If forceOnTop is set to true, the dialog will be rendered on top of displays.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value display</returns>
            public static Value CreateDialog(Value rightInstance)
            {
                return new Value(GameValueMethods.CreateDialog(rightInstance));
            }

            /// <summary>
            /// Creates a link to the given diary entry.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value string</returns>
            public static Value CreateDiaryLink(Value rightInstance)
            {
                return new Value(GameValueMethods.CreateDiaryLink(rightInstance));
            }

            /// <summary>
            /// Creates a Diary entry. Supported tags and their parameters: Show text Tag Options Example img image: String - path to image. When present, any element with it will be displayed as image. width: Number - image width in pixels. height: Number - image height in pixels. 2.10 title: String - tooltip to show on mouse over image 2.10 src: String - alternative to 'image' Maximum width supported seems to be 370 pixels as a wider image will be cut off. Height should be calculated with the aspect ratio of the image. height = 370; ratio = 16/9; height = width / ratio; <img image="picture.paa" width="128" height="64" /> Since Arma 3 v2.10: <img src="picture.paa" width="128" height="64" title="this is an image" /> font color: String - HTML color in format #aarrggbb or #rrggbb size: Number - font height in pixels (default: 14) face: String - font type (see Fonts) <font color="#FF00FF" size="16" face="LucidaConsoleB">Hello there</font> br N/A Line 1<br />Line 2 marker name: String - marker name <marker name="respawn_west">Respawn point</marker> execute expression: String - executed code <execute expression="player setDamage 1">Die!</execute> executeClose expression: String - executed code, diary is closed afterwards <executeClose expression="player setDamage 1">Die and close</executeClose> log subject: String - subject name. record: String - record ID (e.g. "Record6" or "Unit1059524") <log subject="Hello">Get to the "Hello" subject</log> <log subject="Hello" record="Record0">Go to the first record added to "Hello"</log> gear unit: Number - unit ID <gear unit="123456">Open unit 123456's gear</gear> teamSwitch unit: Number - unit ID <teamSwitch unit="123456">Switch to unit 123456</teamSwitch> kick id: Number - unit ID <kick unit="123456">Kick player unit 123456</kick> ban id: Number - unit ID <ban unit="123456">ban player unit 123456</ban> mute id: Number - unit ID <mute unit="123456">mute player unit 123456</mute> voteadmin id: Number - unit ID <voteadmin unit="123456">vote admin unit 123456</voteadmin> votekick id: Number - unit ID <votekick unit="123456">vote kick player unit 123456</votekick> currentTask id: Number - task ID action: String - 'n' or 's' (select) <currentTask id="my_task">get to my_task task</currentTask> If the createDiaryRecord command fails, it returns a null record. Before Arma 3 v2.00, isNull did not work with the diary record type and diaryRecordNull did not exist. In order to verify a null record, it is possible to create a variable and compare against it: private _recordNull = objNull createDiaryRecord []; private _createdRecord = player createDiaryRecord ["Diary", ["Title", "Description"]]; if (_createdRecord isEqualTo _recordNull) then { hint "Failed"; };
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value diary_record</returns>
            public static Value CreateDiaryRecord(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.CreateDiaryRecord(leftInstance, rightInstance));
            }

            /// <summary>
            /// Creates a new subject in the Diary.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value scalar</returns>
            public static Value CreateDiarySubject(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.CreateDiarySubject(leftInstance, rightInstance));
            }

            /// <summary>
            /// Creates child display of given display and loads from "resourceName". The notable difference between createDisplay and createDialog is that with createDisplay the player would be able to move around while the display is shown. Displays created with createDisplay or createDialog will take control of the mouse pointer and will close when user presses Esc. Since Arma 3 v1.50 createDisplay returns Display and will first look in description.ext for resourceName config, if not found, it will then look in main config. If an overlay is needed instead, use cutRsc.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value display</returns>
            public static Value CreateDisplay(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.CreateDisplay(leftInstance, rightInstance));
            }

            /// <summary>
            /// Opens gear dialog for given unit. action command can also be used:player action ["Gear", player];
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value CreateGearDialog(Value rightInstance)
            {
                return new Value(GameValueMethods.CreateGearDialog(rightInstance));
            }

            /// <summary>
            /// Creates a new Group for the given Side. Using this command if the group limit is reached will return grpNull. The new Group exists globally, but it's locality is where this command was executed. Game 1.00 1.00 1.00 1.00 1.50 1.00 1.00 1.68 Group auto-deletion Group limit per side 63 144 288 ⚠ Groups can only be created for the west/blufor, opfor/east, independent/resistance, civilian and sideLogic sides - any other side will return grpNull Before Arma 3, a Side center must exist before group creation (either by having editor-placed units or createCenter usage) createCenter usage is not needed anymore as all centers are automatically created. When the last unit leaves its group, the group usually gets immediately auto-deleted, regardless of its auto-deletion setting.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value group</returns>
            public static Value CreateGroup(Value rightInstance)
            {
                return new Value(GameValueMethods.CreateGroup(rightInstance));
            }

            /// <summary>
            /// Adds a point guarded by the given side (scripted way of adding equivalent of "GUARDED BY" trigger in Editor). A closest AI group in the given side with assigned "GUARD" waypoint will attempt to secure this guard point. The actual guarded position is determined via the following rules: Given "position" is always considered. It could be Object, Group, Position2D or Position3D. In every case, z coordinate will be ignored and point will be placed on nearest surface. If "objectMapID" is not negative, the position of the object with the given ID is used (Overrides "position"). -1 to ignore this argument. z of the object position will be intact. If the given "vehicle" is valid, the position of the vehicle is extracted and guarded (Overrides both "position" and "objectMapID"). objNull to ignore. z of the vehicle position will be intact. To be used with "GUARD" waypoint. To know how does the "GUARD" waypoint work, see Waypoint:Guard.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value CreateGuardedPoint(Value rightInstance)
            {
                return new Value(GameValueMethods.CreateGuardedPoint(rightInstance));
            }

            /// <summary>
            /// Creates a new empty HashMap.
            /// </summary>
            /// <returns>Value hashmap</returns>
            public static Value CreateHashMap()
            {
                return new Value(GameValueMethods.CreateHashMap());
            }

            /// <summary>
            /// Creates a new HashMap and initializes it from a key-value pair array
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value hashmap</returns>
            public static Value CreateHashMapFromArray(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.CreateHashMapFromArray(leftInstance, rightInstance));
            }

            /// <summary>
            /// Creates a location of the specified class and dimensions at the specified position. Classes are defined in CfgLocationTypes; for possible location types see Location Types. The alternative syntax allows to convert a non-editable (built-in) terrain location into an editable one, with the following restrictions: it cannot be deleted (but can be setType to "Invisible" to hide it) it cannot be moved
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value location</returns>
            public static Value CreateLocation(Value rightInstance)
            {
                return new Value(GameValueMethods.CreateLocation(rightInstance));
            }

            /// <summary>
            /// Creates a new map marker at the given position. The marker will be created for every connected player as well as all JIP players. The marker name has to be unique; the command will be ignored if a marker with the given name already exists. ⚠The marker will be visible only once at least markerType has been defined: _marker = createMarker ["markername", player]; // Not visible yet. _marker setMarkerType "hd_dot"; // Visible. If the marker position is given in 3D format, the z-coordinate is stored with the marker and will be used when the marker is passed to commands such as createVehicle, createUnit, createAgent, createMine or setVehiclePosition.When a marker is manually placed in the editor, z is always 0, which means the marker is placed on the ground. But when the player places a marker on the map in game, it is placed at sea level, so the z-coordinate of that marker is -getTerrainHeightASL markerPos "userMarker";.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value string</returns>
            public static Value CreateMarker(Value rightInstance)
            {
                return new Value(GameValueMethods.CreateMarker(rightInstance));
            }

            /// <summary>
            /// Creates a local marker at the given position - the marker only exists on the machine that created it. The marker name has to be unique, if a marker with the given name exists, the command will be ignored. Use deleteMarkerLocal to delete a local marker. If the position is given in 3D format, z coordinate is stored with the marker and will be used when marker is passed to commands like createVehicle, createUnit, createAgent, createMine, setVehiclePosition for example. However getMarkerPos and markerPos will always return 0 for z.  ⚠Local markers have their own set of local commands "xxMarkerxxLocal" to work with. If you use global marker commands on a local marker, the local marker will become global.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value string</returns>
            public static Value CreateMarkerLocal(Value rightInstance)
            {
                return new Value(GameValueMethods.CreateMarkerLocal(rightInstance));
            }

            /// <summary>
            /// Creates a previously added menu. Some Old Editor Command
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value CreateMenu(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.CreateMenu(leftInstance, rightInstance));
            }

            /// <summary>
            /// Creates a mine of the given type. If the markers array only contains one marker name, it is ignored and the position parameter is used instead. If markers contains multiple marker names, one of them is chosen randomly and used as the center of the placement area. This command creates objects of the CfgAmmo class named in configFile >> "CfgVehicles" >> _type >> "ammo". Unit ability to detect mines depends on many factors: The starting value is defined in config, for example ./CfgVehicles/B_soldier_F/detectSkill, which in this case is 12. Mine specialist value for example, defined in  ./CfgVehicles/B_soldier_exp_F/detectSkill is 38. This value is then dynamically reduced depending on factors such as distance, if a unit is in a vehicle, if it is day or night time, how directly unit is looking at the mine, how fast unit is moving, how inconspicuous is the mine or even if it is visible.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value object</returns>
            public static Value CreateMine(Value rightInstance)
            {
                return new Value(GameValueMethods.CreateMine(rightInstance));
            }

            /// <summary>
            /// Create single missions display as a child of given display. The mission dialog will be set to the directory given as an argument "root".
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value display</returns>
            public static Value CreateMissionDisplay(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.CreateMissionDisplay(leftInstance, rightInstance));
            }

            /// <summary>
            /// Create a MP campaign display. The class name must be a mission collection declared in the configs; for example, configFile >> "CfgMissions" >> "MPMissions" >> "Apex" If the class does not exist or is not a mission collection, the display will be created empty.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value CreateMPCampaignDisplay(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.CreateMPCampaignDisplay(leftInstance, rightInstance));
            }

            /// <summary>
            /// Create object with given shape defined as path to .p3d model. Supported LODs include Geometry, Fire Geometry, Roadway, View Geometry and ShadowVolume. Supported features include collision, texturing, animation, penetration, AI spotting occlusion, and surface specific sounds (like footsteps). Unsupported features include PhysX, damage, AI pathfinding (causes walking through walls), and built-in lights. Given the simulation limitations, global decorative objects can be created with very little network traffic. Objects that could be exclusively created with this command are: trees, bushes, rocks, bridges, roads, vehicle wrecks, custom models in mission, and other objects without a class in config. The height of the placement position might need to be adjusted experimentally. See Arma 3: createSimpleObject/objects for a p3d models' list. See Arma 3: Livonia Props for Livonia furniture. See Arma 3: Simple Objects to learn more about simple objects. addAction does not work with simple objects. objects created with Syntax 1 cannot be textured. Some objects may also have inverted default direction. objects created with Syntax 2 can be textured. The default direction should match the direction of the object if it was created with createVehicle. only as of 1.68 do simple objects support getVariable and setVariable.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value object</returns>
            public static Value CreateSimpleObject(Value rightInstance)
            {
                return new Value(GameValueMethods.CreateSimpleObject(rightInstance));
            }

            /// <summary>
            /// Creates a new Task and adds it to the Diary. Using the Arma 3: Task Framework instead is recommended When task is added as a child, it appears as subcategory to the parent task in the Tasks menu and can be parent to another child task. However this is cosmetic appearance as each task has own id and can be referenced directly via diary link.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value task</returns>
            public static Value CreateSimpleTask(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.CreateSimpleTask(leftInstance, rightInstance));
            }

            /// <summary>
            /// Create a new site.  ⚠This command is considered deprecated and is no longer supported
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value object</returns>
            public static Value CreateSite(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.CreateSite(leftInstance, rightInstance));
            }

            /// <summary>
            /// Creates a sound source of the given type (type is the name of the subclass of CfgVehicles which is pointing to the sound defined in CfgSFX). The actual sound object created is of type "#dynamicsound" and could be detected with allMissionObjects. If the markers array contains several marker names, the position of a random one is used, otherwise, the given position is used. The sound source is placed inside a circle with this position as its center and placement as its radius. Some of the vanilla classes pre-configured in Arma 3: "Sound_Alarm" "Sound_Alarm2" "Sound_BattlefieldExplosions" "Sound_BattlefieldFirefight" "Sound_Fire" "Sound_SmokeWreck1" "Sound_SparklesWreck1" "Sound_SparklesWreck2" "Sound_Stream" Since Arma 3 v1.70 it is possible to define sounds for use with createSoundSource in mission config. As mentioned earlier, the sounds needed for this command should be defined inside CfgVehicles class, which itself references CfgSFX class. If given class searched in main config and is not found, the search will continue in description.ext - see Example 3. Note that the sound created by createSoundSource will always be looping. Also when CfgSFX sound definition contains more than 1 sound, there is no guarantee that the sound played will be the same on every PC in Multiplayer.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value object</returns>
            public static Value CreateSoundSource(Value rightInstance)
            {
                return new Value(GameValueMethods.CreateSoundSource(rightInstance));
            }

            /// <summary>
            /// Create a new AI task (subtask of parentTask). Type is name of registered task type.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value task</returns>
            public static Value CreateTask(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.CreateTask(leftInstance, rightInstance));
            }

            /// <summary>
            /// Creates a Team and names it.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value team_member</returns>
            public static Value CreateTeam(Value rightInstance)
            {
                return new Value(GameValueMethods.CreateTeam(rightInstance));
            }

            /// <summary>
            /// Creates a trigger of the given type and at the given position. The type must be a class name in CfgNonAIVehicles or CfgVehicles with simulation = detector. An array containing all units that have activated the trigger is available via list triggerobj. Since triggers are Objects, commands such as getPosASL, setPosASL, deleteVehicle etc. work on them. Since Arma 3 v1.54 triggers can be disabled/enabled using enableSimulation command. Triggers are created with default parameters: a: 50 b: 50 c: -1 angle: 0 rectangular: false activationBy: None activationType: Present repeating: false timeoutMin: 0 timeoutMid: 0 timeoutMax: 0 interruptable: true type: None text: "" name: "" expCond: "this" expActiv: "" expDesactiv: "" 1.98 interval: 0.5
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value object</returns>
            public static Value CreateTrigger(Value rightInstance)
            {
                return new Value(GameValueMethods.CreateTrigger(rightInstance));
            }

            /// <summary>
            /// Create a unit of the provided CfgVehicles class. ⚠The unit will not be created if the passed group does not exist (a.k.a grpNull); this can happen if createGroup fails because the group limit has been reached (see createGroup for respective game limits). Syntax 1 Syntax 2 Group's locality the provided group can be non-local, but a warning will be logged the provided group must be local Unit's side using a classname from a different side than the provided group will result in the unit itself being of a (config-defined) side inside a group of another side - see Example 6 for more information using a classname from a different side than the provided group will result in the unit being of the same side as the provided group Other the unit's init code will execute after a slight delay if the provided group is not local this syntax does not return a reference to the created unit (see Example 7) 1.34 1.00 This command could be bugged in Operation Flashpoint or Armed Assault; an additional join may solve the problem. However, some commands such as setUnitPos only work if run before the join.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value object</returns>
            public static Value CreateUnit(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.CreateUnit(leftInstance, rightInstance));
            }

            /// <summary>
            /// Creates an empty object of given classname type. See Arma 3 Assets / Arma 3: createVehicle/vehicles, or CfgVehicles for earlier games. To create objects of type "Logic", use createUnit. To create an editable  Eden Editor entity, see create3DENEntity. To avoid vehicle randomisation in Arma 3, set the BIS_enableRandomization variable immediately after creating the vehicle: private _vehicle = "C_Offroad_01_F" createVehicle position player; _vehicle setVariable ["BIS_enableRandomization", false]; Check Vehicle Customization (VhC) page for more information and settings.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value object</returns>
            public static Value CreateVehicle(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.CreateVehicle(leftInstance, rightInstance));
            }

            /// <summary>
            /// Creates vehicle crew corresponding to the provided vehicle's faction. If the vehicle is already occupied, the command will only create missing crew in the existing vehicle's group. To find out which crew will be created, use BIS_fnc_vehicleCrewTurrets.    This command: 1.26 creates a group if one is needed (otherwise uses group vehicle) creates a driver (if the vehicle needs one - config hasDriver) creates all non-FFV turrets gunners (if the turret needs one - config hasGunner without dontCreateAI) does not create cargo does not addVehicle to the created crew in the same way this normally happens when crewed vehicle created in the editor. See BIS_fnc_spawnVehicle to spawn a crew-full vehicle with group addition. ⚠While a vehicle with a crew placed in editor will have all crew units of the rank "PRIVATE", this command will create the driver as "LIEUTENANT" and all turret units as "SERGEANT".
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value group</returns>
            public static Value CreateVehicleCrew(Value rightInstance)
            {
                return new Value(GameValueMethods.CreateVehicleCrew(rightInstance));
            }

            /// <summary>
            /// Creates an object of the given type. Created object is not transferred through network in MP games. netId of such vehicle in multiplayer will be "0:0". To disable local vehicle creation, use CfgDisabledCommands to blacklist this command. Alternatively, you can use createSimpleObject with local option enabled where applicable.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value object</returns>
            public static Value CreateVehicleLocal(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.CreateVehicleLocal(leftInstance, rightInstance));
            }

            /// <summary>
            /// Returns the crew (both dead and alive) of the given vehicle.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value Crew(Value rightInstance)
            {
                return new Value(GameValueMethods.Crew(rightInstance));
            }

            /// <summary>
            /// Adds a header line of controls according to the HeaderTemplate class. It returns an array containing header index and array of created controls in  format: [<headerIndex>, [<control0>, <control1>...<control n>]]. Note that rows and headers are indexed separately.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value CtAddHeader(Value rightInstance)
            {
                return new Value(GameValueMethods.CtAddHeader(rightInstance));
            }

            /// <summary>
            /// Adds one row of controls according to the RowTemplate class. It returns an array containing row index and array of created controls in a format [<rowIndex>, [<control0>, <control1>...<control n>]]. Note that rows and headers are indexed separately.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value CtAddRow(Value rightInstance)
            {
                return new Value(GameValueMethods.CtAddRow(rightInstance));
            }

            /// <summary>
            /// Removes all the lines from the RscControlsTable. Returns Nothing.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value CtClear(Value rightInstance)
            {
                return new Value(GameValueMethods.CtClear(rightInstance));
            }

            /// <summary>
            /// Returns index of the selected row. Will take only rows, but not headers into account.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value scalar</returns>
            public static Value CtCurSel(Value rightInstance)
            {
                return new Value(GameValueMethods.CtCurSel(rightInstance));
            }

            /// <summary>
            /// Returns metadata associated with a particular row of a CT_CONTROLS_TABLE control.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value string</returns>
            public static Value CtData(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.CtData(leftInstance, rightInstance));
            }

            /// <summary>
            /// Gets array of indices of rows under this header.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value CtFindHeaderRows(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.CtFindHeaderRows(leftInstance, rightInstance));
            }

            /// <summary>
            /// Gets index of the closest header above this row.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value scalar</returns>
            public static Value CtFindRowHeader(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.CtFindRowHeader(leftInstance, rightInstance));
            }

            /// <summary>
            /// Returns array of controls on the header with the given index.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value CtHeaderControls(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.CtHeaderControls(leftInstance, rightInstance));
            }

            /// <summary>
            /// Returns number of headers (rows not included) in the RscControlsTable.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value scalar</returns>
            public static Value CtHeaderCount(Value rightInstance)
            {
                return new Value(GameValueMethods.CtHeaderCount(rightInstance));
            }

            /// <summary>
            /// Takes array of header indices as a parameter and removes headers with those indices. Indices of remaining headers will be recomputed.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value CtRemoveHeaders(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.CtRemoveHeaders(leftInstance, rightInstance));
            }

            /// <summary>
            /// Takes array of row indices as a parameter and removes rows with those indices. Indices of remaining rows will be recomputed.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value CtRemoveRows(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.CtRemoveRows(leftInstance, rightInstance));
            }

            /// <summary>
            /// Launch actions attached to given (button based) control.   Command only triggers action entry described in control config and engine-based actions (cancel or ok codes) and will not trigger button related User Interface Event Handlers. Command ignores control disabled state. (Example 2)
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value CtrlActivate(Value rightInstance)
            {
                return new Value(GameValueMethods.CtrlActivate(rightInstance));
            }

            /// <summary>
            /// Add an event handler to the given control. ⚠ Control event handlers are processed in reversed order, i.e. last added: first, first added: last. So if you have an override it should be set up in the 1st added EH. When using the event names listed here with the ctrlAddEventHandler, ctrlSetEventHandler, displayAddEventHandler or displaySetEventHandler commands, the prefix "on" in the event name must be removed (e.g. 'ButtonDown' instead of 'onButtonDown').
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value scalar</returns>
            public static Value CtrlAddEventHandler(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.CtrlAddEventHandler(leftInstance, rightInstance));
            }

            /// <summary>
            /// Gets rotation info of a control set as ST_PICTURE. Supported control types: CT_STATIC CT_ACTIVETEXT (Since Arma 3 v2.09.149642)
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value CtrlAngle(Value rightInstance)
            {
                return new Value(GameValueMethods.CtrlAngle(rightInstance));
            }

            /// <summary>
            /// Process an animation of 3D Arma: GUI Configuration. Command uses name defined by source property and works similar like animateSource command.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value CtrlAnimateModel(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.CtrlAnimateModel(leftInstance, rightInstance));
            }

            /// <summary>
            /// Returns current animation phase of given source. Similar to animationSourcePhase.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value scalar</returns>
            public static Value CtrlAnimationPhaseModel(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.CtrlAnimationPhaseModel(leftInstance, rightInstance));
            }

            /// <summary>
            /// Returns the control at the specified coordinates.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value control</returns>
            public static Value CtrlAt(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.CtrlAt(leftInstance, rightInstance));
            }

            /// <summary>
            /// Returns number of seconds auto-scroll will wait before scroll and/or rewind. -2 if scrollbar not present.  Autorscroll is available for CT_LISTBOX and CT_CONTROLS_GROUP types of controls only. Autoscroll will wait ctrlAutoScrollDelay seconds (must be  > 0) and then will scroll the scroll bar down to the bottom. ctrlAutoScrollSpeed defines the speed with which scrollbar is scrolled. If ctrlAutoScrollRewind is true, the control will fade out, immediately rewind to the top, then fade in, wait ctrlAutoScrollDelay seconds and then repeat the scrolling in a loop. If user focuses on the control, autoscrolling is interrupted.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value scalar</returns>
            public static Value CtrlAutoScrollDelay(Value rightInstance)
            {
                return new Value(GameValueMethods.CtrlAutoScrollDelay(rightInstance));
            }

            /// <summary>
            /// Returns true if auto-scroll should move back to start after it reaches the end. Autorscroll is available for CT_LISTBOX and CT_CONTROLS_GROUP types of controls only. Autoscroll will wait ctrlAutoScrollDelay seconds (must be  > 0) and then will scroll the scroll bar down to the bottom. ctrlAutoScrollSpeed defines the speed with which scrollbar is scrolled. If ctrlAutoScrollRewind is true, the control will fade out, immediately rewind to the top, then fade in, wait ctrlAutoScrollDelay seconds and then repeat the scrolling in a loop. If user focuses on the control, autoscrolling is interrupted.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value bool</returns>
            public static Value CtrlAutoScrollRewind(Value rightInstance)
            {
                return new Value(GameValueMethods.CtrlAutoScrollRewind(rightInstance));
            }

            /// <summary>
            /// Returns number of seconds to auto-scroll one line. -1 if auto-scroll is disabled. -2 if scrollbar not present. Autoscroll is available for CT_LISTBOX and CT_CONTROLS_GROUP types of controls only. Autoscroll will wait ctrlAutoScrollDelay seconds (must be  > 0) and then will scroll the scroll bar down to the bottom. ctrlAutoScrollSpeed defines the speed with which scrollbar is scrolled. If ctrlAutoScrollRewind is true, the control will fade out, immediately rewind to the top, then fade in, wait ctrlAutoScrollDelay seconds and then repeat the scrolling in a loop. If user focuses on the control, autoscrolling is interrupted.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value scalar</returns>
            public static Value CtrlAutoScrollSpeed(Value rightInstance)
            {
                return new Value(GameValueMethods.CtrlAutoScrollSpeed(rightInstance));
            }

            /// <summary>
            /// Returns control's background color.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value CtrlBackgroundColor(Value rightInstance)
            {
                return new Value(GameValueMethods.CtrlBackgroundColor(rightInstance));
            }

            /// <summary>
            /// Returns the current state of given CT_CHECKBOXES control. Since Arma 3 v1.72 it is possible to query multiple checkboxes by providing checkbox index. For more information see CT_CHECKBOXES.The "CheckBoxesSelChanged" control EH returns the control, index of changed checkbox and its current checked state. The checked state however is not a Boolean but Number 0 or 1. To convert ctrlChecked command output into number as well, use parseNumber command
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value bool</returns>
            public static Value CtrlChecked(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.CtrlChecked(leftInstance, rightInstance));
            }

            /// <summary>
            /// Returns the class name of a Control as it is defined in config. If you need config class of a game created Display, it is stored on display itself: _className = findDisplay 12 getVariable ["BIS_fnc_initDisplay_configClass", ""]; // "RscDiary"
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value string</returns>
            public static Value CtrlClassName(Value rightInstance)
            {
                return new Value(GameValueMethods.CtrlClassName(rightInstance));
            }

            /// <summary>
            /// Commits control animation to last specified duration. ⚠The duration of the animation is not guaranteed to be exactly the same as the given time.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value CtrlCommit(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.CtrlCommit(leftInstance, rightInstance));
            }

            /// <summary>
            /// Check if the control animation is finished.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value bool</returns>
            public static Value CtrlCommitted(Value rightInstance)
            {
                return new Value(GameValueMethods.CtrlCommitted(rightInstance));
            }

            /// <summary>
            /// Creates a new control in the given display. The control class could be an existing class from the  main config or a custom class defined in the  mission config. The main config is searched first, if the class does not exist there, the mission config is searched. Some of the common controls defined in the main config that can be used with this command: Show list This list contains controls which are guaranteed to work with this command. However, controls not listed here should work as well - as long as they are properly defined. Class Description Available since RscText simple text box RscStructuredText text box which supports structured text RscTextMulti simple multiline text box RscPicture simple picture box RscPictureKeepAspect picture box that doesn't stretch picture RscEdit input box RscEditMulti multiline input box RscEditReadOnly input box with  canModify = false; 1.98 RscEditMultiReadOnly multiline input box with  canModify = false; 1.98 RscTree tree view control RscTreeMulti multi-select tree view 2.02 RscTreeSearch searchable tree view control (see Example 4) RscVideo picture control with autostart for video texture (see BIS_fnc_playVideo) RscVideoKeepAspect picture control for video to keep original video aspect ratio RscButtonMenuBIKI shortcut button with url pointing to "https://community.bistudio.com/wiki/" 1.98 RscControlsGroup default controls group RscControlsGroupNoScrollbars controls group without scrollbars RscControlsGroupNoHScrollbars controls group without horizontal scrollbar RscControlsGroupNoVScrollbars controls group without vertical scrollbar ⚠If you are creating CT_MAP control dynamically, use ctrlMapSetPosition to update control position instead of ctrlSetPosition.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value control</returns>
            public static Value CtrlCreate(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.CtrlCreate(leftInstance, rightInstance));
            }

            /// <summary>
            /// Deletes given control. The control has to be created either by script with ctrlCreate or to have deletable property in config set to 1. Use ctrlShow false and ctrlEnable false to disable controls that cannot be deleted. Returns Boolean indicating  whether the deletion was successful. ⚠Using ctrlDelete in a UI eventhandler called by the to be deleted control will crash the game! This also happens when a controls group is deleted that contains the "calling" control.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value bool</returns>
            public static Value CtrlDelete(Value rightInstance)
            {
                return new Value(GameValueMethods.CtrlDelete(rightInstance));
            }

            /// <summary>
            /// Enables or disables a control of the currently active user dialog. Disabled controls cannot be clicked onto. Read Arma: GUI Configuration for more information about user dialogs and controls.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value CtrlEnable(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.CtrlEnable(leftInstance, rightInstance));
            }

            /// <summary>
            /// Returns if a control on the currently active user dialog is enabled. Disabled controls cannot be focused. Read Arma: GUI Configuration for more information about user dialogs and controls.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value bool</returns>
            public static Value CtrlEnabled(Value rightInstance)
            {
                return new Value(GameValueMethods.CtrlEnabled(rightInstance));
            }

            /// <summary>
            /// Returns the current fade factor of control.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value scalar</returns>
            public static Value CtrlFade(Value rightInstance)
            {
                return new Value(GameValueMethods.CtrlFade(rightInstance));
            }

            /// <summary>
            /// Returns control's font size, usually sizeEx value (see ctrlSetFontHeight).
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value scalar</returns>
            public static Value CtrlFontHeight(Value rightInstance)
            {
                return new Value(GameValueMethods.CtrlFontHeight(rightInstance));
            }

            /// <summary>
            /// Returns control's foreground color.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value CtrlForegroundColor(Value rightInstance)
            {
                return new Value(GameValueMethods.CtrlForegroundColor(rightInstance));
            }

            /// <summary>
            /// Returns true when HTML content was successfully loaded.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value bool</returns>
            public static Value CtrlHTMLLoaded(Value rightInstance)
            {
                return new Value(GameValueMethods.CtrlHTMLLoaded(rightInstance));
            }

            /// <summary>
            /// Returns control IDC.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value scalar</returns>
            public static Value CtrlIDC(Value rightInstance)
            {
                return new Value(GameValueMethods.CtrlIDC(rightInstance));
            }

            /// <summary>
            /// Returns display IDD.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value scalar</returns>
            public static Value CtrlIDD(Value rightInstance)
            {
                return new Value(GameValueMethods.CtrlIDD(rightInstance));
            }

            /// <summary>
            /// Adds the next frame to the map animation.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value CtrlMapAnimAdd(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.CtrlMapAnimAdd(leftInstance, rightInstance));
            }

            /// <summary>
            /// Clears the map animation.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value CtrlMapAnimClear(Value rightInstance)
            {
                return new Value(GameValueMethods.CtrlMapAnimClear(rightInstance));
            }

            /// <summary>
            /// Plays the map animation.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value CtrlMapAnimCommit(Value rightInstance)
            {
                return new Value(GameValueMethods.CtrlMapAnimCommit(rightInstance));
            }

            /// <summary>
            /// Checks whether the map animation has finished.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value bool</returns>
            public static Value CtrlMapAnimDone(Value rightInstance)
            {
                return new Value(GameValueMethods.CtrlMapAnimDone(rightInstance));
            }

            /// <summary>
            /// Changes the default cursor that appears when interacting with a map control to a custom one. Use an empty string to restore the default cursor. ⚠Before Arma 3, if the specified cursor does not exist the default is used and no error is produced. In Arma 3, this would result in the following error: "No entry 'bin\config.bin/CfgWrapperUI/Cursors'". The cursor is the name of a config entry from CfgWrapperUI / Cursors. This command has the following specifics: When used on the Main Map (findDisplay 12 displayCtrl 51), it is possible to override multiple default cursors. For example, while leaving default "Arrow" intact, it is possible to just override "Scroll" with e.g "Wait" (See Example 3) When used on a custom map, for example user made Mini Map, there is only one single cursor "" for everything, therefore only this cursor can be overridden (see Example 4 on how to override it) Some possible class names (See ctrlMapCursor/cursors for the whole list): Arrow Track Move Scroll Rotate Track3D Move3D Rotate3D Raise3D Wait HC_move HC_overFriendly HC_overEnemy HC_overMission HC_unsel
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value CtrlMapCursor(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.CtrlMapCursor(leftInstance, rightInstance));
            }

            /// <summary>
            /// 
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value scalar</returns>
            public static Value CtrlMapDir(Value rightInstance)
            {
                return new Value(GameValueMethods.CtrlMapDir(rightInstance));
            }

            /// <summary>
            /// Returns description of map sign mouse cursor is over. Works with in-game map as well as 2D editor map in edit mode.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value CtrlMapMouseOver(Value rightInstance)
            {
                return new Value(GameValueMethods.CtrlMapMouseOver(rightInstance));
            }

            /// <summary>
            /// A getter for ctrlMapSetPosition. Returns map position in format [x, y, w, h]. If map is inside a Controls Group, the x and y position is relative to the Controls Group top left corner.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value CtrlMapPosition(Value rightInstance)
            {
                return new Value(GameValueMethods.CtrlMapPosition(rightInstance));
            }

            /// <summary>
            /// Returns the current scale of given map control.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value scalar</returns>
            public static Value CtrlMapScale(Value rightInstance)
            {
                return new Value(GameValueMethods.CtrlMapScale(rightInstance));
            }

            /// <summary>
            /// Converts map screen coordinates into world coordinates. Unlike posScreenToWorld, this command returns world position is format [x, y], otherwise it is identical to posScreenToWorld.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value CtrlMapScreenToWorld(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.CtrlMapScreenToWorld(leftInstance, rightInstance));
            }

            /// <summary>
            /// Sets position and size of the given map control and recalculates control center. The effect is immediate and no ctrlCommit is necessary, unlike with ctrlSetPosition command. The Map control is different from other controls and normally does not behave well inside Controls Groups. When this command is used on the Map control inside a Controls Group, The x and y will be treated as relative position to the top left of Controls Group. Use this command to set position before you use ctrlMapAnimAdd. Use this command to update Map control after its position or size had been changed or the Map control was created dynamically (Example 2). If you move Controls Group, use this command to refresh Map control (Example 3).
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value CtrlMapSetPosition(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.CtrlMapSetPosition(leftInstance, rightInstance));
            }

            /// <summary>
            /// Converts world coordinates into map screen coordinates. This command is identical to posWorldToScreen.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value CtrlMapWorldToScreen(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.CtrlMapWorldToScreen(leftInstance, rightInstance));
            }

            /// <summary>
            /// Returns model used in 3D-Dialog.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value string</returns>
            public static Value CtrlModel(Value rightInstance)
            {
                return new Value(GameValueMethods.CtrlModel(rightInstance));
            }

            /// <summary>
            /// Returns vectorDir and vectorUp of the model used in 3D-Dialogs.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value CtrlModelDirAndUp(Value rightInstance)
            {
                return new Value(GameValueMethods.CtrlModelDirAndUp(rightInstance));
            }

            /// <summary>
            /// Returns 3D control model scale.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value scalar</returns>
            public static Value CtrlModelScale(Value rightInstance)
            {
                return new Value(GameValueMethods.CtrlModelScale(rightInstance));
            }

            /// <summary>
            /// Returns position of the mouse on the screen relative to UI Control in UI coordinates. Also works within CT_CONTROLS_GROUPs. In that case, returned position is relative to the position of the group.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value CtrlMousePosition(Value rightInstance)
            {
                return new Value(GameValueMethods.CtrlMousePosition(rightInstance));
            }

            /// <summary>
            /// Returns the parent Display of the given control. For parent Controls group see ctrlParentControlsGroup.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value display</returns>
            public static Value CtrlParent(Value rightInstance)
            {
                return new Value(GameValueMethods.CtrlParent(rightInstance));
            }

            /// <summary>
            /// Returns the parent control of a given child control. If the control is not part of a CT_CONTROLS_GROUP control then controlNull is returned. To return parent Display of the control use ctrlParent.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value control</returns>
            public static Value CtrlParentControlsGroup(Value rightInstance)
            {
                return new Value(GameValueMethods.CtrlParentControlsGroup(rightInstance));
            }

            /// <summary>
            /// Returns the current position of 2D control as [x, y, w, h] array. For 3D control it returns relative [x, y, z]. If the control is within a CT_CONTROLS_GROUP, the returned position will be relative to the group's position. If the control is a CT_CONTROLS_TABLE header or row the returned position is relative to the table's position.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value CtrlPosition(Value rightInstance)
            {
                return new Value(GameValueMethods.CtrlPosition(rightInstance));
            }

            /// <summary>
            /// Remove all event handlers from the given control.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value CtrlRemoveAllEventHandlers(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.CtrlRemoveAllEventHandlers(leftInstance, rightInstance));
            }

            /// <summary>
            /// Remove a given event handler from the given control.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value CtrlRemoveEventHandler(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.CtrlRemoveEventHandler(leftInstance, rightInstance));
            }

            /// <summary>
            /// Returns the current scale of the control.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value scalar</returns>
            public static Value CtrlScale(Value rightInstance)
            {
                return new Value(GameValueMethods.CtrlScale(rightInstance));
            }

            /// <summary>
            /// Returns scroll values for current scrollbars in range 0...1 (-1 if not applicable) for the following controls: CT_CONTROLS_TABLE CT_CONTROLS_GROUP CT_TREE CT_LISTBOX CT_COMBO CT_XCOMBO CT_LISTNBOX CT_LISTNBOX_CHECKABLE
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value CtrlScrollValues(Value rightInstance)
            {
                return new Value(GameValueMethods.CtrlScrollValues(rightInstance));
            }

            /// <summary>
            /// Sets text color of given control when it is selected.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value CtrlSetActiveColor(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.CtrlSetActiveColor(leftInstance, rightInstance));
            }

            /// <summary>
            /// Sets the rotation of a control set as ST_PICTURE. Rotation will be done within the control boundaries, so if the X and Y are given off center, the picture may get clipped by the control boundaries. Only requires ctrlCommit when fourth parameter is set to false. Procedural textures filled controls do not rotate. Supported control types: CT_STATIC CT_ACTIVETEXT (Since Arma 3 v2.09.149642) ⚠Images that touch borders may "bleed" during rotation transformation, to avoid this, make sure the image has 1px transparent padding
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value CtrlSetAngle(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.CtrlSetAngle(leftInstance, rightInstance));
            }

            /// <summary>
            /// Sets number of second before auto-scroll starts/rewinds. Setter for ctrlAutoScrollDelay. Autorscroll is available for CT_LISTBOX and CT_CONTROLS_GROUP types of controls only. Autoscroll will wait ctrlAutoScrollDelay seconds (must be  > 0) and then will scroll the scroll bar down to the bottom. ctrlAutoScrollSpeed defines the speed with which scrollbar is scrolled. If ctrlAutoScrollRewind is true, the control will fade out, immediately rewind to the top, then fade in, wait ctrlAutoScrollDelay seconds and then repeat the scrolling in a loop. If user focuses on the control, autoscrolling is interrupted.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value CtrlSetAutoScrollDelay(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.CtrlSetAutoScrollDelay(leftInstance, rightInstance));
            }

            /// <summary>
            /// Defines if scroll should rewind when auto-scroll reach end. Setter for ctrlAutoScrollRewind. Autorscroll is available for CT_LISTBOX and CT_CONTROLS_GROUP types of controls only. Autoscroll will wait ctrlAutoScrollDelay seconds (must be  > 0) and then will scroll the scroll bar down to the bottom. ctrlAutoScrollSpeed defines the speed with which scrollbar is scrolled. If ctrlAutoScrollRewind is true, the control will fade out, immediately rewind to the top, then fade in, wait ctrlAutoScrollDelay seconds and then repeat the scrolling in a loop. If user focuses on the control, autoscrolling is interrupted.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value CtrlSetAutoScrollRewind(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.CtrlSetAutoScrollRewind(leftInstance, rightInstance));
            }

            /// <summary>
            /// Sets number of second required to scroll to next line. If speed < 0, auto-scroll is disabled. Setter for ctrlAutoScrollSpeed. Autorscroll is available for CT_LISTBOX and CT_CONTROLS_GROUP types of controls only. Autoscroll will wait ctrlAutoScrollDelay seconds (must be  > 0) and then will scroll the scroll bar down to the bottom. ctrlAutoScrollSpeed defines the speed with which scrollbar is scrolled. If ctrlAutoScrollRewind is true, the control will fade out, immediately rewind to the top, then fade in, wait ctrlAutoScrollDelay seconds and then repeat the scrolling in a loop. If user focuses on the control, autoscrolling is interrupted.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value CtrlSetAutoScrollSpeed(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.CtrlSetAutoScrollSpeed(leftInstance, rightInstance));
            }

            /// <summary>
            /// Sets background color of given control. Only affects: CT_COMBO CT_STATIC CT_STRUCTURED_TEXT CT_MAP CT_MAP_MAIN 2.02 CT_BUTTON 2.02 CT_SHORTCUTBUTTON 2.02 CT_ACTIVETEXT
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value CtrlSetBackgroundColor(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.CtrlSetBackgroundColor(leftInstance, rightInstance));
            }

            /// <summary>
            /// Sets checked state of a CT_CHECKBOXES control.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value CtrlSetChecked(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.CtrlSetChecked(leftInstance, rightInstance));
            }

            /// <summary>
            /// Sets the colorDisabled attribute of a control.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value CtrlSetDisabledColor(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.CtrlSetDisabledColor(leftInstance, rightInstance));
            }

            /// <summary>
            /// 🕖The following information is obsolete as of Arma 2 v1.00. Reason: Use ctrlAddEventHandler instead as it can stack event handlers. Sets given event handler of given control: any previously added event handler is removed. See User Interface Event Handlers for the full list of handler names See also DIK KeyCodes for a list of key code constants relevant to key-related events like KeyDown and KeyUp ⚠When using the event names listed here with the ctrlAddEventHandler, ctrlSetEventHandler, displayAddEventHandler or displaySetEventHandler commands, the prefix "on" in the event name must be removed (e.g. 'ButtonDown' instead of 'onButtonDown').
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value CtrlSetEventHandler(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.CtrlSetEventHandler(leftInstance, rightInstance));
            }

            /// <summary>
            /// Sets wanted transparency for control animation. Requires ctrlCommit to commit changes. To hide or show a control instantly, use ctrlShow.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value CtrlSetFade(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.CtrlSetFade(leftInstance, rightInstance));
            }

            /// <summary>
            /// Sets the input focus on given control.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value CtrlSetFocus(Value rightInstance)
            {
                return new Value(GameValueMethods.CtrlSetFocus(rightInstance));
            }

            /// <summary>
            /// Sets the font for given control (see available fonts)
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value CtrlSetFont(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.CtrlSetFont(leftInstance, rightInstance));
            }

            /// <summary>
            /// Sets H1 font of given HTML control.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value CtrlSetFontH1(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.CtrlSetFontH1(leftInstance, rightInstance));
            }

            /// <summary>
            /// Sets H1 bold font of given HTML control.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value CtrlSetFontH1B(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.CtrlSetFontH1B(leftInstance, rightInstance));
            }

            /// <summary>
            /// Sets H2 font of given HTML control
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value CtrlSetFontH2(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.CtrlSetFontH2(leftInstance, rightInstance));
            }

            /// <summary>
            /// Sets H2 bold font of given HTML control.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value CtrlSetFontH2B(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.CtrlSetFontH2B(leftInstance, rightInstance));
            }

            /// <summary>
            /// Sets H3 font of given HTML control.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value CtrlSetFontH3(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.CtrlSetFontH3(leftInstance, rightInstance));
            }

            /// <summary>
            /// Sets H3 bold font of given HTML control.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value CtrlSetFontH3B(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.CtrlSetFontH3B(leftInstance, rightInstance));
            }

            /// <summary>
            /// Sets H4 font of given HTML control.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value CtrlSetFontH4(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.CtrlSetFontH4(leftInstance, rightInstance));
            }

            /// <summary>
            /// Sets H4 bold font of given HTML control.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value CtrlSetFontH4B(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.CtrlSetFontH4B(leftInstance, rightInstance));
            }

            /// <summary>
            /// Sets H5 font of given HTML control.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value CtrlSetFontH5(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.CtrlSetFontH5(leftInstance, rightInstance));
            }

            /// <summary>
            /// Sets H5 bold font of given HTML control.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value CtrlSetFontH5B(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.CtrlSetFontH5B(leftInstance, rightInstance));
            }

            /// <summary>
            /// Sets H6 font of given HTML control.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value CtrlSetFontH6(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.CtrlSetFontH6(leftInstance, rightInstance));
            }

            /// <summary>
            /// Sets H6 bold font of given HTML control.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value CtrlSetFontH6B(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.CtrlSetFontH6B(leftInstance, rightInstance));
            }

            /// <summary>
            /// Sets the sizeEx property for most controls as follows:  CT_MAP - "sizeExNames" CT_HTML - "P" >> "sizeEx" Other - "sizeEx" 2.02 CT_STRUCTURED_TEXT - "size"
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value CtrlSetFontHeight(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.CtrlSetFontHeight(leftInstance, rightInstance));
            }

            /// <summary>
            /// Sets H1 font size of given HTML control.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value CtrlSetFontHeightH1(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.CtrlSetFontHeightH1(leftInstance, rightInstance));
            }

            /// <summary>
            /// Sets H2 font size of given HTML control.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value CtrlSetFontHeightH2(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.CtrlSetFontHeightH2(leftInstance, rightInstance));
            }

            /// <summary>
            /// Sets H3 font size of given HTML control.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value CtrlSetFontHeightH3(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.CtrlSetFontHeightH3(leftInstance, rightInstance));
            }

            /// <summary>
            /// Sets H4 font size of given HTML control.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value CtrlSetFontHeightH4(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.CtrlSetFontHeightH4(leftInstance, rightInstance));
            }

            /// <summary>
            /// Sets H5 font size of given HTML control.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value CtrlSetFontHeightH5(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.CtrlSetFontHeightH5(leftInstance, rightInstance));
            }

            /// <summary>
            /// Sets H6 font size of given HTML control.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value CtrlSetFontHeightH6(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.CtrlSetFontHeightH6(leftInstance, rightInstance));
            }

            /// <summary>
            /// Sets the font size of the secondary text of given control.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value CtrlSetFontHeightSecondary(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.CtrlSetFontHeightSecondary(leftInstance, rightInstance));
            }

            /// <summary>
            /// Sets P font of given HTML control or its size.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value CtrlSetFontP(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.CtrlSetFontP(leftInstance, rightInstance));
            }

            /// <summary>
            /// Sets P bold font of given HTML control.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value CtrlSetFontPB(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.CtrlSetFontPB(leftInstance, rightInstance));
            }

            /// <summary>
            /// Sets the font size of the secondary text of given control.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value CtrlSetFontSecondary(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.CtrlSetFontSecondary(leftInstance, rightInstance));
            }

            /// <summary>
            /// Sets foreground color of the given control. Also try ctrlSetTextColor, if this command doesn't have the desired effect.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value CtrlSetForegroundColor(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.CtrlSetForegroundColor(leftInstance, rightInstance));
            }

            /// <summary>
            /// Sets model for 3D-Dialogs (see Arma 3: createSimpleObject/objects for a p3d models' list).
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value CtrlSetModel(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.CtrlSetModel(leftInstance, rightInstance));
            }

            /// <summary>
            /// Sets orientation of 3D control model. It is similar to setVectorDirAndUp command for an object.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value CtrlSetModelDirAndUp(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.CtrlSetModelDirAndUp(leftInstance, rightInstance));
            }

            /// <summary>
            /// Sets 3D control model scale
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value CtrlSetModelScale(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.CtrlSetModelScale(leftInstance, rightInstance));
            }

            /// <summary>
            /// Similar to setMousePosition but relative to the given control.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value CtrlSetMousePosition(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.CtrlSetMousePosition(leftInstance, rightInstance));
            }

            /// <summary>
            /// Switches mode of pixel precision (rounding) in a given control interface.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value CtrlSetPixelPrecision(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.CtrlSetPixelPrecision(leftInstance, rightInstance));
            }

            /// <summary>
            /// Sets wanted position and size for 2D control animation. Width and height are optional. ctrlCommit is required to complete the operation. For 3D control, param is relative [x, y, z] and no ctrlCommit is required as it cannot be animated. If target control is inside a CT_CONTROLS_GROUP, the position needs to be relative to it. ⚠This command doesn't work well with CT_MAP control. Use ctrlMapSetPosition instead.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value CtrlSetPosition(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.CtrlSetPosition(leftInstance, rightInstance));
            }

            /// <summary>
            /// Sets the height of a 2D control. ctrlCommit is required to complete the operation.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value CtrlSetPositionH(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.CtrlSetPositionH(leftInstance, rightInstance));
            }

            /// <summary>
            /// Sets the width of a 2D control. ctrlCommit is required to complete the operation.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value CtrlSetPositionW(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.CtrlSetPositionW(leftInstance, rightInstance));
            }

            /// <summary>
            /// Sets horizontal position (x) of the 2D control. ctrlCommit is required to complete the operation.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value CtrlSetPositionX(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.CtrlSetPositionX(leftInstance, rightInstance));
            }

            /// <summary>
            /// Sets vertical position (y) of a 2D control. ctrlCommit is required to complete the operation.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value CtrlSetPositionY(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.CtrlSetPositionY(leftInstance, rightInstance));
            }

            /// <summary>
            /// Sets scale of a control. Top left corner remains same. This command requires ctrlCommit.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value CtrlSetScale(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.CtrlSetScale(leftInstance, rightInstance));
            }

            /// <summary>
            /// Sets scroll values for current scrollbars in range 0..1 for the following controls: CT_CONTROLS_TABLE CT_CONTROLS_GROUP CT_TREE CT_LISTBOX CT_COMBO CT_XCOMBO CT_LISTNBOX CT_LISTNBOX_CHECKABLE
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value CtrlSetScrollValues(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.CtrlSetScrollValues(leftInstance, rightInstance));
            }

            /// <summary>
            /// Sets 'shadow' property of the control: 0 - no shadow 1 - shadow 2 - outline
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value CtrlSetShadow(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.CtrlSetShadow(leftInstance, rightInstance));
            }

            /// <summary>
            /// Set the Structured Text which will be displayed in structured text control.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value CtrlSetStructuredText(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.CtrlSetStructuredText(leftInstance, rightInstance));
            }

            /// <summary>
            /// Sets the text of a control of the currently active user dialog or display. This command can be used for static texts, buttons, edit lines and active texts as well as for images, where you can use it to set the image path. Read Arma: GUI Configuration for more information about user dialogs and controls. Use endl to insert line breaks. Since Arma 3 v2.05.147765 supported control types are: CT_STATIC CT_EDIT CT_XKEYDESC CT_XBUTTON CT_SHORTCUTBUTTON CT_STRUCTURED_TEXT CT_BUTTON CT_ACTIVETEXT
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value CtrlSetText(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.CtrlSetText(leftInstance, rightInstance));
            }

            /// <summary>
            /// Sets text color of given control. Color is in format Color (RGBA). As of Arma 3 v1.40 this command can also be used to change fill-color of a CT_PROGRESS control. Also try ctrlSetForegroundColor, if this command doesn't have the desired effect.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value CtrlSetTextColor(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.CtrlSetTextColor(leftInstance, rightInstance));
            }

            /// <summary>
            /// Sets the secondary text color of a text control.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value CtrlSetTextColorSecondary(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.CtrlSetTextColorSecondary(leftInstance, rightInstance));
            }

            /// <summary>
            /// Sets the secondary text of a text control.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value CtrlSetTextSecondary(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.CtrlSetTextSecondary(leftInstance, rightInstance));
            }

            /// <summary>
            /// Selects length characters of edit control from the start position and places cursor at the end of selection. To only move the cursor, set length to 0. To select text from right to left, use negative length (See ctrlTextSelection for more info)
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value CtrlSetTextSelection(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.CtrlSetTextSelection(leftInstance, rightInstance));
            }

            /// <summary>
            /// Sets tooltip text of given control. If control supports URL property, like RscActiveText for example, and the URL is set, tooltip text displayed on mouse over will be appended with URL text.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value CtrlSetTooltip(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.CtrlSetTooltip(leftInstance, rightInstance));
            }

            /// <summary>
            /// Sets tooltip border color of given control.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value CtrlSetTooltipColorBox(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.CtrlSetTooltipColorBox(leftInstance, rightInstance));
            }

            /// <summary>
            /// Sets tooltip background color of given control. Color is in format Color (RGBA).
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value CtrlSetTooltipColorShade(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.CtrlSetTooltipColorShade(leftInstance, rightInstance));
            }

            /// <summary>
            /// Sets tooltip text color of given control. Color is in format Color (RGBA).
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value CtrlSetTooltipColorText(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.CtrlSetTooltipColorText(leftInstance, rightInstance));
            }

            /// <summary>
            /// Set maximum width of a control's tooltip.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value scalar</returns>
            public static Value CtrlSetTooltipMaxWidth(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.CtrlSetTooltipMaxWidth(leftInstance, rightInstance));
            }

            /// <summary>
            /// Sets URL property of the given control subject to allowedHTMLLoadURIs[] whitelisting in CfgCommands config. Supported controls are: CT_BUTTON CT_SHORTCUTBUTTON CT_ACTIVETEXT
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value CtrlSetURL(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.CtrlSetURL(leftInstance, rightInstance));
            }

            /// <summary>
            /// Sets how to handle opening of URL, default browser ot Steam overlay. Possible values: 0 - default browser 1 - Steam overlay if enabled, otherwise default browser 2 - Steam overlay, shows error message box if disabled (the box has a button to continue with default browser) Toggling Steam overlay in Steam options will require game restart for the changes to take effect.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value CtrlSetURLOverlayMode(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.CtrlSetURLOverlayMode(leftInstance, rightInstance));
            }

            /// <summary>
            /// Returns 'shadow' property of the control (see ctrlSetShadow).
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value scalar</returns>
            public static Value CtrlShadow(Value rightInstance)
            {
                return new Value(GameValueMethods.CtrlShadow(rightInstance));
            }

            /// <summary>
            /// Shows or hides a control. Read Arma: GUI Configuration for more information about user dialogs and controls.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value CtrlShow(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.CtrlShow(leftInstance, rightInstance));
            }

            /// <summary>
            /// Returns whether given control is shown.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value bool</returns>
            public static Value CtrlShown(Value rightInstance)
            {
                return new Value(GameValueMethods.CtrlShown(rightInstance));
            }

            /// <summary>
            /// Returns the provided control's style. See Arma: GUI Configuration - Control Styles.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value scalar</returns>
            public static Value CtrlStyle(Value rightInstance)
            {
                return new Value(GameValueMethods.CtrlStyle(rightInstance));
            }

            /// <summary>
            /// Returns the text of a control of the currently active user dialog. This command can be used on static texts, buttons, edit lines and active texts as well as for images, where it returns the image path. Does not work on HTML control and returns empty string "". Since Arma 3 v2.05.147765 supported control types are: CT_STATIC CT_EDIT CT_XKEYDESC CT_XBUTTON CT_SHORTCUTBUTTON CT_STRUCTURED_TEXT CT_BUTTON CT_ACTIVETEXT
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value string</returns>
            public static Value CtrlText(Value rightInstance)
            {
                return new Value(GameValueMethods.CtrlText(rightInstance));
            }

            /// <summary>
            /// Returns control's text color in Color (RGBA) format (see ctrlSetTextColor).
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value CtrlTextColor(Value rightInstance)
            {
                return new Value(GameValueMethods.CtrlTextColor(rightInstance));
            }

            /// <summary>
            /// Returns the control text height. Supported control types are: CT_STATIC CT_STRUCTURED_TEXT CT_EDIT Since Arma 3 v2.05.147765 control types added: CT_XKEYDESC CT_XBUTTON CT_SHORTCUTBUTTON CT_BUTTON CT_ACTIVETEXT
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value scalar</returns>
            public static Value CtrlTextHeight(Value rightInstance)
            {
                return new Value(GameValueMethods.CtrlTextHeight(rightInstance));
            }

            /// <summary>
            /// Returns the secondary text of a text control.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value string</returns>
            public static Value CtrlTextSecondary(Value rightInstance)
            {
                return new Value(GameValueMethods.CtrlTextSecondary(rightInstance));
            }

            /// <summary>
            /// Returns edit control text selection in format [start, length, selectedText].  length can be negative if text selection is made from right to left. Use abs with length or count with selectedText if string length is required. start always indicates at what position in text the selection is started. The cursor position will always be at the end of the selection. So if selection is made from right to left the cursor position will be at the left end of the selection. In order to find cursor position add start and length together (see Example 3).
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value CtrlTextSelection(Value rightInstance)
            {
                return new Value(GameValueMethods.CtrlTextSelection(rightInstance));
            }

            /// <summary>
            /// Returns the width of the control text including left and right margins (0.008 each). Supported control types are: CT_STATIC 0 CT_EDIT 2 CT_STRUCTURED_TEXT 13 2.06 CT_XKEYDESC 40 2.06 CT_XBUTTON 41 2.06 CT_SHORTCUTBUTTON 16 2.06 CT_BUTTON 1 2.06 CT_ACTIVETEXT 11 For control-independent text width estimate see getTextWidth.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value scalar</returns>
            public static Value CtrlTextWidth(Value rightInstance)
            {
                return new Value(GameValueMethods.CtrlTextWidth(rightInstance));
            }

            /// <summary>
            /// Returns the tooltip property of a button control. Getter for ctrlSetTooltip.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value string</returns>
            public static Value CtrlTooltip(Value rightInstance)
            {
                return new Value(GameValueMethods.CtrlTooltip(rightInstance));
            }

            /// <summary>
            /// Returns number representing the type of control, which is also defined by type property in config. For more information see Arma: GUI Configuration
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value scalar</returns>
            public static Value CtrlType(Value rightInstance)
            {
                return new Value(GameValueMethods.CtrlType(rightInstance));
            }

            /// <summary>
            /// Returns the URL property of a button control. Getter for ctrlSetURL.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value string</returns>
            public static Value CtrlURL(Value rightInstance)
            {
                return new Value(GameValueMethods.CtrlURL(rightInstance));
            }

            /// <summary>
            /// Returns the URL overlay mode 0, 1, 2 (see ctrlSetURLOverlayMode) or -1 if something went wrong.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value scalar</returns>
            public static Value CtrlURLOverlayMode(Value rightInstance)
            {
                return new Value(GameValueMethods.CtrlURLOverlayMode(rightInstance));
            }

            /// <summary>
            /// Returns if a control of the currently active user dialog is shown or not. Read Arma: GUI Configuration for more information about user dialogs and controls.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value bool</returns>
            public static Value CtrlVisible(Value rightInstance)
            {
                return new Value(GameValueMethods.CtrlVisible(rightInstance));
            }

            /// <summary>
            /// Returns array of controls on the row with the given index.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value CtRowControls(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.CtRowControls(leftInstance, rightInstance));
            }

            /// <summary>
            /// Returns number of rows (headers not included) in the RscControlsTable.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value scalar</returns>
            public static Value CtRowCount(Value rightInstance)
            {
                return new Value(GameValueMethods.CtRowCount(rightInstance));
            }

            /// <summary>
            /// Selects the line with the given index. Will take only rows, but not headers into account. -1 deselects all. Returns Nothing.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value CtSetCurSel(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.CtSetCurSel(leftInstance, rightInstance));
            }

            /// <summary>
            /// Associates metadata (string) with the row determined by the index. Returns Nothing.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value CtSetData(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.CtSetData(leftInstance, rightInstance));
            }

            /// <summary>
            /// Takes config path to the new header template. Clears the whole RscControlsTable and sets the new header template.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value CtSetHeaderTemplate(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.CtSetHeaderTemplate(leftInstance, rightInstance));
            }

            /// <summary>
            /// Takes config path to the new row template. Clears the whole RscControlsTable and sets the new row template (Deleting all rows and headers is easier to implement than replacing the rows and filling them with new data. IDCs could overflow etc.).
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value CtSetRowTemplate(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.CtSetRowTemplate(leftInstance, rightInstance));
            }

            /// <summary>
            /// Associates metadata (number) with the row determined by the index. Returns Nothing.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value CtSetValue(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.CtSetValue(leftInstance, rightInstance));
            }

            /// <summary>
            /// Returns metadata (number) associated with a particular row of RscControlsTable.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value scalar</returns>
            public static Value CtValue(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.CtValue(leftInstance, rightInstance));
            }

            /// <summary>
            /// Returns list of addons allowed to given curator. The addon names are not guaranteed to be all lower case
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value CuratorAddons(Value rightInstance)
            {
                return new Value(GameValueMethods.CuratorAddons(rightInstance));
            }

            /// <summary>
            /// Returns curator camera object.
            /// </summary>
            /// <returns>Value object</returns>
            public static Value CuratorCamera()
            {
                return new Value(GameValueMethods.CuratorCamera());
            }

            /// <summary>
            /// Returns all curator camera areas.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value CuratorCameraArea(Value rightInstance)
            {
                return new Value(GameValueMethods.CuratorCameraArea(rightInstance));
            }

            /// <summary>
            /// Returns ceiling height for curator camera.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value scalar</returns>
            public static Value CuratorCameraAreaCeiling(Value rightInstance)
            {
                return new Value(GameValueMethods.CuratorCameraAreaCeiling(rightInstance));
            }

            /// <summary>
            /// Returns current coeficient setting.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value scalar</returns>
            public static Value CuratorCoef(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.CuratorCoef(leftInstance, rightInstance));
            }

            /// <summary>
            /// Returns all editable objects which belong to a curator.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value CuratorEditableObjects(Value rightInstance)
            {
                return new Value(GameValueMethods.CuratorEditableObjects(rightInstance));
            }

            /// <summary>
            /// Returns all curator editing areas.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value CuratorEditingArea(Value rightInstance)
            {
                return new Value(GameValueMethods.CuratorEditingArea(rightInstance));
            }

            /// <summary>
            /// Returns type of edit areas assigned to curator (blacklist/whitelist).
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value bool</returns>
            public static Value CuratorEditingAreaType(Value rightInstance)
            {
                return new Value(GameValueMethods.CuratorEditingAreaType(rightInstance));
            }

            /// <summary>
            /// Returns Curator Editable Object under curator mouse pointer.
            /// </summary>
            /// <returns>Value object</returns>
            public static Value CuratorMouseOver()
            {
                return new Value(GameValueMethods.CuratorMouseOver());
            }

            /// <summary>
            /// Returns number of points that curator have. Points can be only in range from 0 to 1.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value scalar</returns>
            public static Value CuratorPoints(Value rightInstance)
            {
                return new Value(GameValueMethods.CuratorPoints(rightInstance));
            }

            /// <summary>
            /// Returns array with all objects that has curator registered and their settings.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value CuratorRegisteredObjects(Value rightInstance)
            {
                return new Value(GameValueMethods.CuratorRegisteredObjects(rightInstance));
            }

            /// <summary>
            /// Returns list of all curator selected items.
            /// </summary>
            /// <returns>Value array</returns>
            public static Value CuratorSelected()
            {
                return new Value(GameValueMethods.CuratorSelected());
            }

            /// <summary>
            /// Return current price for placing waypoints (curator specific).
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value scalar</returns>
            public static Value CuratorWaypointCost(Value rightInstance)
            {
                return new Value(GameValueMethods.CuratorWaypointCost(rightInstance));
            }

            /// <summary>
            /// Returns the currently performed editing operation in Eden Editor.
            /// </summary>
            /// <returns>Value string</returns>
            public static Value Current3DENOperation()
            {
                return new Value(GameValueMethods.Current3DENOperation());
            }

            /// <summary>
            /// Returns currently selected user chat channel on the UI (selected with < and > in multiplayer). Channel ID number correspondence Default Channels Custom Channels Global Side Command Group Vehicle Direct CC 1 CC 2 CC 3 CC 4 CC 5 CC 6 CC 7 CC 8 CC 9 CC 10 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 For Custom Radio, see radioChannelCreate.
            /// </summary>
            /// <returns>Value scalar</returns>
            public static Value CurrentChannel()
            {
                return new Value(GameValueMethods.CurrentChannel());
            }

            /// <summary>
            /// Return the current command type (empty string when no command) for the commander of given vehicle (or for a given soldier). Returned value can be one of: "WAIT" "ATTACK" "HIDE" "MOVE" "HEAL" "REPAIR" "REFUEL" "REARM" "SUPPORT" "JOIN" "GET IN" "FIRE" "GET OUT" "STOP" "EXPECT" "ACTION" "ATTACKFIRE" "Suppress"
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value string</returns>
            public static Value CurrentCommand(Value rightInstance)
            {
                return new Value(GameValueMethods.CurrentCommand(rightInstance));
            }

            /// <summary>
            /// Returns class name of currently loaded vehicle's / unit's magazine.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value string</returns>
            public static Value CurrentMagazine(Value rightInstance)
            {
                return new Value(GameValueMethods.CurrentMagazine(rightInstance));
            }

            /// <summary>
            /// Returns description of vehicle's currently loaded magazine, its ammo count (current/default) and its id.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value CurrentMagazineDetail(Value rightInstance)
            {
                return new Value(GameValueMethods.CurrentMagazineDetail(rightInstance));
            }

            /// <summary>
            /// Returns the class name of currently used magazine on specified turret. Use turret path [-1] for driver's turret. Note that a turret is not loaded until unit enters it, so this command will return "".
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value string</returns>
            public static Value CurrentMagazineDetailTurret(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.CurrentMagazineDetailTurret(leftInstance, rightInstance));
            }

            /// <summary>
            /// Returns the name of the type of the currently using magazine on specified turret. Use turret path [-1] for driver's turret. Note that a turret is not loaded until unit enters it, so this command will return "".
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value string</returns>
            public static Value CurrentMagazineTurret(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.CurrentMagazineTurret(leftInstance, rightInstance));
            }

            /// <summary>
            /// Returns a unit's current weapon muzzle. Does not work on vehicles.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value string</returns>
            public static Value CurrentMuzzle(Value rightInstance)
            {
                return new Value(GameValueMethods.CurrentMuzzle(rightInstance));
            }

            /// <summary>
            /// Returns the current global namespace the script runs in. Since Arma 3 v2.00, Namespaces can be compared with == and != operators in addition to isEqualTo.
            /// </summary>
            /// <returns>Value namespace</returns>
            public static Value CurrentNamespace()
            {
                return new Value(GameValueMethods.CurrentNamespace());
            }

            /// <summary>
            /// Returns the person piloting the vehicle. If co-pilot is piloting, co-pilot is returned. If you need current pilot of a UAV or UGV, see UAVControl command.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value object</returns>
            public static Value CurrentPilot(Value rightInstance)
            {
                return new Value(GameValueMethods.CurrentPilot(rightInstance));
            }

            /// <summary>
            /// Return current task of given person.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value task</returns>
            public static Value CurrentTask(Value rightInstance)
            {
                return new Value(GameValueMethods.CurrentTask(rightInstance));
            }

            /// <summary>
            /// Returns array with all  uncompleted tasks for the given agent. getVariable could be used on Task to get the following special local variables from the task: "_this" Team Member - the teamMember agent the task is assigned to "_taskType" String - the name of the task (see registeredTasks) "_thisCreated" Number - 1 or 0 "_thisRunning" Number - 1 or 0 "_totalCreated" Number - total number of tasks "_totalRunning" Number - total number of running tasks "_task"Task - often null
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value CurrentTasks(Value rightInstance)
            {
                return new Value(GameValueMethods.CurrentTasks(rightInstance));
            }

            /// <summary>
            /// Returns currently selected throwable, which will be launched if the user presses G.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value CurrentThrowable(Value rightInstance)
            {
                return new Value(GameValueMethods.CurrentThrowable(rightInstance));
            }

            /// <summary>
            /// Returns current vision mode of unit's weapon. Vision mode could be one of: 0 - normal vision 1 - night vision 2 - thermal vision Alternative syntaxes additionally return FLIR index (see setCamUseTI) of the thermal vision mode (See also  "VisionModeChanged" entity event handler)
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value CurrentVisionMode(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.CurrentVisionMode(leftInstance, rightInstance));
            }

            /// <summary>
            /// Returns the index of the current waypoint contrary to misleading name. To determine the validity of the index, compare it to the waypoints count. If all waypoints are completed, then the index is 1 greater than the last valid index. If there are no waypoints, then the index is 0. By default, a group has 1 waypoint at their starting position, which is considered completed and so the currentWaypoint is 1.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value scalar</returns>
            public static Value CurrentWaypoint(Value rightInstance)
            {
                return new Value(GameValueMethods.CurrentWaypoint(rightInstance));
            }

            /// <summary>
            /// Return the name of the currently selected weapon (on the primary turret for vehicles).
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value string</returns>
            public static Value CurrentWeapon(Value rightInstance)
            {
                return new Value(GameValueMethods.CurrentWeapon(rightInstance));
            }

            /// <summary>
            /// Returns current weapon mode of unit's weapon. Result can be: "Single", "Burst", "FullAuto", "manual", "player" ⚠This command will return 0 Number if given object is a vehicle instead of a person. You can alternatively use _muzzle = weaponState player select 2;
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value string</returns>
            public static Value CurrentWeaponMode(Value rightInstance)
            {
                return new Value(GameValueMethods.CurrentWeaponMode(rightInstance));
            }

            /// <summary>
            /// Returns the name of the currently selected weapon on specified turret. Use turret path [-1] for driver's turret.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value string</returns>
            public static Value CurrentWeaponTurret(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.CurrentWeaponTurret(leftInstance, rightInstance));
            }

            /// <summary>
            /// Returns current zeroing.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value CurrentZeroing(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.CurrentZeroing(leftInstance, rightInstance));
            }

            /// <summary>
            /// Returns the object under cursor. This command is quite different from cursorTarget as it is more precise in determining the boundaries of the pointed at object and can detect a larger variety of objects including map objects and trees.
            /// </summary>
            /// <returns>Value object</returns>
            public static Value CursorObject()
            {
                return new Value(GameValueMethods.CursorObject());
            }

            /// <summary>
            /// Returns the target pointed at by the player (usually with cross-hairs). The target has to be known to the player to some degree (knowsAbout > 0). If target is completely unknown, command returns objNull. A valid target could belong to an enemy or a friendly side. Buildings are normally known to player and so are valid targets. Try nearTargets to see what else is considered a target. While friendly targets are usually known to the player, enemy targets can be totally unknown, especially if "auto-spotting" (or sometimes called "auto-reporting") is switched off. To check if auto-spotting is enabled:difficultyEnabled "autospot" cursorTarget also returns locked target for the duration of the lock even if there is another target under the cursor. As soon as missile is fired, cursorTarget switches to current known target under cursor or objNull. Targeting (currently "T" in Arma 3) works regardless of the state of "auto-spotting". Adding a target to the known list could be done with reveal command. When auto-spotting is enabled, zooming on the enemy target with cross-hairs usually reveals the target. As friendly targets are always known, zooming on friendly target could improve knowsAbout value. Side Relations can also influence target knowledge. For example east target is unknown target for civilian, but making them friends with setFriend instantly improves civilian knowledge of the east.
            /// </summary>
            /// <returns>Value object</returns>
            public static Value CursorTarget()
            {
                return new Value(GameValueMethods.CursorTarget());
            }

            /// <summary>
            /// Sends the chat message to the custom radio channel. The radio channel needs to be created on the server before hand, with radioChannelCreate command. ⚠The unit must have an assigned radio item (such as "ItemRadio") to see or transmit the messages. A radio item must have the property simulation = "ItemRadio"; in its CfgWeapons config.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value CustomChat(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.CustomChat(leftInstance, rightInstance));
            }

            /// <summary>
            /// Sends the message to the custom radio channel. The message is defined in the description.ext file or radio protocol. ⚠The unit must have an assigned radio item (such as "ItemRadio") to see or transmit the messages. A radio item must have the property simulation = "ItemRadio"; in its CfgWeapons config. When transmitting unit gets killed, transmission will be interrupted. However when receiving unit gets killed, the transmission continues to play.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value CustomRadio(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.CustomRadio(leftInstance, rightInstance));
            }

            /// <summary>
            /// Returns player's custom waypoint (⇧ Shift + ) position.
            /// </summary>
            /// <returns>Value array</returns>
            public static Value CustomWaypointPosition()
            {
                return new Value(GameValueMethods.CustomWaypointPosition());
            }

            /// <summary>
            /// Terminates the effect in the given layer by fading it out according to the given duration. If named layer is used and it doesn't exist, it will be allocated. For title layer see titleFadeOut. For greater efficiency and ease of moddability, it is recommended to use named layers.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value CutFadeOut(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.CutFadeOut(leftInstance, rightInstance));
            }

            /// <summary>
            /// Displays an object defined in the global config in CfgTitles. For greater efficiency and ease of modability, it is recommended to use named layers with Syntax 3.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value CutObj(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.CutObj(leftInstance, rightInstance));
            }

            /// <summary>
            /// Display a resource defined in RscTitles of the mission's Description.ext, the campaign's description.ext or the global config. For greater efficiency and ease of modability, it is recommended to use named layers available with String and Syntax 2. ⚠To avoid conflicts with existing layers it is recommended to register a layer with BIS_fnc_rscLayer and to start the name with a TAG: ("TAG_myLayer" call BIS_fnc_rscLayer) cutRsc ["myRsc", "PLAIN"]; "TAG_myLayer" cutRsc ["myRsc", "PLAIN"];
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value CutRsc(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.CutRsc(leftInstance, rightInstance));
            }

            /// <summary>
            /// Displays a text message in the center of the screen. The text can be displayed on multiple lines by using "" new line characters: cutText ["line1line2line3", "PLAIN"]; For greater efficiency and ease of modability it is recommended to use named layers through the alternative syntax.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value CutText(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.CutText(leftInstance, rightInstance));
            }

            /// <summary>
            /// Return the damage value of an object.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value scalar</returns>
            public static Value Damage(Value rightInstance)
            {
                return new Value(GameValueMethods.Damage(rightInstance));
            }

            /// <summary>
            /// Return the actual in-mission date and time.
            /// </summary>
            /// <returns>Value array</returns>
            public static Value Date()
            {
                return new Value(GameValueMethods.Date());
            }

            /// <summary>
            /// Convert a date to a float number, based on Jan 1st 00:00:00 = 0 and Dec 31st  23:59:59 = 1. The same day and time in leap year will be different after 28th of February and 23:59 on 31st of December will be 1.00274. This is how this command works. The 365 days of the year are presented in range 0...1. So each day will be: 1 / 365 = 0.00273973 In a leap year there are 366 days, so the range will increase by 1 day: 1 / 365 * 366 = 1.00274 In short, in a normal year the command returns in range 0...1 in a leap year it will return in range 0...1.00274.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value scalar</returns>
            public static Value DateToNumber(Value rightInstance)
            {
                return new Value(GameValueMethods.DateToNumber(rightInstance));
            }

            /// <summary>
            /// Returns the current in-game time in hours. For a formatted version of time, see BIS_fnc_timeToString.
            /// </summary>
            /// <returns>Value scalar</returns>
            public static Value DayTime()
            {
                return new Value(GameValueMethods.DayTime());
            }

            /// <summary>
            /// Deactivates the given keyname for the current user profile. The keys are used to unlock missions or campaigns. See keys, keysLimit and doneKeys in the description.ext file of the missions.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value DeActivateKey(Value rightInstance)
            {
                return new Value(GameValueMethods.DeActivateKey(rightInstance));
            }

            /// <summary>
            /// Returns debriefing text of provided end.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value scalar</returns>
            public static Value DebriefingText(Value rightInstance)
            {
                return new Value(GameValueMethods.DebriefingText(rightInstance));
            }

            /// <summary>
            /// Dump (something about FSM) to debugging output. This command is (assumed to be) non-functional in the retail version. ⚠Non functional in retail
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value DebugFSM(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.DebugFSM(leftInstance, rightInstance));
            }

            /// <summary>
            /// Dump argument type and value to debugging output.  ⚠This command is non-functional in the retail version. Use diag_log instead.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value DebugLog(Value rightInstance)
            {
                return new Value(GameValueMethods.DebugLog(rightInstance));
            }

            /// <summary>
            /// Multiplies graph values by the given coefficient. The corresponding lower bound value is used instead if the product is smaller than the bound.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value DecayGraphValues(Value rightInstance)
            {
                return new Value(GameValueMethods.DecayGraphValues(rightInstance));
            }

            /// <summary>
            /// Defines a Switch Type default case - does not need a colon to define its block. See switch for more information.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value Default(Value rightInstance)
            {
                return new Value(GameValueMethods.Default(rightInstance));
            }

            /// <summary>
            /// Converts given value in radians to degrees. 1 degree equals 0.01745 radians or pi / 180. 2 * pi ≙ 360° → 1 rad = 2 * pi / 360°
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value scalar_nan</returns>
            public static Value Deg(Value rightInstance)
            {
                return new Value(GameValueMethods.Deg(rightInstance));
            }

            /// <summary>
            /// Delete given entities in Eden Editor.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value Delete3DENEntities(Value rightInstance)
            {
                return new Value(GameValueMethods.Delete3DENEntities(rightInstance));
            }

            /// <summary>
            /// Removes array element at the given 0-based index and returns removed element (modifies the original array, just like resize or set). This command will not issue error when -1 index is passed making it ideal for using with find (see Example 2) or findIf (see Example 3).
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value any</returns>
            public static Value DeleteAt(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.DeleteAt(leftInstance, rightInstance));
            }

            /// <summary>
            /// In a nutshell, this command removes gaming Side (see createCenter). If a side has >0 Groups it cannot be deleted. Center can only be created for: east, west, resistance, civilian and sideLogic, therefore only centers from the mentioned sides can be deleted. Old description: Destroys the AI center of the given side.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value DeleteCenter(Value rightInstance)
            {
                return new Value(GameValueMethods.DeleteCenter(rightInstance));
            }

            /// <summary>
            /// Delete a collection. As example, used with a soldier, it'll hide the ingame model. When targetting Arma 2 1.06 or newer, use hideObject instead. This function is a relic from dynamic building destruction development. It is left only for compatibility with scripts created before Arma 2 1.06, and its functionality may be changed or removed in the future.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value DeleteCollection(Value rightInstance)
            {
                return new Value(GameValueMethods.DeleteCollection(rightInstance));
            }

            /// <summary>
            /// Delete the editor object. Requires all editor object links to be removed prior.  Some Old Editor Command
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value any</returns>
            public static Value DeleteEditorObject(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.DeleteEditorObject(leftInstance, rightInstance));
            }

            /// <summary>
            /// Destroys the given group - the group must be empty and local to the machine executing this command. In Arma 3 you can find out locality of the group with local command, unlike with previous games. However owner and setOwner don't work with groups anywhere. The group will always be local to the client that created it, until the client disconnects, then the group becomes local to the server. So if you need to delete a group, delete all members first then execute deleteGroup where is it local. In Arma 3 when the last unit leaves a group, the group gets automatically deleted. Manually deleting all units from a group, however, does not automatically delete the empty group. To force the group to get auto-deleted when empty, use deleteGroupWhenEmpty.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value DeleteGroup(Value rightInstance)
            {
                return new Value(GameValueMethods.DeleteGroup(rightInstance));
            }

            /// <summary>
            /// Marks given group for auto-deletion when group is empty. true will mark the group for auto-deletion once empty, false will simply unmark the group that was marked previously. ⚠This command does not prevent group deletion (through e.g deleteGroup or any engine group management).
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value DeleteGroupWhenEmpty(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.DeleteGroupWhenEmpty(leftInstance, rightInstance));
            }

            /// <summary>
            /// Deletes an identity created with saveIdentity from the campaign's progress file.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value bool</returns>
            public static Value DeleteIdentity(Value rightInstance)
            {
                return new Value(GameValueMethods.DeleteIdentity(rightInstance));
            }

            /// <summary>
            /// Deletes scripted location.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value DeleteLocation(Value rightInstance)
            {
                return new Value(GameValueMethods.DeleteLocation(rightInstance));
            }

            /// <summary>
            /// Destroys the given marker.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value DeleteMarker(Value rightInstance)
            {
                return new Value(GameValueMethods.DeleteMarker(rightInstance));
            }

            /// <summary>
            /// Destroys the given marker.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value DeleteMarkerLocal(Value rightInstance)
            {
                return new Value(GameValueMethods.DeleteMarkerLocal(rightInstance));
            }

            /// <summary>
            /// Removes a range of array elements from the given array. Modifies the original array, just like resize or set.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value DeleteRange(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.DeleteRange(leftInstance, rightInstance));
            }

            /// <summary>
            /// Delete (unregister) resources of the team member. Resources are deleted in the order they were added. Case insensitive.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value DeleteResources(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.DeleteResources(leftInstance, rightInstance));
            }

            /// <summary>
            /// Removes the site. ⚠This command is considered deprecated and is no longer supported
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value DeleteSite(Value rightInstance)
            {
                return new Value(GameValueMethods.DeleteSite(rightInstance));
            }

            /// <summary>
            /// Deletes a status created with saveStatus from the campaign's progress file.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value bool</returns>
            public static Value DeleteStatus(Value rightInstance)
            {
                return new Value(GameValueMethods.DeleteStatus(rightInstance));
            }

            /// <summary>
            /// Destroy given team.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value DeleteTeam(Value rightInstance)
            {
                return new Value(GameValueMethods.DeleteTeam(rightInstance));
            }

            /// <summary>
            /// Deletes an object. Only objects inserted in the mission editor and objects created during the game's progress can be deleted by this command. Terrain objects and players cannot be deleted. The actual object deletion, when the object becomes objNull, happens on the next frame after command execution, but there are some object modifications that happen immediately. For example if the object is a unit in a group, it immediately becomes groupless (isNull group _unit; // true).
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value DeleteVehicle(Value rightInstance)
            {
                return new Value(GameValueMethods.DeleteVehicle(rightInstance));
            }

            /// <summary>
            /// Deletes a member of or the whole crew of a vehicle. Human players cannot be deleted. This command attempts to move the given crew member out before deleting it. Made especially for deleting dead crew members, as using conventional deleteVehicle leads to all sorts of bugs and ghost objects. While the argument is global, you should take extra steps and execute this where vehicle is local as moving units out of the vehicle happens where vehicle is local and you want this to always precede deletion.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value DeleteVehicleCrew(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.DeleteVehicleCrew(leftInstance, rightInstance));
            }

            /// <summary>
            /// Removes the specified waypoint. When a waypoint is deleted, all other group waypoints are immediately re-indexed. See Example 2 for a deletion of all group's waypoints. Deleting a group's current waypoint will not stop the group on its tracks.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value DeleteWaypoint(Value rightInstance)
            {
                return new Value(GameValueMethods.DeleteWaypoint(rightInstance));
            }

            /// <summary>
            /// Detaches previously attached with attachTo object.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value Detach(Value rightInstance)
            {
                return new Value(GameValueMethods.Detach(rightInstance));
            }

            /// <summary>
            /// Returns an array of all mines detected by a given side
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value DetectedMines(Value rightInstance)
            {
                return new Value(GameValueMethods.DetectedMines(rightInstance));
            }

            /// <summary>
            /// Tests whether any user dialog is open.
            /// </summary>
            /// <returns>Value bool</returns>
            public static Value Dialog()
            {
                return new Value(GameValueMethods.Dialog());
            }

            /// <summary>
            /// A non-existent Diary Record. To compare non-existent objects use isNull or isEqualTo: diaryRecordNull == diaryRecordNull;		// false isNull diaryRecordNull;						// true diaryRecordNull isEqualTo diaryRecordNull;	// true Before Arma 3 v2.00, isNull did not work with the diary record type and diaryRecordNull did not exist. In order to verify a null record, it is possible to create a variable and compare against it: private _diaryRecordNull = objNull createDiaryRecord []; private _createdRecord = player createDiaryRecord ["Diary", ["Title", "Description"]]; if (_createdRecord isEqualTo _diaryRecordNull) then { hint "Failed"; };
            /// </summary>
            /// <returns>Value task</returns>
            public static Value DiaryRecordNull()
            {
                return new Value(GameValueMethods.DiaryRecordNull());
            }

            /// <summary>
            /// Checks whether given subject is present in the Diary of given player.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value bool</returns>
            public static Value DiarySubjectExists(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.DiarySubjectExists(leftInstance, rightInstance));
            }

            /// <summary>
            /// Checks if the current client Joined In Progress.
            /// </summary>
            /// <returns>Value bool</returns>
            public static Value DidJIP()
            {
                return new Value(GameValueMethods.DidJIP());
            }

            /// <summary>
            /// Checks if the current owner of supplied Object Joined In Progress. Returns false on clients.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value bool</returns>
            public static Value DidJIPOwner(Value rightInstance)
            {
                return new Value(GameValueMethods.DidJIPOwner(rightInstance));
            }

            /// <summary>
            /// Returns high-level selected difficulty mode.    Returned value will be: 0 (Recruit), 1 (Regular), 2 (Veteran) or 3 (Elite)
            /// </summary>
            /// <returns>Value scalar</returns>
            public static Value Difficulty()
            {
                return new Value(GameValueMethods.Difficulty());
            }

            /// <summary>
            /// Checks specific difficulty settings of the current user. Difficulty flag names can be found in the ArmA profile file under class Difficulties/xxx/Flags (xxx being regular or veteran).
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value bool</returns>
            public static Value DifficultyEnabled(Value rightInstance)
            {
                return new Value(GameValueMethods.DifficultyEnabled(rightInstance));
            }

            /// <summary>
            /// Returns true if Advanced Flight Model is enabled. Forcing of rotorlib simulation could be done with mission param forceRotorLibSimulation.
            /// </summary>
            /// <returns>Value bool</returns>
            public static Value DifficultyEnabledRTD()
            {
                return new Value(GameValueMethods.DifficultyEnabledRTD());
            }

            /// <summary>
            /// Checks specific difficulty settings of the current user. Difficulty flag names can be found in the CfgDifficultyPresets config class or in ArmA profile file under class DifficultyPresets/xxx/Options (xxx being Recruit, Regular or Veteran). This command replaces difficultyEnabled as many options have multiple values and former command only provided Boolean return.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value scalar</returns>
            public static Value DifficultyOption(Value rightInstance)
            {
                return new Value(GameValueMethods.DifficultyOption(rightInstance));
            }

            /// <summary>
            /// Returns the direction an object or a location is facing (differs from getDir in that this also works with locations).
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value scalar</returns>
            public static Value Direction(Value rightInstance)
            {
                return new Value(GameValueMethods.Direction(rightInstance));
            }

            /// <summary>
            /// Get state of direction stabilization. This command returns true if the current optic mode of the selected turret has direction stabilization configured in config (directionStabilized) and if it is also not disabled by enableDirectionStabilization. This command can not be used to determine if the current optic of the turret has directionStabilized enabled in config.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value bool</returns>
            public static Value DirectionStabilizationEnabled(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.DirectionStabilizationEnabled(leftInstance, rightInstance));
            }

            /// <summary>
            /// Sends given audio message to the direct channel. Command operates just like xxxxRadio commands, but the sound is played over direct channel and is independent of fadeSound. The message is defined in CfgRadio in the description.ext file or config radio protocol or a kbAddTopic. The transmission will play only on the PC where command was executed. If you need the transmission to play on all computers, you have to execute it globally (see remoteExec).  When transmitting unit gets killed, transmission will be interrupted. However when receiving unit gets killed, the transmission continues to play.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value DirectSay(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.DirectSay(leftInstance, rightInstance));
            }

            /// <summary>
            /// Disables parts of the AI behaviour to get a better control over the actions of a unit. If the unit changes locality, this command might need to be executed again at the new locality to maintain effect. ⚠This command might cause unexpected behaviour when used on a player-controlled unit.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value DisableAI(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.DisableAI(leftInstance, rightInstance));
            }

            /// <summary>
            /// Disables autobrake, which is engaged when vehicle is stationary and stops wheels from rotating freely when vehicle is pushed.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value DisableBrakes(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.DisableBrakes(leftInstance, rightInstance));
            }

            /// <summary>
            /// Disable collision between provided objects. The collision is always disabled for both objects in the arguments. ⚠ this command does not disable collision between PhysX objects this command has to be executed where objects are local, and as long as they do not change locality, the effect of this command will be global: if the two objects are not local to the same computer, then it has to be executed on both computers to achieve the desired effect if one or both objects change locality, the command needs to be executed again on the new owner's machine(s) to maintain the effect the feature works by having an object registering a reference to the other object; this command stores such reference on both objects - see Example 3
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value DisableCollisionWith(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.DisableCollisionWith(leftInstance, rightInstance));
            }

            /// <summary>
            /// In theory disables the ability to talk to other people. In actuality, if true is given, the command increases unit's kbTell IsSpeaking status by 1, thus stopping unit from having a conversation. If false is given, the command decreases unit's kbTell IsSpeaking status by 1. The unit "is speaking" if IsSpeaking > 0.  ⚠kbTell IsSpeaking is a number that is increased or decreased by 1 internally. Default is 0, but it can be any positive or negative value. disableConversation allows to increase or decrease this number. When executed multiple times this can present an unexpected problem. Use conversationDisabled which returns true if this number > 0, to reset this number to 0 if necessary:  while {!conversationDisabled _unit} do {_unit disableConversation true}; while {conversationDisabled _unit} do {_unit disableConversation false};
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value DisableConversation(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.DisableConversation(leftInstance, rightInstance));
            }

            /// <summary>
            /// Disable debriefing score table. ⚠This command is broken.
            /// </summary>
            /// <returns>Value nothing</returns>
            public static Value DisableDebriefingStats()
            {
                return new Value(GameValueMethods.DisableDebriefingStats());
            }

            /// <summary>
            /// Command allows suppressing visualization of FRIENDLY, ENEMY, MINES and/or PING map indicators from difficulty setting EXTENDED MAP CONTENT.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value DisableMapIndicators(Value rightInstance)
            {
                return new Value(GameValueMethods.DisableMapIndicators(rightInstance));
            }

            /// <summary>
            /// Enables or disables transport NV (Night Vision). To disable TI (Thermal Imaging) use disableTIEquipment.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value DisableNVGEquipment(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.DisableNVGEquipment(leftInstance, rightInstance));
            }

            /// <summary>
            /// This command will halt raycasting calculations (on the local machine only) for all groups which don't contain any local entities. Units, that are not in a group with at least one local member, will not check visibility of other units. This will cause, that remote units will not have updated knowsAbout and it will save some CPU time. If a group contains a single local entity then calculations will still be performed for the entire group. These raycasts are used to determine what other entities an entity can see, and they take a lot of CPU time. This is of course a bit of a trick, because rather than a true optimization, it disables part of the simulation. However, there are certainly types of scenarios where these raycasts are not needed. An example is a fully Player-versus-Player scenario, where the visibility between every combination of player entity is not needed. So why not disable this by default? There are cases where you do require these raycasts, for example in stealth scenarios. Without them, commands like knowsAbout, nearTargets and targetKnowledge will only function for local units! The commands themselves are local, can be used on servers and clients, and the state is reset when the scenario ends. So, carefully consider whether your scenario can benefit from this method.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value DisableRemoteSensors(Value rightInstance)
            {
                return new Value(GameValueMethods.DisableRemoteSensors(rightInstance));
            }

            /// <summary>
            /// Disable saving of script containing this command. After this, the script can work with data types which do not support serialization (UI types). See Namespace serialization for more information. ⚠In Arma 2 and up to a certain version of Arma 3, giving a Display or Control to spawned code would raise an error due to the usage of the then non-serializable _this variable. Using disableSerialization or uiNamespace wouldn't help; the trick here is to pass the argument inside an array: _display = findDisplay 46;  _display spawn { hint str _this; };				// would raise a serialization error [_display] spawn { hint str (_this select 0); };	// OK
            /// </summary>
            /// <returns>Value nothing</returns>
            public static Value DisableSerialization()
            {
                return new Value(GameValueMethods.DisableSerialization());
            }

            /// <summary>
            /// Disables TI (Thermal Imaging) equipment for given vehicle. In older versions of Arma this command would also disable NV (Night Vision), but since Arma 3 v1.54 this command disables only TI. Use disableNVGEquipment to disable NV.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value DisableTIEquipment(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.DisableTIEquipment(leftInstance, rightInstance));
            }

            /// <summary>
            /// Disables unit's AV terminal(s) connecting to UAV.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value DisableUAVConnectability(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.DisableUAVConnectability(leftInstance, rightInstance));
            }

            /// <summary>
            /// Disables or enables the keyboard and mouse input. Usually used during cutscenes.⚠Be careful and responsible with the usage of this command. Once the user input is disabled, the only option left is to restart the game. Make sure you provide scripted mechanics to resolve this, should you need to disable user input for any reason.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value DisableUserInput(Value rightInstance)
            {
                return new Value(GameValueMethods.DisableUserInput(rightInstance));
            }

            /// <summary>
            /// Adds an event handler to the given display. See User Interface Event Handlers for the full list of event names. If applicable, see DIK_KeyCodes for a list of key code constants, which are relevant to key related user interface events like: KeyDown & KeyUp. ⚠Display EHs are processed from last to first added; an input override should be set up in the first added EH. The event handler ID can be accessed inside the event handler code using the _thisEventHandler magic variable.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value scalar</returns>
            public static Value DisplayAddEventHandler(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.DisplayAddEventHandler(leftInstance, rightInstance));
            }

            /// <summary>
            /// Returns child display of the given display.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value display</returns>
            public static Value DisplayChild(Value rightInstance)
            {
                return new Value(GameValueMethods.DisplayChild(rightInstance));
            }

            /// <summary>
            /// Return child control with specified idc.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value control</returns>
            public static Value DisplayCtrl(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.DisplayCtrl(leftInstance, rightInstance));
            }

            /// <summary>
            /// A non-existing Display. To compare non-existent displays use isNull or isEqualTo: displayNull == displayNull;		// false isNull displayNull;					// true displayNull isEqualTo displayNull;	// true
            /// </summary>
            /// <returns>Value display</returns>
            public static Value DisplayNull()
            {
                return new Value(GameValueMethods.DisplayNull());
            }

            /// <summary>
            /// Returns parent display of the given display.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value display</returns>
            public static Value DisplayParent(Value rightInstance)
            {
                return new Value(GameValueMethods.DisplayParent(rightInstance));
            }

            /// <summary>
            /// Remove all event handlers from the given display.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value DisplayRemoveAllEventHandlers(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.DisplayRemoveAllEventHandlers(leftInstance, rightInstance));
            }

            /// <summary>
            /// Remove a given event handler from the given display.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value DisplayRemoveEventHandler(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.DisplayRemoveEventHandler(leftInstance, rightInstance));
            }

            /// <summary>
            /// Sets given event handler of given display. The return code of the provided function should indicate whether this event was handled correctly. This implies telling the engine whether it is default code should be executed.  See User Interface Event Handlers for the full list of handler names. If applicable, see DIK KeyCodes for a list of key code constants, which are relevant to key related user interface events like onKeyDown and onKeyUp. ⚠When using the event names listed here with the ctrlAddEventHandler, ctrlSetEventHandler, displayAddEventHandler or displaySetEventHandler commands, the prefix "on" in the event name must be removed (e.g. 'ButtonDown' instead of 'onButtonDown').
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value DisplaySetEventHandler(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.DisplaySetEventHandler(leftInstance, rightInstance));
            }

            /// <summary>
            /// Get the provided display's UI On Texture unique name. See findDisplay to get a Display by its unique name.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value string</returns>
            public static Value DisplayUniqueName(Value rightInstance)
            {
                return new Value(GameValueMethods.DisplayUniqueName(rightInstance));
            }

            /// <summary>
            /// Set the provided display to update its UI On Texture render.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value DisplayUpdate(Value rightInstance)
            {
                return new Value(GameValueMethods.DisplayUpdate(rightInstance));
            }

            /// <summary>
            /// Dissolves the given team. All members become members of the main team.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value DissolveTeam(Value rightInstance)
            {
                return new Value(GameValueMethods.DissolveTeam(rightInstance));
            }

            /// <summary>
            /// Returns a distance in meters between Objects, Positions or Locations. ⚠If positions are supplied as arguments, the coordinates are treated as PositionAGL. If Position2D is supplied, z is assumed 0. If you need distance between two Position3D coordinates, use vectorDistance.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value scalar</returns>
            public static Value Distance(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.Distance(leftInstance, rightInstance));
            }

            /// <summary>
            /// Returns a 2D distance (distance projected to X,Y plane) in meters between Objects and/or Positions.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value scalar</returns>
            public static Value Distance2D(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.Distance2D(leftInstance, rightInstance));
            }

            /// <summary>
            /// Computes the squared distance between two objects or positions.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value scalar</returns>
            public static Value DistanceSqr(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.DistanceSqr(leftInstance, rightInstance));
            }

            /// <summary>
            /// Returns the numerical index for the distribution region of this copy of Armed Assault. USA Rest of the world
            /// </summary>
            /// <returns>Value scalar</returns>
            public static Value DistributionRegion()
            {
                return new Value(GameValueMethods.DistributionRegion());
            }

            /// <summary>
            /// Executes code. Used as part of a construct, such as while, with, for and switch. The code is always executed in missionNamespace unless do is used with with as an argument.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value any</returns>
            public static Value Do(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.Do(leftInstance, rightInstance));
            }

            /// <summary>
            /// Performs given Eden Editor action. ⚠Prior to Arma 3 2.12.150678 it was possible to use this command outside of Eden Editor. For example do3DENAction "MissionSave"; would wipe the mission.sqm without a way to restore it when executed accidentally during preview.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value Do3DENAction(Value rightInstance)
            {
                return new Value(GameValueMethods.Do3DENAction(rightInstance));
            }

            /// <summary>
            /// Orders an artillery unit to fire a burst on the given position (silently).
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value DoArtilleryFire(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.DoArtilleryFire(leftInstance, rightInstance));
            }

            /// <summary>
            /// Order the given unit(s) to fire on the given target (without radio messages). The target is set with doTarget or commandTarget. The target can be a unit or a vehicle, but not an object.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value DoFire(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.DoFire(leftInstance, rightInstance));
            }

            /// <summary>
            /// Order the given unit(s) to follow another from his own group as his formation leader (without radio messages). It is also used to order the unit to return to formation after e.g doStop even if it is the leader himself that should return to formation (see Example 2).
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value DoFollow(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.DoFollow(leftInstance, rightInstance));
            }

            /// <summary>
            /// Orders a unit to process command defined by FSM file (silently).  Unlike with execFSM where _this is passed to the FSM, the following parameters are passed when using doFSM/commandFSM: _leader leader of subgroup with this command _destination command destination/position _target command target _units list of all persons in subgroup
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value DoFSM(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.DoFSM(leftInstance, rightInstance));
            }

            /// <summary>
            /// Orders one or multiple units to get out from the vehicle (silently). Same as commandGetOut with latter being shown via radio chat. Notes: Works for both AI and player entities AI unit gets back in - unless is under player command or combined with other sqf commands (orderGetIn false, allowGetIn false or leaveVehicle) Ignores vehicle's lock state - unlike action "Eject" and moveOut AI waits for execution until vehicle has stopped/is no longer flying (unclear if any timeout exists for order to be discarded) - unlike action "Eject" and moveOut Plays the vehicle's position's get out animation (same as action "Eject") - unlike moveOut When execute for multiple units, it waits till the action is completed, before the next to take his turn (same as action "Eject") - unlike moveOut AI gets back into formation afterwards Works only on alive units - unlike action "Eject" (one after another) or moveOut (instantly) Does not work on unconscious - unless the AI is under player command. Unlike moveOut or action "Eject" (but one after another))
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value DoGetOut(Value rightInstance)
            {
                return new Value(GameValueMethods.DoGetOut(rightInstance));
            }

            /// <summary>
            /// Order the given unit(s) to move to the given position (without radio messages). Upon reaching its destination, if it is the group leader it will order the group to form around it's new position. If it is not the leader, it will immediately be ordered to return to formation by the group leader and begin moving back to the group. Use doStop to stop units returning to formation. moveToCompleted will return true when a unit issued this command reaches its destination.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value DoMove(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.DoMove(leftInstance, rightInstance));
            }

            /// <summary>
            /// Return animation phase of door on vehicle.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value scalar</returns>
            public static Value DoorPhase(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.DoorPhase(leftInstance, rightInstance));
            }

            /// <summary>
            /// Order the given unit(s) to stop (without radio messages). The units stopped in this way will leave the groups formation. It will prevent them from moving around with their group (or formation leader), while still being able to turn around and even move to a new position if they see fit. The units will still respond to orders from their group leader (like engage, rearm, board a vehicle), but all of their actions will be separate from the group formation. To resume group default behaviour, use doFollow command. For example: units _group doFollow leader _group;
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value DoStop(Value rightInstance)
            {
                return new Value(GameValueMethods.DoStop(rightInstance));
            }

            /// <summary>
            /// Orders the given unit or a group of units to suppress the given position or target (without radio messages, see commandSuppressiveFire is you need messages).  When an Array of units is passed as param, only units from the same Group as the first unit in array are considered. The unit (units) starts firing at the given target or position random amount of shots (exact formula unknown, but seems to depend on amount of ammo unit has) after which it stops. currentCommand shows "Suppress" and there is no way of stopping unit before it completes random amount of rounds. If position is passed as target param, it stays fixed. If object is passed as target param, it depends on what kind of object. If it is considered a proper target by the unit, it is tracked by the unit dynamically. If it is not, the position gets obtained via getPosWorld, which could be different from PositionASL of the object, and it is fixed even if the target is able to change position later.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value DoSuppressiveFire(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.DoSuppressiveFire(leftInstance, rightInstance));
            }

            /// <summary>
            /// Order the given unit(s) to target the given target (without radio messages).Targeting can be stopped by _unit doWatch objNull; or_unit commandWatch objNull;
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value DoTarget(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.DoTarget(leftInstance, rightInstance));
            }

            /// <summary>
            /// Order the given unit(s) to watch the given position or target (without radio messages). Use objNull as the target to order a unit to stop watching a position/target.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value DoWatch(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.DoWatch(leftInstance, rightInstance));
            }

            /// <summary>
            /// Draws a single line arrow on the map. As this command needs to be called every frame, it is preferable using the onDraw UI Event Handler. To draw a color filled arrow of custom shape see BIS_fnc_drawArrow.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value DrawArrow(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.DrawArrow(leftInstance, rightInstance));
            }

            /// <summary>
            ///  Draws an ellipse on the map. Just like with marker or trigger area, negative a and b will result in hexagon.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value DrawEllipse(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.DrawEllipse(leftInstance, rightInstance));
            }

            /// <summary>
            /// Draws an icon on the map. As this command needs to be called every frame, it is preferable using the onDraw UI Event Handler. Some useful icons can be found in configFile >> "CfgVehicleIcons".
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value DrawIcon(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.DrawIcon(leftInstance, rightInstance));
            }

            /// <summary>
            /// Draws an icon at the given position in the game world. This command has to be executed every frame. Use the Draw3D Mission Event Handler (which is executed every frame if the user can see the icon). In order for the results of this command to be visible through a custom camera, enable HUD with cameraEffectEnableHUD. showHUD false will hide the icon drawn by this command. In order for arrows to appear, the icon texture should exist. The arrow size is proportionate to the icon size. To avoid flickering and ensure visual fidelity, always use the visual (render time scope) variant of position commands, such as getPosASLVisual. The width and height parameters are multipliers for activeWidth and activeHeight set in config. So for example, if one needs to create an icon half the screen wide (safeZoneW / 2) and half the screen tall (safeZoneH / 2), divide these by the config values respectfully: private _iconWidth = (safeZoneW / 2) / getNumber (configFile >> "CfgInGameUI" >> "Cursor" >> "activeWidth"); private _iconHeight = (safeZoneH / 2) / getNumber (configFile >> "CfgInGameUI" >> "Cursor" >> "activeHeight");
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value DrawIcon3D(Value rightInstance)
            {
                return new Value(GameValueMethods.DrawIcon3D(rightInstance));
            }

            /// <summary>
            /// Draws a laserbeam and a lightpoint at the impact location of the laser. This command has to be executed every frame - see Arma 3: Mission Event Handlers - Draw3D. Lasers drawn with this command are subject to the same limitations as weapon attachment lasers. These limitations are defined in the CfgIRLaserSettings config class.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value DrawLaser(Value rightInstance)
            {
                return new Value(GameValueMethods.DrawLaser(rightInstance));
            }

            /// <summary>
            /// Draw a line on the map. Can decrease framerate!
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value DrawLine(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.DrawLine(leftInstance, rightInstance));
            }

            /// <summary>
            /// Draws a line of a given colour between two 3D positions in the current frame. To be used mostly in a "Draw3D" mission event handler.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value DrawLine3D(Value rightInstance)
            {
                return new Value(GameValueMethods.DrawLine3D(rightInstance));
            }

            /// <summary>
            /// The editor will draw a line between the two specified editor objects. Line type can be LINE or ARROW.  Some Old Editor Command
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value DrawLink(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.DrawLink(leftInstance, rightInstance));
            }

            /// <summary>
            /// Used to draw locations in 2D Editor.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value DrawLocation(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.DrawLocation(leftInstance, rightInstance));
            }

            /// <summary>
            /// Draws given polygon on the given map control with given color. The polygon must consist of at least 3 points. Unlike with other draw* commands and due to complexity, this command does not support filling of the polygon with color. Use drawTriangle command to construct and fill polygon shape as a workaround.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value DrawPolygon(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.DrawPolygon(leftInstance, rightInstance));
            }

            /// <summary>
            /// Draws a rectangle on the map. 
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value DrawRectangle(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.DrawRectangle(leftInstance, rightInstance));
            }

            /// <summary>
            /// Draws one to multiple triangles on the map. When fill param is absent or is an empty string "", the triangle is drawn with lines of the color set in color param. In order to draw color-filled triangle of the same color as color param, set fill param to opaque white procedural texture"#(rgb,1,1,1)color(1,1,1,1)".
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value DrawTriangle(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.DrawTriangle(leftInstance, rightInstance));
            }

            /// <summary>
            /// Returns the driver of a vehicle.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value object</returns>
            public static Value Driver(Value rightInstance)
            {
                return new Value(GameValueMethods.Driver(rightInstance));
            }

            /// <summary>
            /// Creates a particle effect. This command is used to create smoke, fire and similar effects. The particles are single polygons with single textures that always face the player. They can be set to dynamically change their position, size, direction, can be set to different weights and to be more or less dependent on the wind.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value Drop(Value rightInstance)
            {
                return new Value(GameValueMethods.Drop(rightInstance));
            }

            /// <summary>
            /// A getter for setDynamicSimulationDistance.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value scalar</returns>
            public static Value DynamicSimulationDistance(Value rightInstance)
            {
                return new Value(GameValueMethods.DynamicSimulationDistance(rightInstance));
            }

            /// <summary>
            /// A getter for setDynamicSimulationDistanceCoef
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value scalar</returns>
            public static Value DynamicSimulationDistanceCoef(Value rightInstance)
            {
                return new Value(GameValueMethods.DynamicSimulationDistanceCoef(rightInstance));
            }

            /// <summary>
            /// A getter for enableDynamicSimulation.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value bool</returns>
            public static Value DynamicSimulationEnabled(Value rightInstance)
            {
                return new Value(GameValueMethods.DynamicSimulationEnabled(rightInstance));
            }

            /// <summary>
            /// A getter for enableDynamicSimulationSystem
            /// </summary>
            /// <returns>Value bool</returns>
            public static Value DynamicSimulationSystemEnabled()
            {
                return new Value(GameValueMethods.DynamicSimulationSystemEnabled());
            }

            /// <summary>
            /// Pre-defined variable for the eastern side.
            /// </summary>
            /// <returns>Value side</returns>
            public static Value East()
            {
                return new Value(GameValueMethods.East());
            }

            /// <summary>
            /// Sends any text into the debugger console or the logfile. This command is only present in internal version  not in the retail version. Use diag_log instead!
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value Echo(Value rightInstance)
            {
                return new Value(GameValueMethods.Echo(rightInstance));
            }

            /// <summary>
            /// Open a window with scenario attribute in given section.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value Edit3DENMissionAttributes(Value rightInstance)
            {
                return new Value(GameValueMethods.Edit3DENMissionAttributes(rightInstance));
            }

            /// <summary>
            /// Show the edit object dialog for the given object.  Some Old Editor Command
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value any</returns>
            public static Value EditObject(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.EditObject(leftInstance, rightInstance));
            }

            /// <summary>
            /// Sets given event handler of given editor. Some Old Editor Command
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value EditorSetEventHandler(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.EditorSetEventHandler(leftInstance, rightInstance));
            }

            /// <summary>
            /// Returns the effective commander of the vehicle. Effective commander is the player whom driver AI will listen to. So if in a tank there is a gunner and a commander and AI driver, if the effectiveCommander is gunner, then gunner pressing WASD will give AI orders to move. If gunner jumps out and then enters tank again, the effectiveCommander role most likely has changed to commander that remained in tank. Also the assignment seems to work on first come first served basis.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value object</returns>
            public static Value EffectiveCommander(Value rightInstance)
            {
                return new Value(GameValueMethods.EffectiveCommander(rightInstance));
            }

            /// <summary>
            /// Elevates periscope of a vehicle. Vehicles in Arma 3 which are compatible with this tech are Strider, remote laser designators, the robot arm on Eddie, etc. Please note that SDV submarine has a different periscope, which is just an animated selection and could be raised and lowered with animate command. a user can immediately override any elevation in progress by using assigned keyboard keys. To block user input see the blockUserInput parameter. a PeriscopeElevationChanged entity event handler is also provided.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value ElevatePeriscope(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.ElevatePeriscope(leftInstance, rightInstance));
            }

            /// <summary>
            /// Executes else code when if condition returns false.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value Else(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.Else(leftInstance, rightInstance));
            }

            /// <summary>
            /// Returns the number of given empty positions in the vehicle. To return the actual units in the vehicle use fullCrew. However if only the number is desired, use emptyPositions because it is faster.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value scalar</returns>
            public static Value EmptyPositions(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.EmptyPositions(leftInstance, rightInstance));
            }

            /// <summary>
            /// Enables parts of the AI behavior that was disabled by disableAI.  ⚠When player switches and leaves behind AI unit, you need to enable "TeamSwitch" AI on it _unit enableAI "TeamSwitch" so that the unit continues with waypoints Since Arma 3 v1.96 it is possible to return the state of the given AI flag via checkAIFeature or set it using alias command enableAIFeature
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value EnableAI(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.EnableAI(leftInstance, rightInstance));
            }

            /// <summary>
            /// Enables/disables given AI feature.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value EnableAIFeature(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.EnableAIFeature(leftInstance, rightInstance));
            }

            /// <summary>
            /// Set whether animation's aim precision affects weapon sway.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value EnableAimPrecision(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.EnableAimPrecision(leftInstance, rightInstance));
            }

            /// <summary>
            /// Set if leader can issue attack commands to the soldiers in his group.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value EnableAttack(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.EnableAttack(leftInstance, rightInstance));
            }

            /// <summary>
            /// Enable/disable an audio feature, features are: "lowpass", "building_interior". Since v2.14 it is possible to enable "building_interior" on an object placed in a building. When used on object in multiplayer, remoteExec the command globally with JIP queue enabled, for example [_obj, ["building_interior", true]] remoteExec ["enableAudioFeature", 0, _obj]; Since Arma 2.14 if 'enable' argument is omitted, the command returns the current state of the feature.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value bool</returns>
            public static Value EnableAudioFeature(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.EnableAudioFeature(leftInstance, rightInstance));
            }

            /// <summary>
            /// Toggle availability of the automated helicopter start-up and shutdown sequences. For this command to have any effect, the Advanced Flight Model (AFM) has to be enabled. AFM status can be checked with difficultyEnabledRTD.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value EnableAutoStartUpRTD(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.EnableAutoStartUpRTD(leftInstance, rightInstance));
            }

            /// <summary>
            /// Toggle auto-trim for RTD helicopters.  For this command to have any effect, the Advanced Flight Model (AFM) has to be enabled. AFM status can be checked with difficultyEnabledRTD.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value bool</returns>
            public static Value EnableAutoTrimRTD(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.EnableAutoTrimRTD(leftInstance, rightInstance));
            }

            /// <summary>
            /// Allows camera shake effects via addCamShake. If set to false, then a currently active shake effect will stop immediately. By default, shake effects are enabled, but once they have been disabled by this command, they will have to be enabled first, in order to be visible.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value EnableCamShake(Value rightInstance)
            {
                return new Value(GameValueMethods.EnableCamShake(rightInstance));
            }

            /// <summary>
            /// Enable/disable caustics drawing.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value EnableCaustics(Value rightInstance)
            {
                return new Value(GameValueMethods.EnableCaustics(rightInstance));
            }

            /// <summary>
            /// Enables/disables UI functionality which is responsible for sending text or voice chat to the given chat channel. This command: can override Description.ext or server.cfg's channel setting cannot disable Global channel for the admin or server host, because Global channel is always available for the admin does not disable incoming text or voice actively interrupts (since Arma 3 v2.02) the current communication in progress does not affect chat related scripting commands such as vehicleChat, globalRadio etc. Channel ID number correspondence Default Channels Custom Channels Global Side Command Group Vehicle Direct CC 1 CC 2 CC 3 CC 4 CC 5 CC 6 CC 7 CC 8 CC 9 CC 10 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value EnableChannel(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.EnableChannel(leftInstance, rightInstance));
            }

            /// <summary>
            /// Cancels the effects of disableCollisionWith. The collision is always enabled for both objects in the arguments, i.e. vehicle1 with vehicle2 and vehicle2 with vehicle1 ⚠Each object can contain only 1 reference to the object it disabled collision with. This command sets this reference to null. Therefore the command might not work as expected when trying to enable collisions with some objects but not other.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value EnableCollisionWith(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.EnableCollisionWith(leftInstance, rightInstance));
            }

            /// <summary>
            /// Enables copilot actions, toggles availability of the actions related to copilots, such as taking over controls, suspending controls, etc. This command triggers the "ControlsShifted" event handler.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value EnableCopilot(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.EnableCopilot(leftInstance, rightInstance));
            }

            /// <summary>
            /// Enable debriefing score table.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value EnableDebriefingStats(Value rightInstance)
            {
                return new Value(GameValueMethods.EnableDebriefingStats(rightInstance));
            }

            /// <summary>
            /// Enable or disable the legend for diagnostics. Internal dev only!
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value EnableDiagLegend(Value rightInstance)
            {
                return new Value(GameValueMethods.EnableDiagLegend(rightInstance));
            }

            /// <summary>
            /// Enables / disables direction stabilization of turrets. This command only has an effect if the current optic mode of the selected turret has directionStabilized configured in config.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value EnableDirectionStabilization(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.EnableDirectionStabilization(leftInstance, rightInstance));
            }

            /// <summary>
            /// Enables or disables Arma 3: Dynamic Simulation for given non AI object.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value EnableDynamicSimulation(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.EnableDynamicSimulation(leftInstance, rightInstance));
            }

            /// <summary>
            /// Enables or disables the whole Arma 3: Dynamic Simulation system
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value EnableDynamicSimulationSystem(Value rightInstance)
            {
                return new Value(GameValueMethods.EnableDynamicSimulationSystem(rightInstance));
            }

            /// <summary>
            /// Enables the execution of a custom camera sequence after the players death, coded in onPlayerKilled.sqs.
            /// </summary>
            /// <returns>Value nothing</returns>
            public static Value EnableEndDialog()
            {
                return new Value(GameValueMethods.EnableEndDialog());
            }

            /// <summary>
            /// Enable/disable the artillery engine. This allows the user to use the artillery computer on mortar/artillery, and for AI to use it for indirect fire.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value EnableEngineArtillery(Value rightInstance)
            {
                return new Value(GameValueMethods.EnableEngineArtillery(rightInstance));
            }

            /// <summary>
            /// Enable/disable environmental effects: ambient life and/or ambient sound. This command has to be executed after mission start: be sure to use e.g sleep 0.1; for it to take effect. Influenced sounds among others are: bird sounds insect sounds waves wind rain sounds produced by air conditioners and similar 2.06 thunder (an already started sound will not be cut but future ones will be prevented)
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value EnableEnvironment(Value rightInstance)
            {
                return new Value(GameValueMethods.EnableEnvironment(rightInstance));
            }

            /// <summary>
            /// Enables/Disables the person's fatigue.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value EnableFatigue(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.EnableFatigue(leftInstance, rightInstance));
            }

            /// <summary>
            /// Toggles the target group's gun light(s).
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value EnableGunLights(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.EnableGunLights(leftInstance, rightInstance));
            }

            /// <summary>
            /// Controls availability of component to given object info panel.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value bool</returns>
            public static Value EnableInfoPanelComponent(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.EnableInfoPanelComponent(leftInstance, rightInstance));
            }

            /// <summary>
            /// Allows the AI to use IR lasers. Units should be in "Combat" behaviour.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value EnableIRLasers(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.EnableIRLasers(leftInstance, rightInstance));
            }

            /// <summary>
            /// Enables/disables mimics on a given unit.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value EnableMimics(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.EnableMimics(leftInstance, rightInstance));
            }

            /// <summary>
            /// Enables or disables firing from a vehicle cargo position. To get the turret path use assignedVehicleRole or getCargoIndex command.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value EnablePersonTurret(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.EnablePersonTurret(leftInstance, rightInstance));
            }

            /// <summary>
            /// Enable and disable radio messages to be heard and shown in the left lower corner of the screen - the order-giving unit can still be heard direct-talking when in its vicinity. The AI will still follow orders. This command can be helpful during cutscenes.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value EnableRadio(Value rightInstance)
            {
                return new Value(GameValueMethods.EnableRadio(rightInstance));
            }

            /// <summary>
            /// Enable / disable reload when magazine is empty.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value EnableReload(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.EnableReload(leftInstance, rightInstance));
            }

            /// <summary>
            /// Enables or disables the ability to be attached to a rope end for the given entity.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value EnableRopeAttach(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.EnableRopeAttach(leftInstance, rightInstance));
            }

            /// <summary>
            /// Enables/Disables satellite normal map or detail maps.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value EnableSatNormalOnDetail(Value rightInstance)
            {
                return new Value(GameValueMethods.EnableSatNormalOnDetail(rightInstance));
            }

            /// <summary>
            /// Enable / disable saving of the game with an optional autosave.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value EnableSaving(Value rightInstance)
            {
                return new Value(GameValueMethods.EnableSaving(rightInstance));
            }

            /// <summary>
            /// Enables radio transmissions to be heard and seen on screen. It does not affect KBTell conversations.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value EnableSentences(Value rightInstance)
            {
                return new Value(GameValueMethods.EnableSentences(rightInstance));
            }

            /// <summary>
            /// Enables / disables simulation for the given entity, e.g its animation and physics; it will still be able to take damage and report enemies. This command will affect entity simulation only locally. For a global and JIP enabled alternative, see enableSimulationGlobal.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value EnableSimulation(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.EnableSimulation(leftInstance, rightInstance));
            }

            /// <summary>
            /// Enable or disable simulation for given entity, globally. Has the same effect as enableSimulation when used in singleplayer.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value EnableSimulationGlobal(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.EnableSimulationGlobal(leftInstance, rightInstance));
            }

            /// <summary>
            /// Enable/disable stamina system
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value EnableStamina(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.EnableStamina(leftInstance, rightInstance));
            }

            /// <summary>
            /// Toggles stress damage in  Advanced Flight Model, which otherwise could be manually toggles in game setting: Options > Game > Helicopter Flight Model > Advanced > Stress Damage. For this command to have any effect, the Advanced Flight Model (AFM) has to be enabled. AFM status can be checked with difficultyEnabledRTD.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value EnableStressDamage(Value rightInstance)
            {
                return new Value(GameValueMethods.EnableStressDamage(rightInstance));
            }

            /// <summary>
            /// Enable / disable Team Switch. The default setting is enabled.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value EnableTeamSwitch(Value rightInstance)
            {
                return new Value(GameValueMethods.EnableTeamSwitch(rightInstance));
            }

            /// <summary>
            /// Enable ambient traffic. This command does nothing in Arma 3.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value EnableTraffic(Value rightInstance)
            {
                return new Value(GameValueMethods.EnableTraffic(rightInstance));
            }

            /// <summary>
            /// Enables unit's AV terminal(s) connecting to UAV.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value EnableUAVConnectability(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.EnableUAVConnectability(leftInstance, rightInstance));
            }

            /// <summary>
            /// Enables/disables the option for player to set waypoints for UAV in AV terminal.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value EnableUAVWaypoints(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.EnableUAVWaypoints(leftInstance, rightInstance));
            }

            /// <summary>
            /// Enable/disable option to transport other vehicles (if configured) or be transported.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value EnableVehicleCargo(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.EnableVehicleCargo(leftInstance, rightInstance));
            }

            /// <summary>
            /// Enable/disable given sensor
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value EnableVehicleSensor(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.EnableVehicleSensor(leftInstance, rightInstance));
            }

            /// <summary>
            /// Enables or disables disassembly of static weapons. Could be applied to local player, to another unit or to static weapon directly.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value EnableWeaponDisassembly(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.EnableWeaponDisassembly(leftInstance, rightInstance));
            }

            /// <summary>
            /// Creates a string containing a line break, similar to lineBreak for text. The name is inspired by c++ std::endl (end line). The command returns "\r", which contains control characters rather than printable characters: hint str count "\r";	// 4 hint str count endl;	// 2 The line break works for diag_log and ctrlSetText. It does not work with the hint because hint interprets printable "" as line break instead. Alternatively one can use toString command to get other characters.
            /// </summary>
            /// <returns>Value string</returns>
            public static Value Endl()
            {
                return new Value(GameValueMethods.Endl());
            }

            /// <summary>
            /// Finishes loading screen started by startLoadingScreen. Use BIS_fnc_endLoadingScreen to prevent potential usage conflicts.
            /// </summary>
            /// <returns>Value nothing</returns>
            public static Value EndLoadingScreen()
            {
                return new Value(GameValueMethods.EndLoadingScreen());
            }

            /// <summary>
            /// Finish the mission. Mission saves are deleted. Use failMission if they should not be. To maintain Arma 3 visual style, it is recommended to use BIS_fnc_endMission instead.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value EndMission(Value rightInstance)
            {
                return new Value(GameValueMethods.EndMission(rightInstance));
            }

            /// <summary>
            /// Activates and deactivates the engine of a vehicle.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value EngineOn(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.EngineOn(leftInstance, rightInstance));
            }

            /// <summary>
            /// Returns which engines are producing some work. For this command to have any effect, the Advanced Flight Model (AFM) has to be enabled. AFM status can be checked with difficultyEnabledRTD.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value EnginesIsOnRTD(Value rightInstance)
            {
                return new Value(GameValueMethods.EnginesIsOnRTD(rightInstance));
            }

            /// <summary>
            /// Returns power produced by engines in Watts. For this command to have any effect, the Advanced Flight Model (AFM) has to be enabled. AFM status can be checked with difficultyEnabledRTD.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value EnginesPowerRTD(Value rightInstance)
            {
                return new Value(GameValueMethods.EnginesPowerRTD(rightInstance));
            }

            /// <summary>
            /// Returns all engines RPM.For this command to have any effect, the Advanced Flight Model (AFM) has to be enabled. AFM status can be checked with difficultyEnabledRTD.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value EnginesRpmRTD(Value rightInstance)
            {
                return new Value(GameValueMethods.EnginesRpmRTD(rightInstance));
            }

            /// <summary>
            /// Torque produced by engines in N·m (Newton × meter). For this command to have any effect, the Advanced Flight Model (AFM) has to be enabled. AFM status can be checked with difficultyEnabledRTD.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value EnginesTorqueRTD(Value rightInstance)
            {
                return new Value(GameValueMethods.EnginesTorqueRTD(rightInstance));
            }

            /// <summary>
            /// Returns a list of all alive and dead entities of the given type or deriving from the given type. Units in vehicles are ignored with the primary syntax. Optimisation tip: Keep number of types in both includeTypes and excludeTypes arrays to a minimum by possibly using parent/base classes.If you have to use several types, arrange them in order so that the more common types go at the beginning of the array.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value Entities(Value rightInstance)
            {
                return new Value(GameValueMethods.Entities(rightInstance));
            }

            /// <summary>
            /// Returns status of enableEnvironment command
            /// </summary>
            /// <returns>Value array</returns>
            public static Value EnvironmentEnabled()
            {
                return new Value(GameValueMethods.EnvironmentEnabled());
            }

            /// <summary>
            /// Returns the current environment volume (set by fadeEnvironment)
            /// </summary>
            /// <returns>Value scalar</returns>
            public static Value EnvironmentVolume()
            {
                return new Value(GameValueMethods.EnvironmentVolume());
            }

            /// <summary>
            /// Returns current state for NVG and TI equipment availability.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value EquipmentDisabled(Value rightInstance)
            {
                return new Value(GameValueMethods.EquipmentDisabled(rightInstance));
            }

            /// <summary>
            /// Estimated end of MP game in seconds converted to serverTime.
            /// </summary>
            /// <returns>Value scalar</returns>
            public static Value EstimatedEndServerTime()
            {
                return new Value(GameValueMethods.EstimatedEndServerTime());
            }

            /// <summary>
            /// Sets the estimated time left in the game that is shown in the "Game in progress" screen or in the master browser. This command will force the server to broadcast serverTime to all clients without waiting for the next broadcast window (usually every 5 minutes).
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value EstimatedTimeLeft(Value rightInstance)
            {
                return new Value(GameValueMethods.EstimatedTimeLeft(rightInstance));
            }

            /// <summary>
            /// Return argument in mission editor of a given object.  Some Old Editor Command
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value any</returns>
            public static Value EvalObjectArgument(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.EvalObjectArgument(leftInstance, rightInstance));
            }

            /// <summary>
            /// Returns array of backpacks stored in given crate or vehicle. Used for accessing backpack content of a backpack on ground.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value EveryBackpack(Value rightInstance)
            {
                return new Value(GameValueMethods.EveryBackpack(rightInstance));
            }

            /// <summary>
            /// Returns array of all containers (uniforms, vests, backpacks) stored in given crate or vehicle. Used for accessing containers content stored in ammo box or ground holder.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value EveryContainer(Value rightInstance)
            {
                return new Value(GameValueMethods.EveryContainer(rightInstance));
            }

            /// <summary>
            /// Execute a script using (the deprecated but still available) SQS Syntax. SQF Syntax (and execVM) is the most recent scripting language. The magic variable _time used within the script contains the elapsed time in seconds since the script started. To see the active SQS scripts currently in the scheduler, use diag_activeSQSScripts command.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value Exec(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.Exec(leftInstance, rightInstance));
            }

            /// <summary>
            /// Execute an editor script for the specified object. Some Old Editor Command
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value any</returns>
            public static Value ExecEditorScript(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.ExecEditorScript(leftInstance, rightInstance));
            }

            /// <summary>
            /// Execute scripted FSM and return the FSM handle or 0 when failed. The FSM file is first searched in the mission folder, then in the campaign scripts folder and finally in the global scripts folder. Argument (if any) are available in _this variable inside FSM. Variables set inside FSMs can be read/modified externally, using setFSMVariable and getFSMVariable commands. The return value is the FSM handle; it can be used to determine (via completedFSM) when the FSM has finished. In Arma 3, the FSM handle is also available within the FSM through the _thisFSM variable. Scripted FSMs are added into the scheduler just like exec scripts, execVM scripts and spawn scripts. To see what FSMs are currently in the scheduler, use diag_activeMissionFSMs command. ⚠While the code placed into any of the sections of FSM cannot be suspended (canSuspend is false), the FSM itself is suspended every simulation between the state's init and precondition (exception is the init state). This is the only place where scripted FSM is suspended/resumed. The usual difference between the state's init and precondition is 1 frame but if the scheduler is busy it can take longer. See FSM for more information about FSM's structure.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value scalar</returns>
            public static Value ExecFSM(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.ExecFSM(leftInstance, rightInstance));
            }

            /// <summary>
            /// Compiles and adds an SQF script to the scheduler queue and returns script handle (see also Example 4). The script does not execute immediately upon running execVM command but with some delay depending on the VM's scripts queue and engine load. If the same script is to be executed more than one time, declaring it as a Function is recommended to avoid recompiling and wasting performance with every execution. The script is searched for in the following directories in that order: mission directory campaign scripts directory global scripts directory. To see what VM scripts are currently in the scheduler, use diag_activeSQFScripts command. ⚠ The .sqf file extension is not mandatory but is strongly recommended as using non-standard extensions may cause problems during binarisation If the script file is not prepared using UTF-8 encoding and contains some characters with codes > 127, they might convert incorrectly.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value script</returns>
            public static Value ExecVM(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.ExecVM(leftInstance, rightInstance));
            }

            /// <summary>
            /// Stops the execution of a SQS script. It is ignored in SQF Scripts.
            /// </summary>
            /// <returns>Value nothing</returns>
            public static Value Exit()
            {
                return new Value(GameValueMethods.Exit());
            }

            /// <summary>
            /// Exits the current code scope. Often used for exiting do, for, count, forEach or the whole script. See Variables - Local Variables Scope for more information.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value any</returns>
            public static Value ExitWith(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.ExitWith(leftInstance, rightInstance));
            }

            /// <summary>
            /// Exponential function with the base e. Equal to e^x.  See how green and blue are identical except for the offset
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value scalar_nan</returns>
            public static Value Exp(Value rightInstance)
            {
                return new Value(GameValueMethods.Exp(rightInstance));
            }

            /// <summary>
            /// Return expected destination of unit as an array.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value ExpectedDestination(Value rightInstance)
            {
                return new Value(GameValueMethods.ExpectedDestination(rightInstance));
            }

            /// <summary>
            /// Export list of JIP to a file. Special: BattlEye's RCON variant of this command is #exportJIPqueue (see also Multiplayer_Server_Commands)
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value ExportJIPMessages(Value rightInstance)
            {
                return new Value(GameValueMethods.ExportJIPMessages(rightInstance));
            }

            /// <summary>
            /// Returns the direction object is watching (eyes, or a vehicle primary observer).
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value EyeDirection(Value rightInstance)
            {
                return new Value(GameValueMethods.EyeDirection(rightInstance));
            }

            /// <summary>
            /// Returns the object's eyes / main turret position.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value EyePos(Value rightInstance)
            {
                return new Value(GameValueMethods.EyePos(rightInstance));
            }

            /// <summary>
            /// Returns the face of a person.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value string</returns>
            public static Value Face(Value rightInstance)
            {
                return new Value(GameValueMethods.Face(rightInstance));
            }

            /// <summary>
            /// Gets unit faction. Factions were introduced in Arma 2 and are defined under CfgFactionClasses. Side 1.00 1.50 1.96 west/blufor USMC CDF BIS_US BIS_CZ BIS_GER BIS_BAF (BAF DLC) BLU_F (NATO) BLU_G_F (FIA) BLU_T_F (Pacific NATO, Apex Expansion) BLU_CTRG_F (Pacific CTRG, Apex Expansion) BLU_GEN_F (Gendarmerie, Apex Expansion) BLU_W_F (Woodland NATO, Contact Expansion) east/opfor INS (ChDKZ) RU (Russia) BIS_TK (Takistan army) BIS_TK_INS (TK insurgents) OPF_F (Iranian CSAT) OPF_G_F (FIA) OPF_T_F (Chinese CSAT, Apex Expansion) OPF_R_F (Spetznatz, Contact Expansion) resistance/independent GUE (Guerilla) BIS_TK_GUE BIS_UN (United Nations) PMC_BAF (PMC DLC) IND_F (AAF) IND_G_F (FIA) IND_C_F (Syndikat, Apex Expansion) IND_E_F (LDF, Contact Expansion) IND_L_F (Looters, Contact Expansion) civilian CIV CIV_RU BIS_TK_CIV BIS_CIV_special CIV_F CIV_IDAP_F (Laws of War DLC) If a unit's faction is not defined in its config, an empty string is returned.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value string</returns>
            public static Value Faction(Value rightInstance)
            {
                return new Value(GameValueMethods.Faction(rightInstance));
            }

            /// <summary>
            /// Changes the master environment volume smoothly within the given time and is different from enableEnvironment global mute option. The default volume is 1. Influenced sounds, among others, are: forest sounds (birds, crickets, ...) waves wind rain object sounds (air conditioners, ...) 2.06 thunder
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value FadeEnvironment(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.FadeEnvironment(leftInstance, rightInstance));
            }

            /// <summary>
            /// Changes the current music volume to the given value smoothly within the given time. The player's in-game setting is not changed by this command: Final Volume = Client Setting * Scripted Volume.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value FadeMusic(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.FadeMusic(leftInstance, rightInstance));
            }

            /// <summary>
            /// Changes the radio volume smoothly within the given time. The player's in-game setting is not changed by this command: Final Volume = Client Setting * Scripted Volume.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value FadeRadio(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.FadeRadio(leftInstance, rightInstance));
            }

            /// <summary>
            /// Changes the sound volume smoothly within the given time. The player's in-game setting is not changed by this command: Final Volume = Client Setting * Scripted Volume.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value FadeSound(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.FadeSound(leftInstance, rightInstance));
            }

            /// <summary>
            /// Changes the master speech volume smoothly within the given time. The default volume is 1.0. Some of the sounds that play through speech channel are:  Tactical Ping sound playSound when isSpeech argument is true say3D when isSpeech argument is true
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value FadeSpeech(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.FadeSpeech(leftInstance, rightInstance));
            }

            /// <summary>
            /// Finish the mission. If the server is set to run persistent mission, failMission will not end the mission when last player gets kicked to the lobby. Use endMission to end the mission. The end type can be: "CONTINUE" - this is default type, basically an alias to do nothing "KILLED" "LOSER" "END1" "END2" "END3" "END4" "END5" "END6" Mission saves won't be deleted. To maintain Arma 3 visual style, it is recommended to use BIS_fnc_endMission instead.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value FailMission(Value rightInstance)
            {
                return new Value(GameValueMethods.FailMission(rightInstance));
            }

            /// <summary>
            /// Always false.
            /// </summary>
            /// <returns>Value bool</returns>
            public static Value False()
            {
                return new Value(GameValueMethods.False());
            }

            /// <summary>
            /// Checks if file on given path exists. Uses same path resolve code as loadFile. Absolute paths are not supported, such as those generated using getMissionPath. Attempting to check an absolute path will result in this error in RPT logs: Invalid path (only relative paths supported): 'C:\...'
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value bool</returns>
            public static Value FileExists(Value rightInstance)
            {
                return new Value(GameValueMethods.FileExists(rightInstance));
            }

            /// <summary>
            /// Adds magazines from the campaign pool to the given unit, depending on his weapons. Available in campaigns only.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value FillWeaponsFromPool(Value rightInstance)
            {
                return new Value(GameValueMethods.FillWeaponsFromPool(rightInstance));
            }

            /// <summary>
            /// Searches for an array element within an array or an ANSI string within an ANSI string. If Unicode support is desired, see forceUnicode. ⚠Search is cASe-seNsItiVE!
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value scalar</returns>
            public static Value Find(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.Find(leftInstance, rightInstance));
            }

            /// <summary>
            /// Returns the zero-based index of the first element in array A that also exists in array B. If no common elements exist it returns -1. Similar in functionality as find's first syntax, but the second parameter is an array of elements to find.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value scalar</returns>
            public static Value FindAny(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.FindAny(leftInstance, rightInstance));
            }

            /// <summary>
            /// Returns the object around where the unit finds cover. The minDist, visibilityPosition and ignoreObject parameters are optional. ⚠Not implemented in Arma 2 and later titles (always returns objNull).
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value object</returns>
            public static Value FindCover(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.FindCover(leftInstance, rightInstance));
            }

            /// <summary>
            /// Finds a display by its IDD which can either be defined in missionConfigFile (description.ext) or configFile (config.cpp) or by its UI On Texture's unique name (see displayUniqueName). If the specified display cannot be found, displayNull is returned. ⚠Dedicated servers and headless clients do not have a primary display (e.g findDisplay 46 will return displayNull). Detect both with the hasInterface command. For a list of (almost) all Arma 3's IDDs, see Arma 3: IDD List.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value display</returns>
            public static Value FindDisplay(Value rightInstance)
            {
                return new Value(GameValueMethods.FindDisplay(rightInstance));
            }

            /// <summary>
            /// Return object that matches the provided reference.  Some Old Editor Command
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value string</returns>
            public static Value FindEditorObject(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.FindEditorObject(leftInstance, rightInstance));
            }

            /// <summary>
            /// Searches for an empty area around the specified position, starting from the center looking for an empty areaRadius and looks as far away as areaRadius + maxDistance. This command ignores moving objects present within the search area. The search area can be preloaded with findEmptyPositionReady command. This command does not work outside of world dimensions and will always return the provided center. Objects outside the world dimensions will not be considered in the detection either.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value FindEmptyPosition(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.FindEmptyPosition(leftInstance, rightInstance));
            }

            /// <summary>
            /// Preloads area to be used with findEmptyPosition command and returns true when area is ready. The size of the area preloaded is from center - radius - maxDistance to center + radius + maxDistance ⚠Preloading large areas may take a long time, we are talking minutes. However once preloaded, it stays preloaded even after mission restart.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value bool</returns>
            public static Value FindEmptyPositionReady(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.FindEmptyPositionReady(leftInstance, rightInstance));
            }

            /// <summary>
            /// Searches for an element within array for which the code evaluates to true. Returns the zero-based index on success or -1 if not found. Code on the right side of the command is evaluated for each element of the array, processed element can be referenced in code as _x. findIf terminates as soon as it finds an element that fulfills the condition, thus it is more efficient than count in scenarios where a check for presence / absence of at least one element should be done (See Example 2).
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value scalar</returns>
            public static Value FindIf(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.FindIf(leftInstance, rightInstance));
            }

            /// <summary>
            /// Finds the nearest enemy to the specified position. Returns a null object if the object's group does not know about any enemies. This command will return nearest object that is known to the unit and is considered enemy. An empty vehicle that is part of enemy group assets (see addVehicle) can be returned as valid nearest target.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value object</returns>
            public static Value FindNearestEnemy(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.FindNearestEnemy(leftInstance, rightInstance));
            }

            /// <summary>
            /// Finish world initialization before mission is launched.
            /// </summary>
            /// <returns>Value nothing</returns>
            public static Value FinishMissionInit()
            {
                return new Value(GameValueMethods.FinishMissionInit());
            }

            /// <summary>
            /// Returns true if the provided number is finite (not infinite and a valid number).  Maximum finite Number : 3.40282e+38 Minimum finite Number : -3.40282e+38
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value bool</returns>
            public static Value Finite(Value rightInstance)
            {
                return new Value(GameValueMethods.Finite(rightInstance));
            }

            /// <summary>
            /// Forces a unit to fire the given weapon. Just like with forceWeaponFire it is possible to pass remote unit as argument, but this could be unreliable. Considering this command might need to be used in combination with selectWeapon, which takes only local arguments, it would make sense to execute the fire command where the unit is local as well.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value Fire(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.Fire(leftInstance, rightInstance));
            }

            /// <summary>
            /// Remotely forces a unit to fire the given weapon. See also BIS_fnc_fire.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value bool</returns>
            public static Value FireAtTarget(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.FireAtTarget(leftInstance, rightInstance));
            }

            /// <summary>
            /// Returns the first stored backpack.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value object</returns>
            public static Value FirstBackpack(Value rightInstance)
            {
                return new Value(GameValueMethods.FirstBackpack(rightInstance));
            }

            /// <summary>
            /// Returns the original flag pole of the flag the unit is carrying.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value object</returns>
            public static Value Flag(Value rightInstance)
            {
                return new Value(GameValueMethods.Flag(rightInstance));
            }

            /// <summary>
            /// Returns flag position on the flag pole.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value scalar</returns>
            public static Value FlagAnimationPhase(Value rightInstance)
            {
                return new Value(GameValueMethods.FlagAnimationPhase(rightInstance));
            }

            /// <summary>
            /// Returns the global owner of a flag. A getter for setFlagOwner. Note that owner of a flag is Object rather than Number, as how it is usually with other owner commands
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value object</returns>
            public static Value FlagOwner(Value rightInstance)
            {
                return new Value(GameValueMethods.FlagOwner(rightInstance));
            }

            /// <summary>
            /// Returns Side of the local instance of the flag. A getter for setFlagSide.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value side</returns>
            public static Value FlagSide(Value rightInstance)
            {
                return new Value(GameValueMethods.FlagSide(rightInstance));
            }

            /// <summary>
            /// Returns texture of the local instance of the flag. A getter for setFlagTexture. It will not return flag textures applied using forceFlagTexture, use getForcedFlagTexture for that.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value string</returns>
            public static Value FlagTexture(Value rightInstance)
            {
                return new Value(GameValueMethods.FlagTexture(rightInstance));
            }

            /// <summary>
            /// Flattens an array.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value Flatten(Value rightInstance)
            {
                return new Value(GameValueMethods.Flatten(rightInstance));
            }

            /// <summary>
            /// Checks if a unit is fleeing. Notes: Fleeing only affects AI led groups. Only the group as a whole can flee (or not). The courage of the AI group is based on the group's leader courage subskill. Each group has a max strength (summed "armor" of all infantry units - plus armor when inside vehicles). If the group losses by injury/damage or death/destruction are higher than the max strength, multiplied by leader's courage or allowFleeing level , then the group will start fleeing. As result primarily the AI flees to a nearby "supply point" (some friendly units - preferably with medic or engineer, or a vehicle with repair/ammo/fuel cargo). Alternatively it will try to find a safe position within a 600m radius from the initial waypoint (danger, distance, amount of cover positions are taken into account). After the fleeing has been finished the group's initial strength is reset. Fleeing units in combatMode red, will be set to yellow when fleeing to avoid engaging enemies while doing so. While fleeing, the group leader will be set to green, to avoid giving engage or fire orders, unless in combatMode blue already. Also speedMode is set to full. When reaching their flee point/destination, they will change to combatMode yellow and speedMode normal. With allowFleeing one can make unit's flee earlier (or essentially never flee). Apply it, overrides the courage subskill influence.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value bool</returns>
            public static Value Fleeing(Value rightInstance)
            {
                return new Value(GameValueMethods.Fleeing(rightInstance));
            }

            /// <summary>
            /// Returns the next lowest integer in relation to the provided number.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value scalar_nan</returns>
            public static Value Floor(Value rightInstance)
            {
                return new Value(GameValueMethods.Floor(rightInstance));
            }

            /// <summary>
            /// Sets the flying altitude for aircraft relatively to the ground surface. Avoid too low altitudes, as helicopters and planes won't evade trees and obstacles on the ground. The default flying altitude is 100 meters.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value FlyInHeight(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.FlyInHeight(leftInstance, rightInstance));
            }

            /// <summary>
            /// Sets the minimal ASL height. Final height is flyInHeight max flyInHeightASL - the higher altitude has priority.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value FlyInHeightASL(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.FlyInHeightASL(leftInstance, rightInstance));
            }

            /// <summary>
            /// Returns display's focused control.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value control</returns>
            public static Value FocusedCtrl(Value rightInstance)
            {
                return new Value(GameValueMethods.FocusedCtrl(rightInstance));
            }

            /// <summary>
            /// A getter for setFog. Returns the current value of the fog in range 0..1.
            /// </summary>
            /// <returns>Value scalar</returns>
            public static Value Fog()
            {
                return new Value(GameValueMethods.Fog());
            }

            /// <summary>
            /// Returns the forecast fog value. A value of 0 means no fog, 1 means maximum fog.
            /// </summary>
            /// <returns>Value scalar</returns>
            public static Value FogForecast()
            {
                return new Value(GameValueMethods.FogForecast());
            }

            /// <summary>
            /// A getter for setFog (Alt Syntax). Returns extended params for the fog
            /// </summary>
            /// <returns>Value array</returns>
            public static Value FogParams()
            {
                return new Value(GameValueMethods.FogParams());
            }

            /// <summary>
            /// This operator creates a For Type which is used in the for-constructs. ⚠The alternative syntax for _array do _code is slower than the first syntax because the condition is checked in every iteration, and it has a few bugs. It is only kept for backward compatibility; always use the first syntax for "_i" from 0 to _end do _code.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value for</returns>
            public static Value For(Value rightInstance)
            {
                return new Value(GameValueMethods.For(rightInstance));
            }

            /// <summary>
            /// Create a new uniform and hard link it into slot (without any restrictions).
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value ForceAddUniform(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.ForceAddUniform(leftInstance, rightInstance));
            }

            /// <summary>
            /// Adds force generator to world. For this command to have any effect, the Advanced Flight Model (AFM) has to be enabled. AFM status can be checked with difficultyEnabledRTD.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value ForceAtPositionRTD(Value rightInstance)
            {
                return new Value(GameValueMethods.ForceAtPositionRTD(rightInstance));
            }

            /// <summary>
            /// Forces showCadetHints and showCadetWP global Cadet Arma 3 difficulty, returns previous settings.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value ForceCadetDifficulty(Value rightInstance)
            {
                return new Value(GameValueMethods.ForceCadetDifficulty(rightInstance));
            }

            /// <summary>
            /// Returns if map was forced by using forceMap command or openMap command with force option
            /// </summary>
            /// <returns>Value array</returns>
            public static Value ForcedMap()
            {
                return new Value(GameValueMethods.ForcedMap());
            }

            /// <summary>
            /// Forces mission ending (set with endMission) even if a camera effect or any another condition delays the endMission (mostly in Operation Flashpoint).
            /// </summary>
            /// <returns>Value nothing</returns>
            public static Value ForceEnd()
            {
                return new Value(GameValueMethods.ForceEnd());
            }

            /// <summary>
            /// Forces a flag texture onto a flag carrier (unit, vehicle or flag pole). No flag holder is required. If "" is used as texture, the texture is removed. This will override regularly owned flags. This type of flag texture cannot be retrieved using flagTexture, but getForcedFlagTexture. ⚠Forced flag texture is an additional flag texture, which visually overrides original flag texture and therefore is very expensive to simulate, so use the functionality sparingly.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value ForceFlagTexture(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.ForceFlagTexture(leftInstance, rightInstance));
            }

            /// <summary>
            /// Forces the vehicle to stay on road.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value ForceFollowRoad(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.ForceFollowRoad(leftInstance, rightInstance));
            }

            /// <summary>
            /// Adds force generator to world. For this command to have any effect, the Advanced Flight Model (AFM) has to be enabled. AFM status can be checked with difficultyEnabledRTD.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value ForceGeneratorRTD(Value rightInstance)
            {
                return new Value(GameValueMethods.ForceGeneratorRTD(rightInstance));
            }

            /// <summary>
            /// Opens non-interactive main map in background that overrides user screen. To force open interactive map use openMap command. ⚠When the map is forced open with this command, the user is still able to fire but cannot see the world, just the map. The map cannot be closed manually and the user can get stuck requiring a game restart. Make sure you provide scripted mechanics to de-force the map at a later stage.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value ForceMap(Value rightInstance)
            {
                return new Value(GameValueMethods.ForceMap(rightInstance));
            }

            /// <summary>
            /// Forces the unit to respawn. The effect is as if the player pressed the RESPAWN button in the game pause menu; the unit is killed but there is no "X was killed" message and no score adjustment.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value ForceRespawn(Value rightInstance)
            {
                return new Value(GameValueMethods.ForceRespawn(rightInstance));
            }

            /// <summary>
            /// Force the speed limit on given object (object will never attempt to move faster than given by forceSpeed). Use negative value to return to default behaviour.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value ForceSpeed(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.ForceSpeed(leftInstance, rightInstance));
            }

            /// <summary>
            /// List of the commands that work with forceUnicode: copyFromClipboard copyToClipboard count find in insert reverse select splitString trim regexFind regexMatch regexReplace Sets the Unicode flag which forces some of the string manipulation commands to switch to Unicode. The Unicode flag is always set right after forceUnicode command execution, but is reset depending on the command mode:  1 - the Unicode flag is reset right after any of the supported commands executed or the end of script, whichever comes earlier. 0 - the Unicode flag is reset at the end of the script. When the flag is set it will also affect all scopes within the script including child scopes (see diag_scope). There are many other string manipulation commands like ctrlSetText, getTextWidth, etc. that support Unicode by design so no additional forcing is needed.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value ForceUnicode(Value rightInstance)
            {
                return new Value(GameValueMethods.ForceUnicode(rightInstance));
            }

            /// <summary>
            /// Forces unit to walk even if run or sprint is selected.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value ForceWalk(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.ForceWalk(leftInstance, rightInstance));
            }

            /// <summary>
            /// The unit will be forced to fire weapon from the given muzzle. The weapon will not fire if firemode passed as parameter is not supported by the given muzzle. The muzzle could belong to a vehicle weapon and unit in this case will be the unit operating this weapon. Doesnt't seem to work for units in FFV positions. Works on player. See also: BIS_fnc_fire
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value ForceWeaponFire(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.ForceWeaponFire(leftInstance, rightInstance));
            }

            /// <summary>
            /// Will force-apply previously set settings. This might cause lag. To prevent the engine from overwriting custom weather settings, enable the Manual Control settings in Eden Editor's intel section.
            /// </summary>
            /// <returns>Value nothing</returns>
            public static Value ForceWeatherChange()
            {
                return new Value(GameValueMethods.ForceWeatherChange());
            }

            /// <summary>
            /// Executes the given command(s) on every item of an Array or a HashMap. Since Arma 2, the variable _x is always private to the forEach block so it is safe to nest them (see Example 8).
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value any</returns>
            public static Value ForEach(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.ForEach(leftInstance, rightInstance));
            }

            /// <summary>
            /// Executes the given command recursively for both teams and agents that are members of the given team. For teams only use forEachMemberTeam. For agents only use forEachMemberAgent.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value ForEachMember(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.ForEachMember(leftInstance, rightInstance));
            }

            /// <summary>
            /// Executes the given command recursively for each agent that is a member of the given team. For just teams use forEachMemberTeam. For both teams and agents use forEachMember.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value ForEachMemberAgent(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.ForEachMemberAgent(leftInstance, rightInstance));
            }

            /// <summary>
            /// Executes the given command recursively for each team that is a member of the given team. For just agents use forEachMemberAgent. For both teams and agents use forEachMember.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value ForEachMemberTeam(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.ForEachMemberTeam(leftInstance, rightInstance));
            }

            /// <summary>
            /// Resets the info a group has about a target, forcing knowsAbout value to 0.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value ForgetTarget(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.ForgetTarget(leftInstance, rightInstance));
            }

            /// <summary>
            /// Composes a string containing other variables or other variable types. Converts any variable type to a string. If you want to convert a string back to a number, use parseNumber. ⚠The output of this command is limited to ~8Kb. joinString on the other hand doesn't have such limit and is a bit faster.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value string</returns>
            public static Value Format(Value rightInstance)
            {
                return new Value(GameValueMethods.Format(rightInstance));
            }

            /// <summary>
            /// Returns the current formation of a group.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value string</returns>
            public static Value Formation(Value rightInstance)
            {
                return new Value(GameValueMethods.Formation(rightInstance));
            }

            /// <summary>
            /// Return the direction in degrees of the 'unit' watching in formation.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value scalar</returns>
            public static Value FormationDirection(Value rightInstance)
            {
                return new Value(GameValueMethods.FormationDirection(rightInstance));
            }

            /// <summary>
            /// Return leader of the formation.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value object</returns>
            public static Value FormationLeader(Value rightInstance)
            {
                return new Value(GameValueMethods.FormationLeader(rightInstance));
            }

            /// <summary>
            /// Return list of units (drivers) in the formation.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value FormationMembers(Value rightInstance)
            {
                return new Value(GameValueMethods.FormationMembers(rightInstance));
            }

            /// <summary>
            /// Return position of unit in the formation.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value FormationPosition(Value rightInstance)
            {
                return new Value(GameValueMethods.FormationPosition(rightInstance));
            }

            /// <summary>
            /// Return the current task of the unit in the formation.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value string</returns>
            public static Value FormationTask(Value rightInstance)
            {
                return new Value(GameValueMethods.FormationTask(rightInstance));
            }

            /// <summary>
            /// Creates a Structured Text similar to format command.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value text</returns>
            public static Value FormatText(Value rightInstance)
            {
                return new Value(GameValueMethods.FormatText(rightInstance));
            }

            /// <summary>
            /// Returns the formation leader of a given unit. This is often the same as the group leader, but not always, for example in cases when a unit is ordered to follow another unit.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value object</returns>
            public static Value FormLeader(Value rightInstance)
            {
                return new Value(GameValueMethods.FormLeader(rightInstance));
            }

            /// <summary>
            /// Unloads given extension loaded previously with callExtension so that extension developer could rapidly tweak developed extension without restarting the game. ⚠This command was introduced in Arma 3 dev v2.11.149751 and is only effective in DevBranch; it does nothing in stable branch.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value bool_nothing</returns>
            public static Value FreeExtension(Value rightInstance)
            {
                return new Value(GameValueMethods.FreeExtension(rightInstance));
            }

            /// <summary>
            /// Returns if freelook is active on the current machine's controlled character.
            /// </summary>
            /// <returns>Value bool</returns>
            public static Value FreeLook()
            {
                return new Value(GameValueMethods.FreeLook());
            }

            /// <summary>
            /// Continue sequence of for construct. It sets the start value of the index variable.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value for</returns>
            public static Value From(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.From(leftInstance, rightInstance));
            }

            /// <summary>
            /// Return if given team was inserted directly from mission editor. Some Old Editor Command
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value bool</returns>
            public static Value FromEditor(Value rightInstance)
            {
                return new Value(GameValueMethods.FromEditor(rightInstance));
            }

            /// <summary>
            /// Checks how much fuel is left in the gas tank of a vehicle.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value scalar</returns>
            public static Value Fuel(Value rightInstance)
            {
                return new Value(GameValueMethods.Fuel(rightInstance));
            }

            /// <summary>
            /// Returns an array with all crew inside given vehicle, with or without empty seats. ⚠With the introduction of person turrets (FFV), the returned cargoIndex works with moveInCargo but does not with actions such as "GetInCargo" and "MoveToCargo". To find out indexes for actions, use the "cargo" filter (See Example 3).
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value FullCrew(Value rightInstance)
            {
                return new Value(GameValueMethods.FullCrew(rightInstance));
            }

            /// <summary>
            /// Returns ammo count of assigned magazine.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value scalar</returns>
            public static Value GearIDCAmmoCount(Value rightInstance)
            {
                return new Value(GameValueMethods.GearIDCAmmoCount(rightInstance));
            }

            /// <summary>
            /// Returns ammo count of assigned magazine.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value scalar</returns>
            public static Value GearSlotAmmoCount(Value rightInstance)
            {
                return new Value(GameValueMethods.GearSlotAmmoCount(rightInstance));
            }

            /// <summary>
            /// Returns gear slot item name.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value string</returns>
            public static Value GearSlotData(Value rightInstance)
            {
                return new Value(GameValueMethods.GearSlotData(rightInstance));
            }

            /// <summary>
            /// Returns the name of a unit's current gesture. Seems to be forced to lower case in Arma 3. This command is only for a man unit, other units such as animals cannot use this command.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value string</returns>
            public static Value GestureState(Value rightInstance)
            {
                return new Value(GameValueMethods.GestureState(rightInstance));
            }

            /// <summary>
            /// Retrieves a value out of a HashMap after looking it up by its key.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value any</returns>
            public static Value Get(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.Get(leftInstance, rightInstance));
            }

            /// <summary>
            /// Returns state of given Eden Editor action.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value scalar</returns>
            public static Value Get3DENActionState(Value rightInstance)
            {
                return new Value(GameValueMethods.Get3DENActionState(rightInstance));
            }

            /// <summary>
            /// Returns the value of the given entity's attribute in Eden Editor. An attribute is identified by its property (data when it is engine-drive attribute) value in config. For the list of all attributes with their properties, see Setting Attributes. ⚠Attributes are available only within the Eden Editor workspace. You cannot access them in scenario preview or exported scenario!
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value Get3DENAttribute(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.Get3DENAttribute(leftInstance, rightInstance));
            }

            /// <summary>
            /// Returns the camera Object used by the Eden Editor.
            /// </summary>
            /// <returns>Value object</returns>
            public static Value Get3DENCamera()
            {
                return new Value(GameValueMethods.Get3DENCamera());
            }

            /// <summary>
            /// Returns all connections currently present on an entity.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value Get3DENConnections(Value rightInstance)
            {
                return new Value(GameValueMethods.Get3DENConnections(rightInstance));
            }

            /// <summary>
            /// Returns Eden Entity based on its Eden ID.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value any</returns>
            public static Value Get3DENEntity(Value rightInstance)
            {
                return new Value(GameValueMethods.Get3DENEntity(rightInstance));
            }

            /// <summary>
            /// Returns unique index of an Eden Entity. This number remains the same even after saving and loading the scenario. This ID is only available in Eden Editor.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value scalar</returns>
            public static Value Get3DENEntityID(Value rightInstance)
            {
                return new Value(GameValueMethods.Get3DENEntityID(rightInstance));
            }

            /// <summary>
            /// Returns the grid increment for the given transformation type.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value Get3DENGrid(Value rightInstance)
            {
                return new Value(GameValueMethods.Get3DENGrid(rightInstance));
            }

            /// <summary>
            /// Gets visibility state of Eden Editor icons.
            /// </summary>
            /// <returns>Value array</returns>
            public static Value Get3DENIconsVisible()
            {
                return new Value(GameValueMethods.Get3DENIconsVisible());
            }

            /// <summary>
            /// Return all entities and sub-layer in Eden Entity layer. In order to get all layer entities during a scenario use getMissionLayerEntities.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value Get3DENLayerEntities(Value rightInstance)
            {
                return new Value(GameValueMethods.Get3DENLayerEntities(rightInstance));
            }

            /// <summary>
            /// Get visibility state of Eden Editor lines.
            /// </summary>
            /// <returns>Value array</returns>
            public static Value Get3DENLinesVisible()
            {
                return new Value(GameValueMethods.Get3DENLinesVisible());
            }

            /// <summary>
            /// Return value of scenario attribute. For a list of all available mission attributes see Mission Attributes. ⚠Attributes are available only within the Eden Editor workspace. You cannot access them in scenario preview or exported scenario!
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value any</returns>
            public static Value Get3DENMissionAttribute(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.Get3DENMissionAttribute(leftInstance, rightInstance));
            }

            /// <summary>
            /// Returns the Eden Entity the mouse is hovering over in Eden Editor.
            /// </summary>
            /// <returns>Value array</returns>
            public static Value Get3DENMouseOver()
            {
                return new Value(GameValueMethods.Get3DENMouseOver());
            }

            /// <summary>
            /// Returns an array of all selected Eden Editor Entities of the given type. If a wrong type is provided, [[], [], [], [], [], []] is returned and an error message is shown.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value Get3DENSelected(Value rightInstance)
            {
                return new Value(GameValueMethods.Get3DENSelected(rightInstance));
            }

            /// <summary>
            /// Get current aiming coefficient (higher ~ less precise, default is 1)
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value scalar</returns>
            public static Value GetAimingCoef(Value rightInstance)
            {
                return new Value(GameValueMethods.GetAimingCoef(rightInstance));
            }

            /// <summary>
            /// Returns an array containing the names and values of environmental 2D sound controllers, variables that can be used in simple expressions when configuring sounds. ⚠ Controller names are case sensitive Wind param difference: wind is for 3D controller windy is for 2D controller (getAllEnvSoundControllers)
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value GetAllEnv3DSoundControllers(Value rightInstance)
            {
                return new Value(GameValueMethods.GetAllEnv3DSoundControllers(rightInstance));
            }

            /// <summary>
            /// Returns an array containing the names and values of environmental 2D sound controllers, variables that can be used in simple expressions when configuring sounds. ⚠ Controller names are case sensitive Please note that the name for the wind param for 2D controller is 'windy', 'wind' being the name for the 3D controller getAllEnv3DSoundControllers.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value GetAllEnvSoundControllers(Value rightInstance)
            {
                return new Value(GameValueMethods.GetAllEnvSoundControllers(rightInstance));
            }

            /// <summary>
            /// Returns 3 arrays for easy cross reference: 1st - array of hit point names, 2nd - array of hit selection names, 3rd - array of damage values. All values in all arrays are ordered accordingly to hit part index for convenience and for use in setHitIndex and getHitIndex. Levels of damage are: 0: no damage 1: full damage
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value GetAllHitPointsDamage(Value rightInstance)
            {
                return new Value(GameValueMethods.GetAllHitPointsDamage(rightInstance));
            }

            /// <summary>
            /// Gets all mine objects this unit has ownership over.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value GetAllOwnedMines(Value rightInstance)
            {
                return new Value(GameValueMethods.GetAllOwnedMines(rightInstance));
            }

            /// <summary>
            /// Return an array with the vehicle's all pylons info.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value GetAllPylonsInfo(Value rightInstance)
            {
                return new Value(GameValueMethods.GetAllPylonsInfo(rightInstance));
            }

            /// <summary>
            /// Returns an array containing names and values of the sound controllers that can be used in simple expressions when configuring sounds.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value GetAllSoundControllers(Value rightInstance)
            {
                return new Value(GameValueMethods.GetAllSoundControllers(rightInstance));
            }

            /// <summary>
            /// Returns unit traits, native or set by setUnitTrait.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value GetAllUnitTraits(Value rightInstance)
            {
                return new Value(GameValueMethods.GetAllUnitTraits(rightInstance));
            }

            /// <summary>
            /// Returns the amount (1 is full) of ammo resources in the cargo space of a rearm vehicle. Since Arma 3 v1.96 the return value for vehicles that are not configured to have ability to rearm other vehicles is -1. (Prior to that the value was negative infinity)
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value scalar</returns>
            public static Value GetAmmoCargo(Value rightInstance)
            {
                return new Value(GameValueMethods.GetAmmoCargo(rightInstance));
            }

            /// <summary>
            /// Returns aim precision for current animation
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value scalar</returns>
            public static Value GetAnimAimPrecision(Value rightInstance)
            {
                return new Value(GameValueMethods.GetAnimAimPrecision(rightInstance));
            }

            /// <summary>
            /// Get coefficient for animation speed.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value scalar</returns>
            public static Value GetAnimSpeedCoef(Value rightInstance)
            {
                return new Value(GameValueMethods.GetAnimSpeedCoef(rightInstance));
            }

            /// <summary>
            /// Extract array from config entry.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value GetArray(Value rightInstance)
            {
                return new Value(GameValueMethods.GetArray(rightInstance));
            }

            /// <summary>
            /// Get list of all available magazines of artillery units on the list. Command returns only unique magazine types and doesn't contain any information about which unit has which magazine.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value GetArtilleryAmmo(Value rightInstance)
            {
                return new Value(GameValueMethods.GetArtilleryAmmo(rightInstance));
            }

            /// <summary>
            /// Returns settings from artillery computer currently opened by player.
            /// </summary>
            /// <returns>Value array</returns>
            public static Value GetArtilleryComputerSettings()
            {
                return new Value(GameValueMethods.GetArtilleryComputerSettings());
            }

            /// <summary>
            /// Returns ETA to the target in seconds for given artillery unit based on target position and used magazine, -1 if target can't be hit.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value scalar</returns>
            public static Value GetArtilleryETA(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.GetArtilleryETA(leftInstance, rightInstance));
            }

            /// <summary>
            /// Returns DLC information about given object or model.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value GetAssetDLCInfo(Value rightInstance)
            {
                return new Value(GameValueMethods.GetAssetDLCInfo(rightInstance));
            }

            /// <summary>
            /// Returns curator logic to which given player has access.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value object</returns>
            public static Value GetAssignedCuratorLogic(Value rightInstance)
            {
                return new Value(GameValueMethods.GetAssignedCuratorLogic(rightInstance));
            }

            /// <summary>
            /// Returns unit assigned to curator logic.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value object</returns>
            public static Value GetAssignedCuratorUnit(Value rightInstance)
            {
                return new Value(GameValueMethods.GetAssignedCuratorUnit(rightInstance));
            }

            /// <summary>
            /// Returns the target given unit is engaging.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value object</returns>
            public static Value GetAttackTarget(Value rightInstance)
            {
                return new Value(GameValueMethods.GetAttackTarget(rightInstance));
            }

            /// <summary>
            /// Returns profile audio volumes.
            /// </summary>
            /// <returns>Value array</returns>
            public static Value GetAudioOptionVolumes()
            {
                return new Value(GameValueMethods.GetAudioOptionVolumes());
            }

            /// <summary>
            /// Returns all backpack types and count from the cargo space.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value GetBackpackCargo(Value rightInstance)
            {
                return new Value(GameValueMethods.GetBackpackCargo(rightInstance));
            }

            /// <summary>
            /// Returns how many seconds injured unit will continue leaving blood trail. If unit damage is < 0.1, the return value is 0 and unit doesn't leave any blood trail. Use setBleedingRemaining to set different remaining time.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value scalar</returns>
            public static Value GetBleedingRemaining(Value rightInstance)
            {
                return new Value(GameValueMethods.GetBleedingRemaining(rightInstance));
            }

            /// <summary>
            /// Returns how much the unit is exposed to fire damage.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value scalar</returns>
            public static Value GetBurningValue(Value rightInstance)
            {
                return new Value(GameValueMethods.GetBurningValue(rightInstance));
            }

            /// <summary>
            /// Returns true if visibility of player by friendly units is calculated.
            /// </summary>
            /// <returns>Value bool</returns>
            public static Value GetCalculatePlayerVisibilityByFriendly()
            {
                return new Value(GameValueMethods.GetCalculatePlayerVisibilityByFriendly());
            }

            /// <summary>
            /// Returns the direction unit is looking in render time scope. While for AI the origin for the view direction vector can be taken from eyePos unit, for human player the origin should be taken from player camera position positionCameraToWorld [0,0,0]
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value GetCameraViewDirection(Value rightInstance)
            {
                return new Value(GameValueMethods.GetCameraViewDirection(rightInstance));
            }

            /// <summary>
            /// Returns index of the unit in cargo. -1 if not in cargo.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value scalar</returns>
            public static Value GetCargoIndex(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.GetCargoIndex(leftInstance, rightInstance));
            }

            /// <summary>
            /// Returns center of mass of an object.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value GetCenterOfMass(Value rightInstance)
            {
                return new Value(GameValueMethods.GetCenterOfMass(rightInstance));
            }

            /// <summary>
            /// Returns client state in network game. Works on both, client and dedicated server. The following states are possible: getClientStateNumber getClientState Description 0 "NONE" No client (or singleplayer) 1 "CREATED" Client is created 2 "CONNECTED" Client is connected to server, message formats are registered 3 "LOGGED IN" Identity is created 4 "MISSION SELECTED" Mission is selected 5 "MISSION ASKED" Server was asked to send / not send mission 6 "ROLE ASSIGNED" Role was assigned (and confirmed) 7 "MISSION RECEIVED" Mission received 8 "GAME LOADED" Island loaded, vehicles received 9 "BRIEFING SHOWN" Briefing was displayed 10 "BRIEFING READ" Ready to play mission 11 "GAME FINISHED" Game was finished 12 "DEBRIEFING READ" Debriefing read, ready to continue with next mission
            /// </summary>
            /// <returns>Value string</returns>
            public static Value GetClientState()
            {
                return new Value(GameValueMethods.GetClientState());
            }

            /// <summary>
            /// Returns client state in network game. Works on both, client and dedicated server. The following states are possible: getClientStateNumber getClientState Description 0 "NONE" No client (or singleplayer) 1 "CREATED" Client is created 2 "CONNECTED" Client is connected to server, message formats are registered 3 "LOGGED IN" Identity is created 4 "MISSION SELECTED" Mission is selected 5 "MISSION ASKED" Server was asked to send / not send mission 6 "ROLE ASSIGNED" Role was assigned (and confirmed) 7 "MISSION RECEIVED" Mission received 8 "GAME LOADED" Island loaded, vehicles received 9 "BRIEFING SHOWN" Briefing was displayed 10 "BRIEFING READ" Ready to play mission 11 "GAME FINISHED" Game was finished 12 "DEBRIEFING READ" Debriefing read, ready to continue with next mission
            /// </summary>
            /// <returns>Value string</returns>
            public static Value GetClientStateNumber()
            {
                return new Value(GameValueMethods.GetClientStateNumber());
            }

            /// <summary>
            /// Get array of compatible pylon magazines
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value GetCompatiblePylonMagazines(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.GetCompatiblePylonMagazines(leftInstance, rightInstance));
            }

            /// <summary>
            /// Returns UAV/UGV vehicle if person has connection to some UAV. To return the AI unit which player controls, see getConnectedUAVUnit.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value object</returns>
            public static Value GetConnectedUAV(Value rightInstance)
            {
                return new Value(GameValueMethods.GetConnectedUAV(rightInstance));
            }

            /// <summary>
            /// Returns UAV/UGV AI unit, which player is controlling. To return UAV vehicle, see getConnectedUAV
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value object</returns>
            public static Value GetConnectedUAVUnit(Value rightInstance)
            {
                return new Value(GameValueMethods.GetConnectedUAVUnit(rightInstance));
            }

            /// <summary>
            /// Returns max load value of given uniform, vest or backpack container. For other types of containers, use maxLoad command
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value scalar</returns>
            public static Value GetContainerMaxLoad(Value rightInstance)
            {
                return new Value(GameValueMethods.GetContainerMaxLoad(rightInstance));
            }

            /// <summary>
            /// Returns the corpse associated with given weaponholder. When unit is killed and had a weapon, the weapon is placed inside "WeaponHolderSimulated" and dropped together with the unit. This command returns the dead body associated with this weaponholder.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value object</returns>
            public static Value GetCorpse(Value rightInstance)
            {
                return new Value(GameValueMethods.GetCorpse(rightInstance));
            }

            /// <summary>
            /// Returns cruise control settings set with setCruiseControl command.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value GetCruiseControl(Value rightInstance)
            {
                return new Value(GameValueMethods.GetCruiseControl(rightInstance));
            }

            /// <summary>
            /// Returns object and named selections under cursor and distance to object's surface (to the point cursor points at). If object surface is further away than 50 meters, selections are always an empty array and distance is 1e10 (10^10).
            /// </summary>
            /// <returns>Value array</returns>
            public static Value GetCursorObjectParams()
            {
                return new Value(GameValueMethods.GetCursorObjectParams());
            }

            /// <summary>
            /// Returns aimPrecision from animation state with custom value that will directly affects weapon sway size and speed.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value scalar</returns>
            public static Value GetCustomAimCoef(Value rightInstance)
            {
                return new Value(GameValueMethods.GetCustomAimCoef(rightInstance));
            }

            /// <summary>
            /// Returns current value set to the controller (see setCustomSoundController).
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value scalar</returns>
            public static Value GetCustomSoundController(Value rightInstance)
            {
                return new Value(GameValueMethods.GetCustomSoundController(rightInstance));
            }

            /// <summary>
            /// Returns current number of custom sound controllers supported by the engine for the given vehicle (currently 32)
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value scalar</returns>
            public static Value GetCustomSoundControllerCount(Value rightInstance)
            {
                return new Value(GameValueMethods.GetCustomSoundControllerCount(rightInstance));
            }

            /// <summary>
            /// Returns the object damage in the range from 0 to 1.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value scalar</returns>
            public static Value GetDammage(Value rightInstance)
            {
                return new Value(GameValueMethods.GetDammage(rightInstance));
            }

            /// <summary>
            /// A getter for setDebriefingText.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value GetDebriefingText(Value rightInstance)
            {
                return new Value(GameValueMethods.GetDebriefingText(rightInstance));
            }

            /// <summary>
            /// Returns the string representation of unit as an four slots array.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value GetDescription(Value rightInstance)
            {
                return new Value(GameValueMethods.GetDescription(rightInstance));
            }

            /// <summary>
            /// Returns the object heading in the range 0..360. The alternative syntax gets heading from one object or position to another object or position, and should be used instead of BIS_fnc_dirTo.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value scalar</returns>
            public static Value GetDir(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.GetDir(leftInstance, rightInstance));
            }

            /// <summary>
            /// Returns object's heading in the range from 0 to 360 in render time scope. The alternative syntax gets heading from one object or position to another object or position in render time scope, and should be used instead of BIS_fnc_dirTo.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value scalar</returns>
            public static Value GetDirVisual(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.GetDirVisual(leftInstance, rightInstance));
            }

            /// <summary>
            /// Returns true when object is in diver state - e.g when the unit would put diving goggles on. Diving goggles remove blurriness underwater, however when assigned, they do not appear on the face of the unit until the unit steps into the water. This command allows to detect the moment when the goggles are visible. If the unit doesn't have diving goggles assigned, this command would still return true at appropriate time if the unit steps into the water.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value bool</returns>
            public static Value GetDiverState(Value rightInstance)
            {
                return new Value(GameValueMethods.GetDiverState(rightInstance));
            }

            /// <summary>
            /// Returns an array of the DLC usage times.
            /// </summary>
            /// <returns>Value array</returns>
            public static Value GetDLCAssetsUsage()
            {
                return new Value(GameValueMethods.GetDLCAssetsUsage());
            }

            /// <summary>
            /// Returns an array with the session and global time the asset has been used.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value GetDLCAssetsUsageByName(Value rightInstance)
            {
                return new Value(GameValueMethods.GetDLCAssetsUsageByName(rightInstance));
            }

            /// <summary>
            /// Returns array of app IDs of DLCs.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value GetDLCs(Value rightInstance)
            {
                return new Value(GameValueMethods.GetDLCs(rightInstance));
            }

            /// <summary>
            /// Returns total time the assets of the given DLC have been used. See Arma 3 DLCs & Expansions for a list of DLCs and ids.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value scalar</returns>
            public static Value GetDLCUsageTime(Value rightInstance)
            {
                return new Value(GameValueMethods.GetDLCUsageTime(rightInstance));
            }

            /// <summary>
            /// Fetches a reference to the mission editor camera. Some Old Editor Command
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value object</returns>
            public static Value GetEditorCamera(Value rightInstance)
            {
                return new Value(GameValueMethods.GetEditorCamera(rightInstance));
            }

            /// <summary>
            /// Returns the current mode of the editor. Some Old Editor Command
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value string</returns>
            public static Value GetEditorMode(Value rightInstance)
            {
                return new Value(GameValueMethods.GetEditorMode(rightInstance));
            }

            /// <summary>
            /// Returns the editor object scope of the specified editor object. Some Old Editor Command
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value string</returns>
            public static Value GetEditorObjectScope(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.GetEditorObjectScope(leftInstance, rightInstance));
            }

            /// <summary>
            /// Returns the map elevation offset from [map]/config.cpp. Returns 0 if there is no elevationOffset defined in the config of the current world.
            /// </summary>
            /// <returns>Value scalar</returns>
            public static Value GetElevationOffset()
            {
                return new Value(GameValueMethods.GetElevationOffset());
            }

            /// <summary>
            /// Returns RPM of all engines. For this command to have any effect, the Advanced Flight Model (AFM) has to be enabled. AFM status can be checked with difficultyEnabledRTD.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value GetEngineTargetRPMRTD(Value rightInstance)
            {
                return new Value(GameValueMethods.GetEngineTargetRPMRTD(rightInstance));
            }

            /// <summary>
            /// Returns value of the specified 3D controller, see getAllEnv3DSoundControllers.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value scalar</returns>
            public static Value GetEnv3DSoundController(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.GetEnv3DSoundController(leftInstance, rightInstance));
            }

            /// <summary>
            /// Returns value of the specified controller, see getAllEnvSoundControllers
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value scalar</returns>
            public static Value GetEnvSoundController(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.GetEnvSoundController(leftInstance, rightInstance));
            }

            /// <summary>
            /// Queries given event handler's information.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value GetEventHandlerInfo(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.GetEventHandlerInfo(leftInstance, rightInstance));
            }

            /// <summary>
            /// Returns fatigue of given unit.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value scalar</returns>
            public static Value GetFatigue(Value rightInstance)
            {
                return new Value(GameValueMethods.GetFatigue(rightInstance));
            }

            /// <summary>
            /// Returns array of the starting topic and hint the given field manual should display.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value GetFieldManualStartPage(Value rightInstance)
            {
                return new Value(GameValueMethods.GetFieldManualStartPage(rightInstance));
            }

            /// <summary>
            /// A getter for forceFlagTexture. Forced texture is different from your normal flag texture, which can be retrieved with flagTexture
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value string</returns>
            public static Value GetForcedFlagTexture(Value rightInstance)
            {
                return new Value(GameValueMethods.GetForcedFlagTexture(rightInstance));
            }

            /// <summary>
            /// Returns forced speed set with forceSpeed or -1 if not set.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value scalar</returns>
            public static Value GetForcedSpeed(Value rightInstance)
            {
                return new Value(GameValueMethods.GetForcedSpeed(rightInstance));
            }

            /// <summary>
            /// Returns if sides are friendly or hostile. For a value smaller than 0.6 it results in being enemy, otherwise it is friendly. See also Side Relations.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value scalar</returns>
            public static Value GetFriend(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.GetFriend(leftInstance, rightInstance));
            }

            /// <summary>
            /// Return the value of variable in the variable space of given FSM. The FSM handle is the number returned by the execFSM command.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value any</returns>
            public static Value GetFSMVariable(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.GetFSMVariable(leftInstance, rightInstance));
            }

            /// <summary>
            /// Returns the fuel amount (1 is full) in the cargo space of a refueling vehicle. Since Arma 3 v1.96 the return value for vehicles that are not configured to have ability to refuel other vehicles is -1. (Prior to that the value was negative infinity)
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value scalar</returns>
            public static Value GetFuelCargo(Value rightInstance)
            {
                return new Value(GameValueMethods.GetFuelCargo(rightInstance));
            }

            /// <summary>
            /// Generate graph y - coordinates of all input values within specific x and y range.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value GetGraphValues(Value rightInstance)
            {
                return new Value(GameValueMethods.GetGraphValues(rightInstance));
            }

            /// <summary>
            /// Get group icon properties.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value GetGroupIcon(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.GetGroupIcon(leftInstance, rightInstance));
            }

            /// <summary>
            /// Returns group icons params used for command bar drawing such as color, text, scale, visibility, waypoint visibility, waypoint color.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value GetGroupIconParams(Value rightInstance)
            {
                return new Value(GameValueMethods.GetGroupIconParams(rightInstance));
            }

            /// <summary>
            /// Returns all group icons. [id,icon,[offsetx,offsety],[..],..]
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value GetGroupIcons(Value rightInstance)
            {
                return new Value(GameValueMethods.GetGroupIcons(rightInstance));
            }

            /// <summary>
            /// Returns the Position where object believes the enemy to be. If there is no direct line of sight between the object and the enemy, this position is extrapolated based on the last known position and speed of the enemy. A returned position of [0,0,0] implies that object does not knowAbout enemy. If enemy is null it is some position in front of the object or enemy position.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value GetHideFrom(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.GetHideFrom(leftInstance, rightInstance));
            }

            /// <summary>
            /// Returns selection damage. Same as getHitPointDamage, only the argument is selection part instead of hit point. Some part names are in Czech; see the translation table.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value scalar</returns>
            public static Value GetHit(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.GetHit(leftInstance, rightInstance));
            }

            /// <summary>
            /// Return current level of damage for a specific Hit Point (specified by its hit part index). All hit points can be obtained with getAllHitPointsDamage command. 0: no damage 1: full damage
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value scalar</returns>
            public static Value GetHitIndex(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.GetHitIndex(leftInstance, rightInstance));
            }

            /// <summary>
            /// Return current level of damage in range 0..1 for a specific Hit Point (specified by its config class). If you need to get damage of a selection instead of hit point, use getHit.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value scalar</returns>
            public static Value GetHitPointDamage(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.GetHitPointDamage(leftInstance, rightInstance));
            }

            /// <summary>
            /// Returns all items names and count from ammo box (or any general weapon holder container).
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value GetItemCargo(Value rightInstance)
            {
                return new Value(GameValueMethods.GetItemCargo(rightInstance));
            }

            /// <summary>
            /// Gets general environment's light settings.
            /// </summary>
            /// <returns>Value array</returns>
            public static Value GetLighting()
            {
                return new Value(GameValueMethods.GetLighting());
            }

            /// <summary>
            /// Gets provided object's lighting information. The command will use local player's night vision state to determine whether to include IR lights in the result or not. On a dedicated server, headless client or if the player is null, the night vision state will always be off.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value GetLightingAt(Value rightInstance)
            {
                return new Value(GameValueMethods.GetLightingAt(rightInstance));
            }

            /// <summary>
            /// Returns information about all loaded modifications. The first 7 values are equal to what is printed in RPT on game startup in the ======== mods ======= category.
            /// </summary>
            /// <returns>Value array</returns>
            public static Value GetLoadedModsInfo()
            {
                return new Value(GameValueMethods.GetLoadedModsInfo());
            }

            /// <summary>
            /// Returns all magazines types and count from the cargo space
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value GetMagazineCargo(Value rightInstance)
            {
                return new Value(GameValueMethods.GetMagazineCargo(rightInstance));
            }

            /// <summary>
            /// Returns marker color for given marker. This command is identical to markerColor.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value string</returns>
            public static Value GetMarkerColor(Value rightInstance)
            {
                return new Value(GameValueMethods.GetMarkerColor(rightInstance));
            }

            /// <summary>
            /// Returns marker position.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value GetMarkerPos(Value rightInstance)
            {
                return new Value(GameValueMethods.GetMarkerPos(rightInstance));
            }

            /// <summary>
            /// Returns the size of the given marker. A getter for setMarkerSize and an alias of markerSize.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value GetMarkerSize(Value rightInstance)
            {
                return new Value(GameValueMethods.GetMarkerSize(rightInstance));
            }

            /// <summary>
            /// Gets type of marker. See CfgMarkers for a list of standard markers.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value string</returns>
            public static Value GetMarkerType(Value rightInstance)
            {
                return new Value(GameValueMethods.GetMarkerType(rightInstance));
            }

            /// <summary>
            /// Returns mass of a PhysX object.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value scalar</returns>
            public static Value GetMass(Value rightInstance)
            {
                return new Value(GameValueMethods.GetMass(rightInstance));
            }

            /// <summary>
            /// Returns Config entry for the given scenario attribute from the 1st tier. The attribute can be config class or config property. If it is defined in multiple places, the command checks them in the following order: External Description.ext file Eden Editor scenario attribute So if attribute exists in both places, attribute from description.ext is used. Previously, scenario attributes were extracted from Description.ext using missionConfigFile. That still works, but it ignores attributes set directly in the editor and it should not be used anymore.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value config</returns>
            public static Value GetMissionConfig(Value rightInstance)
            {
                return new Value(GameValueMethods.GetMissionConfig(rightInstance));
            }

            /// <summary>
            /// Returns value of the given scenario attribute from the 1st tier. Since only config properties have values, the attribute should be config property. If it is not found or config class is given, the return is nil. If the attribute defined in multiple places, the command checks them in the following order: External Description.ext file Eden Editor scenario attribute So if attribute exists in both places, attribute from description.ext is used. Previously, scenario attributes were extracted from Description.ext using missionConfigFile. That still works, but it ignores attributes set directly in the editor and it should not be used anymore. ⚠This command cannot force return type, it will return the value of the type given in config. Use isEqualType to additionally reaffirm the correct type if necessary to account for human error.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value array_string</returns>
            public static Value GetMissionConfigValue(Value rightInstance)
            {
                return new Value(GameValueMethods.GetMissionConfigValue(rightInstance));
            }

            /// <summary>
            /// Returns list of DLCs that are used in the mission. ⚠The list is created from units listed in mission.sqm and does not detect units later created by scripts.
            /// </summary>
            /// <returns>Value array</returns>
            public static Value GetMissionDLCs()
            {
                return new Value(GameValueMethods.GetMissionDLCs());
            }

            /// <summary>
            /// Returns all entities within the specific Eden Editor layer and its sub-layers. To be used when the scenario is running, not in the editor workspace. Useful to disable/enable whole parts of the scenario if layers are used during mission design. Default layers are not returned.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value GetMissionLayerEntities(Value rightInstance)
            {
                return new Value(GameValueMethods.GetMissionLayerEntities(rightInstance));
            }

            /// <summary>
            /// Returns a list of all layers created in Eden Editor. Designed to be used during a scenario. Default layers (BLUFOR, OPFOR...) are not returned.
            /// </summary>
            /// <returns>Value array</returns>
            public static Value GetMissionLayers()
            {
                return new Value(GameValueMethods.GetMissionLayers());
            }

            /// <summary>
            /// Returns mission root plus the filename in a form of filepath to be used with commands requiring absolute path such as playSound3D, drawIcon3D, createSimpleObject, etc. Any leading "\" in the filename will be stripped as the mission root includes one already.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value string</returns>
            public static Value GetMissionPath(Value rightInstance)
            {
                return new Value(GameValueMethods.GetMissionPath(rightInstance));
            }

            /// <summary>
            /// Returns object's model info. Model path is suitable for use with createSimpleObject command. Since Arma 3 v2.08.148608 the command also returns placing point of the model in model coordinates. Placing point is always in format [0,0,z].
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value GetModelInfo(Value rightInstance)
            {
                return new Value(GameValueMethods.GetModelInfo(rightInstance));
            }

            /// <summary>
            /// Returns mouse position in UI coordinates.
            /// </summary>
            /// <returns>Value array</returns>
            public static Value GetMousePosition()
            {
                return new Value(GameValueMethods.GetMousePosition());
            }

            /// <summary>
            /// Returns elapsed time in seconds for currently playing music track.
            /// </summary>
            /// <returns>Value scalar</returns>
            public static Value GetMusicPlayedTime()
            {
                return new Value(GameValueMethods.GetMusicPlayedTime());
            }

            /// <summary>
            /// Extract number from config entry.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value scalar</returns>
            public static Value GetNumber(Value rightInstance)
            {
                return new Value(GameValueMethods.GetNumber(rightInstance));
            }

            /// <summary>
            /// Return name of object argument in mission editor. Some Old Editor Command
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value string</returns>
            public static Value GetObjectArgument(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.GetObjectArgument(leftInstance, rightInstance));
            }

            /// <summary>
            /// Return a list of all the children of the specified object. Some Old Editor Command
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value GetObjectChildren(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.GetObjectChildren(leftInstance, rightInstance));
            }

            /// <summary>
            /// Returns appID of the DLC the object belongs to or nil if object is vanilla.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value scalar</returns>
            public static Value GetObjectDLC(Value rightInstance)
            {
                return new Value(GameValueMethods.GetObjectDLC(rightInstance));
            }

            /// <summary>
            /// Returns Field of View of the given object in radians. Static objects return default value, which is 1. FOV of objNull is 0. Object FOV is indirectly connected with optics magnification or player view zoom, the narrower the angle the greater the zoom. The FOV returned by this command doesn't change if user has custom FOV set in profile. Use it in combination with getResolution to adjust for the difference if required.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value scalar</returns>
            public static Value GetObjectFOV(Value rightInstance)
            {
                return new Value(GameValueMethods.GetObjectFOV(rightInstance));
            }

            /// <summary>
            /// Returns Visitor ID of the given object. Visitor IDs of static map objects can change if map is in development and updated with new static objects.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value string</returns>
            public static Value GetObjectID(Value rightInstance)
            {
                return new Value(GameValueMethods.GetObjectID(rightInstance));
            }

            /// <summary>
            /// Gets all custom materials associated with the object.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value GetObjectMaterials(Value rightInstance)
            {
                return new Value(GameValueMethods.GetObjectMaterials(rightInstance));
            }

            /// <summary>
            /// Return the proxy object associated with the given editor object. Some Old Editor Command
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value object</returns>
            public static Value GetObjectProxy(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.GetObjectProxy(leftInstance, rightInstance));
            }

            /// <summary>
            /// Returns the render scale of the object relative to the original model.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value scalar</returns>
            public static Value GetObjectScale(Value rightInstance)
            {
                return new Value(GameValueMethods.GetObjectScale(rightInstance));
            }

            /// <summary>
            /// Gets all custom textures (hiddenSelectionsTextures) associated with the object. ⚠It will return an empty Array when executed on simple objects.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value GetObjectTextures(Value rightInstance)
            {
                return new Value(GameValueMethods.GetObjectTextures(rightInstance));
            }

            /// <summary>
            /// Returns object type as a number: 1 - Primary - Normal object placed in Visitor, part of landscape 2 - Network - Road placed in Visitor, part of landscape 4 - Temporary - Temporary object (like tracks) 8 - TypeVehicle - Some entity added by game 16 - TypeTempVehicle - Temporary entity 32 - LandDecal - Land decal
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value scalar</returns>
            public static Value GetObjectType(Value rightInstance)
            {
                return new Value(GameValueMethods.GetObjectType(rightInstance));
            }

            /// <summary>
            /// Gets the values of rendering distances of objects and shadows.
            /// </summary>
            /// <returns>Value array</returns>
            public static Value GetObjectViewDistance()
            {
                return new Value(GameValueMethods.GetObjectViewDistance());
            }

            /// <summary>
            /// Returns the class name of the current optic mode of the current weapon.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value string</returns>
            public static Value GetOpticsMode(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.GetOpticsMode(leftInstance, rightInstance));
            }

            /// <summary>
            /// Retrieves a value out of a HashMap after looking it up by its key. When the HashMap doesn't contain the key, the default value is returned
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value any</returns>
            public static Value GetOrDefault(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.GetOrDefault(leftInstance, rightInstance));
            }

            /// <summary>
            /// Retrieves a value from the HashMap for the given 'key', executes given 'code' if key was not found and returns result. Additionally sets key to the code result value if 'set' is true.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value any</returns>
            public static Value GetOrDefaultCall(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.GetOrDefaultCall(leftInstance, rightInstance));
            }

            /// <summary>
            /// Returns amount of remaining oxygen.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value scalar</returns>
            public static Value GetOxygenRemaining(Value rightInstance)
            {
                return new Value(GameValueMethods.GetOxygenRemaining(rightInstance));
            }

            /// <summary>
            /// Returns a list of all DLCs objects the unit is currently using. For example if a unit is inside a vehicle from DLC, it will return the code of that DLC.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value GetPersonUsedDLCs(Value rightInstance)
            {
                return new Value(GameValueMethods.GetPersonUsedDLCs(rightInstance));
            }

            /// <summary>
            /// Returns model space vector of the object airplane or helicopter pilotCamera .
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value GetPilotCameraDirection(Value rightInstance)
            {
                return new Value(GameValueMethods.GetPilotCameraDirection(rightInstance));
            }

            /// <summary>
            /// Returns model space coordinates of the object airplane or helicopter pilotCamera.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value GetPilotCameraPosition(Value rightInstance)
            {
                return new Value(GameValueMethods.GetPilotCameraPosition(rightInstance));
            }

            /// <summary>
            /// Returns rotation (relative to the centered camera position) of the object airplane or helicopter pilotCamera .
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value GetPilotCameraRotation(Value rightInstance)
            {
                return new Value(GameValueMethods.GetPilotCameraRotation(rightInstance));
            }

            /// <summary>
            /// Returns the target of the object airplane or helicopter pilotCamera tracking.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value GetPilotCameraTarget(Value rightInstance)
            {
                return new Value(GameValueMethods.GetPilotCameraTarget(rightInstance));
            }

            /// <summary>
            /// Get the set PiP (Picture-in-Picture) view distance (that can be set by setPiPViewDistance).
            /// </summary>
            /// <returns>Value scalar</returns>
            public static Value GetPiPViewDistance()
            {
                return new Value(GameValueMethods.GetPiPViewDistance());
            }

            /// <summary>
            /// Get the license plates from any vehicle which has plates configured.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value string</returns>
            public static Value GetPlateNumber(Value rightInstance)
            {
                return new Value(GameValueMethods.GetPlateNumber(rightInstance));
            }

            /// <summary>
            /// Returns channel number for given player, provided that player is speaking, otherwise -1. Having mic on is not enough, player has to make a sound. There are several limitations to this command: It does not work on dedicated server, the return is always -1, only client can detect other client talking. Prior to Arma 3 v2.01.146856 did not detect when someone talked on direct chat at all anywhere. The client on which command is executed has to able to receive transmission before the transmission channel can be detected. For example if a player is not in the same group as a speaker and the speaker speaks on Group Channel, the player cannot hear the speaker and therefore cannot detect what channel the speaker is on. In short, this command mimics the speaking icon from the UI. Correspondence between channel and number: channel ID number correspondence N/A Global Side Command Group Vehicle Direct Custom1 Custom2 Custom3 Custom4 Custom5 Custom6 Custom7 Custom8 Custom9 Custom10 -1 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value scalar</returns>
            public static Value GetPlayerChannel(Value rightInstance)
            {
                return new Value(GameValueMethods.GetPlayerChannel(rightInstance));
            }

            /// <summary>
            /// Returns user DirectPlay ID, which can be used with getUserInfo, and is found in allMapMarkers results and in some mission event handlers such as PlayerConnected.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value string</returns>
            public static Value GetPlayerID(Value rightInstance)
            {
                return new Value(GameValueMethods.GetPlayerID(rightInstance));
            }

            /// <summary>
            /// In MP: Returns the unit's table of scores (infantry kills, soft vehicle kills, armor kills, air kills, deaths, total score). In SP: Empty array []
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value GetPlayerScores(Value rightInstance)
            {
                return new Value(GameValueMethods.GetPlayerScores(rightInstance));
            }

            /// <summary>
            /// Return a UniqueID of the given unit (player). The returned string is the player's steamID64: private _steamProfileUrl = "http://steamcommunity.com/profiles/" + (getPlayerUID player); ⚠Prior to Arma 2: Operation Arrowhead v1.60, the result always consisted of a stringified number (see getPlayerUIDOld), but always had to be considered and processed as a String. Converting it to a Number could cause precision problems, as Number cannot accurately represent integers above 16777216 (224). Moreover, games since Arma 2: Operation Arrowhead v1.61 provide a value that is not all-numeric. Prior to Arma 3 v2.02, in some cases the identity of certain player units could fail to propagate to other clients and the server, which caused isPlayer and getPlayerUID to incorrectly return false and "" respectively, where the affected units were not local. See this bug report (GitHub) for more info. This was supposedly fixed, but you should remain vigilant toward false negatives nonetheless.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value string</returns>
            public static Value GetPlayerUID(Value rightInstance)
            {
                return new Value(GameValueMethods.GetPlayerUID(rightInstance));
            }

            /// <summary>
            /// Gets provided player's Voice over Network (VoN) volume.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value scalar</returns>
            public static Value GetPlayerVoNVolume(Value rightInstance)
            {
                return new Value(GameValueMethods.GetPlayerVoNVolume(rightInstance));
            }

            /// <summary>
            /// Returns object or location position. If the argument is an object, the return value is in format PositionAGLS. The alternative syntax gets the position given distance and heading away from provided object or position - the command equivalent of BIS_fnc_relPos. ⚠Do not use this command to get an object's position in 3D format: the Z value from this command is relative to the surface underneath, and there is no compatible setter command to use it with;the commonly misused code: _obj1 setPos getPos _obj2 is absolutely wrong this command is significantly slower than other position commands because it has to calculate the surface below a position from objects in the (2D) area; its performance therefore suffers from areas with a high density of objects such as cities, and can easily be ~20x slower than other, simpler position commands - see this benchmark. The only correct usage of this command is to determine the altitude of an object from the surface below it (see Example 5).
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value GetPos(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.GetPos(leftInstance, rightInstance));
            }

            /// <summary>
            /// Returns the object position height above sea level.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value GetPosASL(Value rightInstance)
            {
                return new Value(GameValueMethods.GetPosASL(rightInstance));
            }

            /// <summary>
            /// Returns an object's rendered ASL position (z value above sea level) in render time scope.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value GetPosASLVisual(Value rightInstance)
            {
                return new Value(GameValueMethods.GetPosASLVisual(rightInstance));
            }

            /// <summary>
            /// Returns the object position height above water surface (waves and pond objects included).
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value GetPosASLW(Value rightInstance)
            {
                return new Value(GameValueMethods.GetPosASLW(rightInstance));
            }

            /// <summary>
            /// Returns the position of an object relative to the terrain.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value GetPosATL(Value rightInstance)
            {
                return new Value(GameValueMethods.GetPosATL(rightInstance));
            }

            /// <summary>
            /// Returns an object's rendered ATL position (z value above ground) in render time scope.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value GetPosATLVisual(Value rightInstance)
            {
                return new Value(GameValueMethods.GetPosATLVisual(rightInstance));
            }

            /// <summary>
            /// Returns an object's AGLS position in render time scope. Alias of visiblePosition. ⚠This command should not be used for actual 3D calculations. See getPos for more details.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value GetPosVisual(Value rightInstance)
            {
                return new Value(GameValueMethods.GetPosVisual(rightInstance));
            }

            /// <summary>
            /// Returns the provided object's model centre position ([0,0,0]) in PositionASL, rather than the transformed boundingCenter or LandContact vertices.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value GetPosWorld(Value rightInstance)
            {
                return new Value(GameValueMethods.GetPosWorld(rightInstance));
            }

            /// <summary>
            /// Returns the provided object's, model centre position in render version in format PositionASL, rather than transformed boundingCenter or LandContact vertices.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value GetPosWorldVisual(Value rightInstance)
            {
                return new Value(GameValueMethods.GetPosWorldVisual(rightInstance));
            }

            /// <summary>
            /// Return array of magazines on pylons.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value GetPylonMagazines(Value rightInstance)
            {
                return new Value(GameValueMethods.GetPylonMagazines(rightInstance));
            }

            /// <summary>
            /// Returns direction, which is relative to object's current direction, from given object to another object or position in the range from 0 to 360, the equivalent of BIS_fnc_relativeDirTo. Taking the current direction of the object into account.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value scalar</returns>
            public static Value GetRelDir(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.GetRelDir(leftInstance, rightInstance));
            }

            /// <summary>
            /// Returns position that is given distance and relative direction away from original object. The alternative syntax available from Arma 3 v 2.14, returns the position offset of the attached object. If the animated memory point is used for attachment, the offset is calculated in  render scope.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value GetRelPos(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.GetRelPos(leftInstance, rightInstance));
            }

            /// <summary>
            /// Get status of disabled raycasts for remote entities. See disableRemoteSensors for detailed description.
            /// </summary>
            /// <returns>Value bool</returns>
            public static Value GetRemoteSensorsDisabled()
            {
                return new Value(GameValueMethods.GetRemoteSensorsDisabled());
            }

            /// <summary>
            /// Returns the amount (1 is full) of repair resources in the cargo space of a repair vehicle. Since Arma 3 v1.96 the return value for vehicles that are not configured to have ability to repair other vehicles is -1. (Prior to that the value was negative infinity)
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value scalar</returns>
            public static Value GetRepairCargo(Value rightInstance)
            {
                return new Value(GameValueMethods.GetRepairCargo(rightInstance));
            }

            /// <summary>
            /// Returns an array containing all information about current client screen resolution. Render resolution is not returned by this command. A sampling setting of 50% means half of native width and half of native height, resulting in a render resolution of 25% the original resolution. ⚠The engine default value for fovTop is 0.75 in case it is needed to calculate difference with custom FOV. The aspectRatio is calculated as fovLeft / fovTop and should be the same as screenW / screenH for undistorted image if the FOV is custom. Some of the common values: 16/9 16/10 5/4 4/3 16/9 triple screen 1.777777(…) 1.6 1.25 1.333333(…) 5.333333(…)
            /// </summary>
            /// <returns>Value array</returns>
            public static Value GetResolution()
            {
                return new Value(GameValueMethods.GetResolution());
            }

            /// <summary>
            /// Returns road piece information. Bridges are special case. Only large bridges are part of Road Net. Small pedestrian bridges are not recognized as roads. Bridge "mapType" is "ROAD" so the best way to detect bridges is to check "isBridge" value. Bridges are not part of new roads and don't have the same info as other new roads, so only "mapType", "texture" (maybe "textureEnd"), "begPos", "endPos" and "isBridge" are  updated. Pedestrian roads "mapType" is usually "TRAIL". They are part of Road Net but excluded from path finding. Use roadsConnectedTo with alternative flag to find the connections between pedestrian roads.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value GetRoadInfo(Value rightInstance)
            {
                return new Value(GameValueMethods.GetRoadInfo(rightInstance));
            }

            /// <summary>
            /// Returns if rotor break is on. For this command to have any effect, the Advanced Flight Model (AFM) has to be enabled. AFM status can be checked with difficultyEnabledRTD.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value scalar</returns>
            public static Value GetRotorBrakeRTD(Value rightInstance)
            {
                return new Value(GameValueMethods.GetRotorBrakeRTD(rightInstance));
            }

            /// <summary>
            /// Returns vehicle sensors' potential targets.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value GetSensorTargets(Value rightInstance)
            {
                return new Value(GameValueMethods.GetSensorTargets(rightInstance));
            }

            /// <summary>
            /// Returns vehicle sensors' threats.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value GetSensorThreats(Value rightInstance)
            {
                return new Value(GameValueMethods.GetSensorThreats(rightInstance));
            }

            /// <summary>
            /// Gets the shadows rendering distance.
            /// </summary>
            /// <returns>Value scalar</returns>
            public static Value GetShadowDistance()
            {
                return new Value(GameValueMethods.GetShadowDistance());
            }

            /// <summary>
            /// Returns shot information for the given projectile. If shot was fired by a soldier on foot or in FFV position in vehicle, the soldier is returned for the vehicle.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value GetShotParents(Value rightInstance)
            {
                return new Value(GameValueMethods.GetShotParents(rightInstance));
            }

            /// <summary>
            /// Return object which is sling loaded by vehicle
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value object</returns>
            public static Value GetSlingLoad(Value rightInstance)
            {
                return new Value(GameValueMethods.GetSlingLoad(rightInstance));
            }

            /// <summary>
            /// Returns value of the given sound controller.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value scalar</returns>
            public static Value GetSoundController(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.GetSoundController(leftInstance, rightInstance));
            }

            /// <summary>
            /// Returns the calculated value of simple expression defined in config. Config could be any config entry, even  mission config entry. It is more important that the vehicle is a transport and not any object. If the expression contains sound controllers, the controller values will be taken from the given vehicle.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value scalar</returns>
            public static Value GetSoundControllerResult(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.GetSoundControllerResult(leftInstance, rightInstance));
            }

            /// <summary>
            /// Get the speed for the given speed mode. SpeedMode can be: "AUTO" "SLOW" "NORMAL" "FAST"
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value scalar</returns>
            public static Value GetSpeed(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.GetSpeed(leftInstance, rightInstance));
            }

            /// <summary>
            /// Get current stamina (~ seconds until depletion)
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value scalar</returns>
            public static Value GetStamina(Value rightInstance)
            {
                return new Value(GameValueMethods.GetStamina(rightInstance));
            }

            /// <summary>
            /// Returns value of the given stat. A list of possible StatNames can be found here: Arma 3: Stat Names
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value scalar</returns>
            public static Value GetStatValue(Value rightInstance)
            {
                return new Value(GameValueMethods.GetStatValue(rightInstance));
            }

            /// <summary>
            /// Returns servers information of Steam friends currently playing the game.
            /// </summary>
            /// <returns>Value array</returns>
            public static Value GetSteamFriendsServers()
            {
                return new Value(GameValueMethods.GetSteamFriendsServers());
            }

            /// <summary>
            /// Returns subtitles settings.
            /// </summary>
            /// <returns>Value array</returns>
            public static Value GetSubtitleOptions()
            {
                return new Value(GameValueMethods.GetSubtitleOptions());
            }

            /// <summary>
            /// Gets the suppression value for the given unit. Returns varying Number between 0 and 1, or -1 if suppression is disabled (disableAI "SUPPRESSION") or the suppression value is not available. Suppression is not calculated for player entities and is always 0, unless it is set with setSuppression. In this case the return value is the set value. Before Arma 3 v1.92 this command could return nil. ⚠The unit must not be objNull, must be local and alive
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value scalar</returns>
            public static Value GetSuppression(Value rightInstance)
            {
                return new Value(GameValueMethods.GetSuppression(rightInstance));
            }

            /// <summary>
            /// A getter for setTerrainGrid, returns the current terrain grid.
            /// </summary>
            /// <returns>Value scalar</returns>
            public static Value GetTerrainGrid()
            {
                return new Value(GameValueMethods.GetTerrainGrid());
            }

            /// <summary>
            /// Returns terrain height at the specified location. Unlike getTerrainHeightASL which returns the exact position's height, this command returns the height at the closest terrain grid pixel to the provided position: private _cellWidth = getTerrainInfo # 2; getTerrainHeightASL (_pos apply { _cellWidth * round (_x / _cellWidth) });
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value scalar</returns>
            public static Value GetTerrainHeight(Value rightInstance)
            {
                return new Value(GameValueMethods.GetTerrainHeight(rightInstance));
            }

            /// <summary>
            /// Returns the terrain height above the sea for the given position.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value scalar</returns>
            public static Value GetTerrainHeightASL(Value rightInstance)
            {
                return new Value(GameValueMethods.GetTerrainHeightASL(rightInstance));
            }

            /// <summary>
            /// Returns the terrain heightmap information, as well as sea level offset (due to tides, if available).
            /// </summary>
            /// <returns>Value array</returns>
            public static Value GetTerrainInfo()
            {
                return new Value(GameValueMethods.GetTerrainInfo());
            }

            /// <summary>
            /// Extracts localized text from config entry, if entry is subject to localization, otherwise returns text value. To obtain the translation key itself, see getTextRaw.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value string</returns>
            public static Value GetText(Value rightInstance)
            {
                return new Value(GameValueMethods.GetText(rightInstance));
            }

            /// <summary>
            /// Returns raw text from config entry. If entry is subject to  localization, the translation key is returned. To obtain the  localized text, see getText.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value string</returns>
            public static Value GetTextRaw(Value rightInstance)
            {
                return new Value(GameValueMethods.GetTextRaw(rightInstance));
            }

            /// <summary>
            /// Return texture information - resolution in pixels (mipmap level 0) and average colour. Multiply the pixel values by pixelW and pixelH to get screen coordinates.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value GetTextureInfo(Value rightInstance)
            {
                return new Value(GameValueMethods.GetTextureInfo(rightInstance));
            }

            /// <summary>
            /// Returns estimated width of the text based on font type and size. Similar to ctrlTextWidth but does not require a control and can be used to estimate text width for any control including buttons. Result does not include left and right margins (hardcoded at 0.008 each). This command always uses unicode (see also forceUnicode).
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value scalar</returns>
            public static Value GetTextWidth(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.GetTextWidth(leftInstance, rightInstance));
            }

            /// <summary>
            /// 
            /// </summary>
            /// <returns>Value hashmap</returns>
            public static Value GetTIParameters()
            {
                return new Value(GameValueMethods.GetTIParameters());
            }

            /// <summary>
            /// Returns total DLC usage time in this game session
            /// </summary>
            /// <returns>Value scalar</returns>
            public static Value GetTotalDLCUsageTime()
            {
                return new Value(GameValueMethods.GetTotalDLCUsageTime());
            }

            /// <summary>
            /// Get the vehicle towing the provided one.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value object</returns>
            public static Value GetTowParent(Value rightInstance)
            {
                return new Value(GameValueMethods.GetTowParent(rightInstance));
            }

            /// <summary>
            /// Returns controls trim offset.For this command to have any effect, the Advanced Flight Model (AFM) has to be enabled. AFM status can be checked with difficultyEnabledRTD.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value GetTrimOffsetRTD(Value rightInstance)
            {
                return new Value(GameValueMethods.GetTrimOffsetRTD(rightInstance));
            }

            /// <summary>
            /// Returns the rotation and elevation limits for the given turret.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value GetTurretLimits(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.GetTurretLimits(leftInstance, rightInstance));
            }

            /// <summary>
            /// Get the current optics mode of the optics in the turret occupied by the specified unit. The alternative syntax allows a vehicle and turret path to be specified without needing a unit.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value GetTurretOpticsMode(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.GetTurretOpticsMode(leftInstance, rightInstance));
            }

            /// <summary>
            /// Returns a unit's freefall information.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value GetUnitFreefallInfo(Value rightInstance)
            {
                return new Value(GameValueMethods.GetUnitFreefallInfo(rightInstance));
            }

            /// <summary>
            /// Returns a Unit Loadout Array with all assigned items, weapons, containers and their stored items. The config should contain the following standard entries: Show text class MyLoadout { 	uniformClass = "U_B_CombatUniform_mcam"; 	backpack = "B_AssaultPack_mcamo"; 	linkedItems[] = { "V_PlateCarrier1_rgr", "H_HelmetB", "ItemCompass", "ItemWatch", "ItemRadio", "NVGoggles" }; 	weapons[] = { "arifle_MX_ACO_pointer_F", "hgun_P07_F" }; 	items[] = { "FirstAidKit", "FirstAidKit", "FirstAidKit" }; 	magazines[] = { 		"30Rnd_65x39_caseless_mag", "16Rnd_9x21_Mag", 		"SmokeShell", 		"HandGrenade", "HandGrenade", "HandGrenade", "HandGrenade", "HandGrenade", "HandGrenade", "HandGrenade", 		"HandGrenade", "HandGrenade", "HandGrenade", "HandGrenade", "HandGrenade", "HandGrenade", "HandGrenade", 		"HandGrenade", "HandGrenade", "HandGrenade", "HandGrenade", "HandGrenade", "HandGrenade", "HandGrenade" 	}; };
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value GetUnitLoadout(Value rightInstance)
            {
                return new Value(GameValueMethods.GetUnitLoadout(rightInstance));
            }

            /// <summary>
            /// Gets the current value of a trait of the given unit. For the default values please visit setUnitTrait.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing_bool</returns>
            public static Value GetUnitTrait(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.GetUnitTrait(leftInstance, rightInstance));
            }

            /// <summary>
            /// A getter for setUnloadInCombat. To return global config value see canUnloadInCombat
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value GetUnloadInCombat(Value rightInstance)
            {
                return new Value(GameValueMethods.GetUnloadInCombat(rightInstance));
            }

            /// <summary>
            /// Returns extended information about given server user.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value GetUserInfo(Value rightInstance)
            {
                return new Value(GameValueMethods.GetUserInfo(rightInstance));
            }

            /// <summary>
            /// Returns array of user text variables used in MFD.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value GetUserMFDText(Value rightInstance)
            {
                return new Value(GameValueMethods.GetUserMFDText(rightInstance));
            }

            /// <summary>
            /// Returns array of user text variables used in MFD.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value GetUserMFDValue(Value rightInstance)
            {
                return new Value(GameValueMethods.GetUserMFDValue(rightInstance));
            }

            /// <summary>
            /// Returns the value of variable in the variable space assigned to various data types. All available data types combinations: Primary syntax (String) Alternative syntax (Array) Code Since Code Since Namespace getVariable String - Namespace getVariable Array Arma 2: Operation Arrowhead v1.60 Object getVariable String - Object getVariable Array - Group getVariable String - Group getVariable Array - Team Member getVariable String - Team Member getVariable Array - Task getVariable String - Task getVariable Array Arma 3 v1.68 Location getVariable String - Location getVariable Array Arma 3 v1.68 Control getVariable String - Control getVariable Array Arma 3 v1.56 Display getVariable String Arma 3 v1.56 Display getVariable Array Arma 3 v1.56 ⚠When variable is set on a Task, it is not actually set on the task itself, but on the FSM attached to the task. If there is no FSM, getVariable will not work. In the case of Alt Syntax usage in Arma 3, defaultValue will be returned if: Requested variable is either undefined or nil Variable namespace is null (objNull, grpNull, etc.)
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value any</returns>
            public static Value GetVariable(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.GetVariable(leftInstance, rightInstance));
            }

            /// <summary>
            /// Get a list of vehicles loaded as cargo inside this vehicle. The returned array is in the order the cargo vehicles were added to containing vehicle.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value GetVehicleCargo(Value rightInstance)
            {
                return new Value(GameValueMethods.GetVehicleCargo(rightInstance));
            }

            /// <summary>
            /// 
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value GetVehicleTIPars(Value rightInstance)
            {
                return new Value(GameValueMethods.GetVehicleTIPars(rightInstance));
            }

            /// <summary>
            /// Obtain the current system's video settings.
            /// </summary>
            /// <returns>Value hashmap</returns>
            public static Value GetVideoOptions()
            {
                return new Value(GameValueMethods.GetVideoOptions());
            }

            /// <summary>
            /// Returns all weapons types and count from the cargo space
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value GetWeaponCargo(Value rightInstance)
            {
                return new Value(GameValueMethods.GetWeaponCargo(rightInstance));
            }

            /// <summary>
            /// Returns current size of weapon sway of a given unit, in radians.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value scalar</returns>
            public static Value GetWeaponSway(Value rightInstance)
            {
                return new Value(GameValueMethods.GetWeaponSway(rightInstance));
            }

            /// <summary>
            /// Returns orientation of horizontal stabilizers.For this command to have any effect, the Advanced Flight Model (AFM) has to be enabled. AFM status can be checked with difficultyEnabledRTD.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value scalar</returns>
            public static Value GetWingsOrientationRTD(Value rightInstance)
            {
                return new Value(GameValueMethods.GetWingsOrientationRTD(rightInstance));
            }

            /// <summary>
            /// Returns position of stabilizers.For this command to have any effect, the Advanced Flight Model (AFM) has to be enabled. AFM status can be checked with difficultyEnabledRTD.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value scalar</returns>
            public static Value GetWingsPositionRTD(Value rightInstance)
            {
                return new Value(GameValueMethods.GetWingsPositionRTD(rightInstance));
            }

            /// <summary>
            /// Returns the position of a selected waypoint of a given group. Waypoints include only those which were placed in the mission editor.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value GetWPPos(Value rightInstance)
            {
                return new Value(GameValueMethods.GetWPPos(rightInstance));
            }

            /// <summary>
            /// Control what the unit(s) is/are glancing at (target or Position). If target is used, it will get revealed fully. How frequently the unit(s) is/are glancing there depends on behaviour.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value GlanceAt(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.GlanceAt(leftInstance, rightInstance));
            }

            /// <summary>
            /// Types text to the global radio channel. The text will be visible only on the PC where command was executed. If you need the message to show on all computers, you have to execute it globally (see remoteExec).
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value GlobalChat(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.GlobalChat(leftInstance, rightInstance));
            }

            /// <summary>
            /// Sends the audio message to the global radio channel. The message is defined in CfgRadio in the description.ext file or config radio protocol. The transmission will play only on the PC where command was executed. If you need the transmission to play on all computers, you have to execute it globally (see remoteExec). When transmitting unit gets killed, transmission will be interrupted. However when receiving unit gets killed, the transmission continues to play.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value GlobalRadio(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.GlobalRadio(leftInstance, rightInstance));
            }

            /// <summary>
            /// Returns name of currently used goggles (for NVGoggles use hmd).
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value string</returns>
            public static Value Goggles(Value rightInstance)
            {
                return new Value(GameValueMethods.Goggles(rightInstance));
            }

            /// <summary>
            /// 
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value Goto(Value rightInstance)
            {
                return new Value(GameValueMethods.Goto(rightInstance));
            }

            /// <summary>
            /// Returns the group a unit is assigned to.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value group</returns>
            public static Value Group(Value rightInstance)
            {
                return new Value(GameValueMethods.Group(rightInstance));
            }

            /// <summary>
            /// Types text to the group radio channel. The text will be visible only on the PC where command was executed. If you need the message to show on all computers, you have to execute it globally (see remoteExec). ⚠The unit must have an assigned radio item (such as "ItemRadio") to see or transmit the messages. A radio item must have the property simulation = "ItemRadio"; in its CfgWeapons config.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value GroupChat(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.GroupChat(leftInstance, rightInstance));
            }

            /// <summary>
            /// Get group with given unique ID. For objects use objectFromNetId. As this command is MP only, you can use BIS_fnc_groupFromNetId, which extends the use to SP as well.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value group</returns>
            public static Value GroupFromNetId(Value rightInstance)
            {
                return new Value(GameValueMethods.GroupFromNetId(rightInstance));
            }

            /// <summary>
            /// Returns whether or not group icons raise onGroupIconClick, onGroupIconOverEnter and onGroupIconOverLeave events.
            /// </summary>
            /// <returns>Value bool</returns>
            public static Value GroupIconSelectable()
            {
                return new Value(GameValueMethods.GroupIconSelectable());
            }

            /// <summary>
            /// Returns array with group icons visibility. A getter for setGroupIconsVisible
            /// </summary>
            /// <returns>Value array</returns>
            public static Value GroupIconsVisible()
            {
                return new Value(GameValueMethods.GroupIconsVisible());
            }

            /// <summary>
            /// 
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value scalar</returns>
            public static Value GroupId(Value rightInstance)
            {
                return new Value(GameValueMethods.GroupId(rightInstance));
            }

            /// <summary>
            /// Returns the  machine network ID of the client to which the group is local. This command only works when called from the server. When called from a client, it always returns 0.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value scalar</returns>
            public static Value GroupOwner(Value rightInstance)
            {
                return new Value(GameValueMethods.GroupOwner(rightInstance));
            }

            /// <summary>
            /// Sends the audio message to the group radio channel. The message is defined in CfgRadio in the description.ext file or config radio protocol.  ⚠The unit must have an assigned radio item (such as "ItemRadio") to see or transmit the messages. A radio item must have the property simulation = "ItemRadio"; in its CfgWeapons config. When transmitting unit gets killed, transmission will be interrupted. However when receiving unit gets killed, the transmission continues to play.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value GroupRadio(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.GroupRadio(leftInstance, rightInstance));
            }

            /// <summary>
            /// Returns an array with all groups of given side.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value Groups(Value rightInstance)
            {
                return new Value(GameValueMethods.Groups(rightInstance));
            }

            /// <summary>
            /// Returns selected units in source group for normal commanding mode (individual units). For the High Command equivalent, see hcSelected.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value GroupSelectedUnits(Value rightInstance)
            {
                return new Value(GameValueMethods.GroupSelectedUnits(rightInstance));
            }

            /// <summary>
            /// Selects a unit from player's group. If player is the leader, the effect of this command is similar to player pressing F1, F2, F3 etc to highlight units in his squad, after which the unit command menu is shown. If leader is AI, player will get usual communication menu to interact with the leader.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value GroupSelectUnit(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.GroupSelectUnit(leftInstance, rightInstance));
            }

            /// <summary>
            /// A non-existing Group. To compare non-existent groups use isNull or isEqualTo: grpNull == grpNull;			// false isNull grpNull;				// true grpNull isEqualTo grpNull;	// true
            /// </summary>
            /// <returns>Value group</returns>
            public static Value GrpNull()
            {
                return new Value(GameValueMethods.GrpNull());
            }

            /// <summary>
            /// Returns the gunner of a vehicle.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value object</returns>
            public static Value Gunner(Value rightInstance)
            {
                return new Value(GameValueMethods.Gunner(rightInstance));
            }

            /// <summary>
            /// Return the current gusts value. Scale is 0 to 1.
            /// </summary>
            /// <returns>Value scalar</returns>
            public static Value Gusts()
            {
                return new Value(GameValueMethods.Gusts());
            }

            /// <summary>
            /// This command was meant to break the script into debugger, however currently it does not do anything except displaying and logging the following error: Error Debugger breakpoint hit.
            /// </summary>
            /// <returns>Value nothing</returns>
            public static Value Halt()
            {
                return new Value(GameValueMethods.Halt());
            }

            /// <summary>
            /// Returns array with all items assigned to the handgunWeapon except magazines. Use handgunMagazine command for the latter. This command is used for infantry weapons only.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value HandgunItems(Value rightInstance)
            {
                return new Value(GameValueMethods.HandgunItems(rightInstance));
            }

            /// <summary>
            /// Collects all loaded magazines from all handgunWeapon muzzles and returns them in Array, otherwise it returns []. This command is used for infantry weapons only.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value string</returns>
            public static Value HandgunMagazine(Value rightInstance)
            {
                return new Value(GameValueMethods.HandgunMagazine(rightInstance));
            }

            /// <summary>
            /// Returns the name of a unit's handgun (an empty string if there is none).
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value string</returns>
            public static Value HandgunWeapon(Value rightInstance)
            {
                return new Value(GameValueMethods.HandgunWeapon(rightInstance));
            }

            /// <summary>
            /// Checks if a soldier's hands are hit, which results in inaccurate aiming.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value scalar</returns>
            public static Value HandsHit(Value rightInstance)
            {
                return new Value(GameValueMethods.HandsHit(rightInstance));
            }

            /// <summary>
            /// Processes provided value's hash, and encodes it using Base64. The hash algorithm is FNV-1A 64bit. A hash value remains the same between game restarts but for Object and Group type, their hash being based on their netId.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value string</returns>
            public static Value HashValue(Value rightInstance)
            {
                return new Value(GameValueMethods.HashValue(rightInstance));
            }

            /// <summary>
            /// Returns true if the computer has an interface (a real player). False for a dedicated server or for a headless client.
            /// </summary>
            /// <returns>Value bool</returns>
            public static Value HasInterface()
            {
                return new Value(GameValueMethods.HasInterface());
            }

            /// <summary>
            /// Returns true if the object airplane or helicopter has a pilotCamera.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value bool</returns>
            public static Value HasPilotCamera(Value rightInstance)
            {
                return new Value(GameValueMethods.HasPilotCamera(rightInstance));
            }

            /// <summary>
            /// Checks if a unit has the given weapon in hands or on back/in holster. Weapons inside unit containers such as vest and backpack are not counted.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value bool</returns>
            public static Value HasWeapon(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.HasWeapon(leftInstance, rightInstance));
            }

            /// <summary>
            /// Returns selected groups in high command.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value HcAllGroups(Value rightInstance)
            {
                return new Value(GameValueMethods.HcAllGroups(rightInstance));
            }

            /// <summary>
            /// Returns parameters describing group in high command bar. Return value is array in format [groupName, teamName] or [] if error. Possible values for team name: "teammain" (default) "teamred" "teamgreen" "teamblue" "teamyellow"
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value HcGroupParams(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.HcGroupParams(leftInstance, rightInstance));
            }

            /// <summary>
            /// Returns group's high command commander.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value object</returns>
            public static Value HcLeader(Value rightInstance)
            {
                return new Value(GameValueMethods.HcLeader(rightInstance));
            }

            /// <summary>
            /// Remove all groups from unit's high command bar.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value HcRemoveAllGroups(Value rightInstance)
            {
                return new Value(GameValueMethods.HcRemoveAllGroups(rightInstance));
            }

            /// <summary>
            /// Removes group from unit's high command bar.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value HcRemoveGroup(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.HcRemoveGroup(leftInstance, rightInstance));
            }

            /// <summary>
            /// Returns selected groups in high command.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value HcSelected(Value rightInstance)
            {
                return new Value(GameValueMethods.HcSelected(rightInstance));
            }

            /// <summary>
            /// Select given group in high command bar.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value HcSelectGroup(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.HcSelectGroup(leftInstance, rightInstance));
            }

            /// <summary>
            /// Add group to unit's high command bar. The previous HC leader should be removed before adding the new one (see Example 3).
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value HcSetGroup(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.HcSetGroup(leftInstance, rightInstance));
            }

            /// <summary>
            /// Shows or hides high command bar. There must be some groups under HC command to show HC bar.Since Arma 3 v1.94 this command returns Nothing as it should
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value HcShowBar(Value rightInstance)
            {
                return new Value(GameValueMethods.HcShowBar(rightInstance));
            }

            /// <summary>
            /// Return whether the High Command bar is shown/active.
            /// </summary>
            /// <returns>Value bool</returns>
            public static Value HcShownBar()
            {
                return new Value(GameValueMethods.HcShownBar());
            }

            /// <summary>
            /// Returns headgear of unit.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value string</returns>
            public static Value Headgear(Value rightInstance)
            {
                return new Value(GameValueMethods.Headgear(rightInstance));
            }

            /// <summary>
            /// Hides dead body of the given unit. After a short delay, the body slowly sinks into the ground. After awhile, when group of the unit becomes grpNull, the body gets deleted and becomes objNull. If applied to alive unit, nothing happens until unit dies, then the unit's body gets hidden. If a dead unit is human player, the body is hidden but not deleted until player respawns.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value HideBody(Value rightInstance)
            {
                return new Value(GameValueMethods.HideBody(rightInstance));
            }

            /// <summary>
            /// Hide entity. Can be used on soldiers and vehicles, also on static objects.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value HideObject(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.HideObject(leftInstance, rightInstance));
            }

            /// <summary>
            /// This command is designed for MP. Hides object on all connected clients as well as JIP. Can be used on static objects. In singleplayer this command behaves just like hideObject.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value HideObjectGlobal(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.HideObjectGlobal(leftInstance, rightInstance));
            }

            /// <summary>
            /// Hides or shows the  simple object's provided selection.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value HideSelection(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.HideSelection(leftInstance, rightInstance));
            }

            /// <summary>
            /// Outputs a hint message to the right of the screen (left of the screen in Operation Flashpoint) with a sound (except in Armed Assault). To split message in multiple lines either use Structured Text or  (in lower case). Armed Assault hints are silent. For later titles, see hintSilent.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value Hint(Value rightInstance)
            {
                return new Value(GameValueMethods.Hint(rightInstance));
            }

            /// <summary>
            /// Displays a very basic message dialog in the center of the screen. Player control is taken away until "Continue" is pressed. The message dialog can be dragged around on the screen. After "Continue" has been pressed, the content of the hintC is repeated in a normal hint. In Singleplayer, the game is paused while the message dialog is visible.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value HintC(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.HintC(leftInstance, rightInstance));
            }

            /// <summary>
            /// Shows a text hint only when in cadetMode. The text can contain several lines.  is used to indicate the end of a line.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value HintCadet(Value rightInstance)
            {
                return new Value(GameValueMethods.HintCadet(rightInstance));
            }

            /// <summary>
            /// Same as hint, but without a sound.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value HintSilent(Value rightInstance)
            {
                return new Value(GameValueMethods.HintSilent(rightInstance));
            }

            /// <summary>
            /// Returns class name of currently used Head Mounted Display. Returns an empty string if the slot is empty.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value string</returns>
            public static Value Hmd(Value rightInstance)
            {
                return new Value(GameValueMethods.Hmd(rightInstance));
            }

            /// <summary>
            /// Host the multiplayer mission defined in the config class and opens the lobby with the scenario loaded. Must be called in UI action from a dialog.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value HostMission(Value rightInstance)
            {
                return new Value(GameValueMethods.HostMission(rightInstance));
            }

            /// <summary>
            /// Load HTML from file or URI using given control. File path is relative to current mission dir or an absolute path (with drive letter etc.). The command is subject to restrictions, imposed by CfgCommands class. Since 2.10 the 'title' attribute is supported within <img> and <a> html tags ⚠For unknown reasons, URL's length is limited to 255 characters.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value HtmlLoad(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.HtmlLoad(leftInstance, rightInstance));
            }

            /// <summary>
            /// Returns movement borders for HUD [min speed, max speed, min alt, max alt, min dir, max dir, position[x,y,z] or target]
            /// </summary>
            /// <returns>Value array</returns>
            public static Value HUDMovementLevels()
            {
                return new Value(GameValueMethods.HUDMovementLevels());
            }

            /// <summary>
            /// Returns the current humidity value. 0 is no humidity and 1 is 100% humidity. Humidity value quickly changes from 0 to 1 when rain starts, then slowly changes from 1 to 0 when rain stops.
            /// </summary>
            /// <returns>Value scalar</returns>
            public static Value Humidity()
            {
                return new Value(GameValueMethods.Humidity());
            }

            /// <summary>
            /// This operator creates a If Type which is used in the if-construct as described here.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value if</returns>
            public static Value If(Value rightInstance)
            {
                return new Value(GameValueMethods.If(rightInstance));
            }

            /// <summary>
            /// Creates a structured text containing the given image. Use setAttributes to set additional  attributes on the image.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value text</returns>
            public static Value Image(Value rightInstance)
            {
                return new Value(GameValueMethods.Image(rightInstance));
            }

            /// <summary>
            /// Imports all groups into the RTE.  Some Old Editor Command
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value ImportAllGroups(Value rightInstance)
            {
                return new Value(GameValueMethods.ImportAllGroups(rightInstance));
            }

            /// <summary>
            /// Returns a location's importance value.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value scalar</returns>
            public static Value Importance(Value rightInstance)
            {
                return new Value(GameValueMethods.Importance(rightInstance));
            }

            /// <summary>
            /// Checks whether value is in array, unit is in vehicle, position is inside location or ANSI string is part of other ANSI string. If Unicode support is desired, see forceUnicode. String comparison is case-sensitive (see Examples 2 and 6).
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value bool</returns>
            public static Value In(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.In(leftInstance, rightInstance));
            }

            /// <summary>
            /// Checks whether given position or object is inside given area. Use inAreaArray to check multiple positions/objects within area. This command also supports hexagon area which can be created from ellipse when both a and b are negative. Hexagon ellipses are also supported by both marker creation and drawEllipse.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value bool</returns>
            public static Value InArea(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.InArea(leftInstance, rightInstance));
            }

            /// <summary>
            /// Returns given list of Objects and/or Positions that are in the given area, area defined by a trigger, marker, location or array.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value InAreaArray(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.InAreaArray(leftInstance, rightInstance));
            }

            /// <summary>
            /// Returns the incapacitated sub-state of the given unit, when the lifeState of the unit is "INCAPACITATED". Could be one of: "UNCONSCIOUS" "MOVING" "SHOOTING"
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value string</returns>
            public static Value IncapacitatedState(Value rightInstance)
            {
                return new Value(GameValueMethods.IncapacitatedState(rightInstance));
            }

            /// <summary>
            /// Pre-defined variable for the independent side.
            /// </summary>
            /// <returns>Value side</returns>
            public static Value Independent()
            {
                return new Value(GameValueMethods.Independent());
            }

            /// <summary>
            /// Sets the state of a fireplace.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value Inflame(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.Inflame(leftInstance, rightInstance));
            }

            /// <summary>
            /// Checks if fireplace is inflamed (burning) or not. To check if a unit is receiving damage from fire, use isBurning command.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value bool</returns>
            public static Value Inflamed(Value rightInstance)
            {
                return new Value(GameValueMethods.Inflamed(rightInstance));
            }

            /// <summary>
            /// Returns information about what is currently displayed on given player's info panel. Returns ["EmptyDisplay","EmptyDisplayComponent"] when no panel is open.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value InfoPanel(Value rightInstance)
            {
                return new Value(GameValueMethods.InfoPanel(rightInstance));
            }

            /// <summary>
            /// Controls availability of component to given object info panel.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value bool</returns>
            public static Value InfoPanelComponentEnabled(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.InfoPanelComponentEnabled(leftInstance, rightInstance));
            }

            /// <summary>
            /// Returns array of all components available to given object info panel.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value InfoPanelComponents(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.InfoPanelComponents(leftInstance, rightInstance));
            }

            /// <summary>
            /// Returns array all info panels configured for given object or object and turret path.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value InfoPanels(Value rightInstance)
            {
                return new Value(GameValueMethods.InfoPanels(rightInstance));
            }

            /// <summary>
            /// Sets given event handler of in-game UI. If EH function returns true, performed action is overridden. Event handlers available are: "PrevAction" - mouse scroll up "Action" - action key press "NextAction" - mouse scroll down In order to remove a previously added event handler, set it again with an empty code string "". ⚠This is a "set" command, which means event handlers are not stackable and will replace previously set event handlers of the same type. Since Arma 3 v1.50 the event handler receives an array of the selected/activated action's arguments in _this variable: params ["_target", "_caller", "_index", "_engineName", "_text", "_priority", "_showWindow", "_hideOnUse", "_shortcut", "_visibleMenu", "_eventName"]; _target: Object - target object to which action is attached _caller: Object - caller object, basically player _index: Number - index of the action in action menu (0 - top most) _engineName: String - engine based action name ("User" for user added actions) _text: String - localized action plain text as seen by the caller _priority: Number - action priority value _showWindow: Boolean - action showWindow value _hideOnUse: Boolean - action hideOnUse value _shortcut: String - action shortcut name or "" _visibleMenu: Boolean - action menu visibility - on first scroll or action press the menu is still invisible, the menu is shown but no action is performed _eventName: String - event name
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value InGameUISetEventHandler(Value rightInstance)
            {
                return new Value(GameValueMethods.InGameUISetEventHandler(rightInstance));
            }

            /// <summary>
            /// Returns base entry of config entry.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value config</returns>
            public static Value InheritsFrom(Value rightInstance)
            {
                return new Value(GameValueMethods.InheritsFrom(rightInstance));
            }

            /// <summary>
            /// Initialises the ambient life on local client from CfgWorlds >> worldName >> AmbientA3. Has no effect on dedicated server or headless client.
            /// </summary>
            /// <returns>Value nothing</returns>
            public static Value InitAmbientLife()
            {
                return new Value(GameValueMethods.InitAmbientLife());
            }

            /// <summary>
            /// Checks whether position is inside given polygon. The polygon is only checked in 2 dimensions, i.e. the value of Z is ignored.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value bool</returns>
            public static Value InPolygon(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.InPolygon(leftInstance, rightInstance));
            }

            /// <summary>
            /// Return the state of input devices mapped to given input action. For Arma 3 inputActions and its bindings see: inputAction/actions. For earlier Arma editions  see Key Actions.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value scalar</returns>
            public static Value InputAction(Value rightInstance)
            {
                return new Value(GameValueMethods.InputAction(rightInstance));
            }

            /// <summary>
            /// Returns the state of controller inputs. The controller is a standard XBOX controller which is selected with Windows XBOX controller scheme. The input can be: XBOX_A 0 XBOX_B 1 XBOX_X 2 XBOX_Y 3 XBOX_Up 4 XBOX_Down 5 XBOX_Left 6 XBOX_Right 7 XBOX_Start 8 XBOX_Back 9 XBOX_LeftBumper 10 XBOX_RightBumper 11 XBOX_LeftTrigger 12 XBOX_RightTrigger 13 XBOX_LeftThumb 14 XBOX_RightThumb 15 XBOX_LeftThumbXRight 16 XBOX_LeftThumbYUp 17 XBOX_RightThumbXRight 18 XBOX_RightThumbYUp 19 XBOX_LeftThumbXLeft 20 XBOX_LeftThumbYDown 21 XBOX_RightThumbXLeft 22 XBOX_RightThumbYDown 23
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value scalar</returns>
            public static Value InputController(Value rightInstance)
            {
                return new Value(GameValueMethods.InputController(rightInstance));
            }

            /// <summary>
            /// Returns the state of mouse button action, alone or in combination with key presses. For more information on codes and combos see Arma 3: Modded Keybinding and DIK_KeyCodes but here are some examples of how codes could be hand constructed: KEYBOARD_COMBO 16777216 (0x1000000) DEVICE_MOUSE 65536 (0x10000) HOLD_OFFSET 0 CLICK_OFFSET 128 (0x80) DOUBLE_CLICK_OFFSET 256 (0x100) SPECIAL_COMBINATIONS 1114112 (0x110000) Click + Hold: BUTTON + DEVICE_MOUSE + HOLD_OFFSET = BUTTON + 65536 + 0 Click: BUTTON + DEVICE_MOUSE + CLICK_OFFSET = BUTTON + 65536 + 128  Double Click: BUTTON + DEVICE_MOUSE + DOUBLE_CLICK_OFFSET = BUTTON + 65536 + 256 RMB Click + Hold:  1 + 65536 + 0 = 65537 RMB Click: 1 + 65536 + 128 = 65665 RMB Double Click: 1 + 65536 + 256 = 65793 Combo + Click + Hold: DIK * KEYBOARD_COMBO + SPECIAL_COMBINATIONS + BUTTON + HOLD_OFFSET = DIK * 16777216 + 1114112 + BUTTON + 0 Combo + Click: DIK * KEYBOARD_COMBO + SPECIAL_COMBINATIONS + BUTTON + CLICK_OFFSET = DIK * 16777216 + 1114112 + BUTTON + 128 Combo + Double Click: DIK * KEYBOARD_COMBO + SPECIAL_COMBINATIONS + BUTTON + DOUBLE_CLICK_OFFSET = DIK * 16777216 + 1114112 + BUTTON + 256 LShift + RMB Click + Hold: 42 * 16777216 + 1114112 + 1 + 0 = 705757185 LShift + RMB Click: 42 * 16777216 + 1114112 + 1 + 128 = 705757313 LShift + RMB Double Click: 42 * 16777216 + 1114112 + 1 + 256 = 705757441
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value bool</returns>
            public static Value InputMouse(Value rightInstance)
            {
                return new Value(GameValueMethods.InputMouse(rightInstance));
            }

            /// <summary>
            /// Returns true if all given units are able to fire at given position with given magazineType.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value bool</returns>
            public static Value InRangeOfArtillery(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.InRangeOfArtillery(leftInstance, rightInstance));
            }

            /// <summary>
            /// Inserts multiple values into Array/String/HashMap. The String variant also supports forceUnicode.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value Insert(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.Insert(leftInstance, rightInstance));
            }

            /// <summary>
            /// Insert an object to the editor and assign arguments. Create script is,not called. Returns the ID of the new EditorObject. Subtype class is,optional. Some Old Editor Command
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value string</returns>
            public static Value InsertEditorObject(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.InsertEditorObject(leftInstance, rightInstance));
            }

            /// <summary>
            /// Returns how much a man is inside a building. The value is the same as normally returned by weapons/ammo sound controller "interior". It is possible to modify an individual object to use sound interior with enableAudioFeature. The sound is considered internal when the corresponding surface sound name starts with "int_". An object placed inside a building that does not have model CfgSurfaces' soundEvironsic parameter named this way would generate external sound inside the building, and insideBuilding on top of this object would return 0.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value scalar</returns>
            public static Value InsideBuilding(Value rightInstance)
            {
                return new Value(GameValueMethods.InsideBuilding(rightInstance));
            }

            /// <summary>
            /// Finds named selections in object which are in specified LOD, intersected by given section of a line. Return value is in the form of [selection, distance]. Multiple returned arrays are nested within a single array. No intersection returns []. lodName could be one of the following:  "FIRE" "VIEW" "GEOM" "IFIRE" - ("I" stands for Indirect, almost the same as FIRE) 2.02 "PHYSX" - PhysX geometry LOD
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value Intersect(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.Intersect(leftInstance, rightInstance));
            }

            /// <summary>
            /// Returns true if the Eden Editor is currently being used.
            /// </summary>
            /// <returns>Value bool</returns>
            public static Value Is3DEN()
            {
                return new Value(GameValueMethods.Is3DEN());
            }

            /// <summary>
            /// Returns true if the Eden Editor is in multiplayer mode.
            /// </summary>
            /// <returns>Value bool</returns>
            public static Value Is3DENMultiplayer()
            {
                return new Value(GameValueMethods.Is3DENMultiplayer());
            }

            /// <summary>
            /// Returns true if the Eden Editor is currently in mission preview mode, single player or multiplayer. (see also is3DEN, is3DENMultiplayer)
            /// </summary>
            /// <returns>Value bool</returns>
            public static Value Is3DENPreview()
            {
                return new Value(GameValueMethods.Is3DENPreview());
            }

            /// <summary>
            /// If unit is diving and doesn't have a re-breather, it returns false. Diving means the unit's head is underwater. If unit is underwater and has a re-breather, the command returns true.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value bool</returns>
            public static Value IsAbleToBreathe(Value rightInstance)
            {
                return new Value(GameValueMethods.IsAbleToBreathe(rightInstance));
            }

            /// <summary>
            /// Returns true if scroll menu is visible.
            /// </summary>
            /// <returns>Value bool</returns>
            public static Value IsActionMenuVisible()
            {
                return new Value(GameValueMethods.IsActionMenuVisible());
            }

            /// <summary>
            /// Check if team member is an agent.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value bool</returns>
            public static Value IsAgent(Value rightInstance)
            {
                return new Value(GameValueMethods.IsAgent(rightInstance));
            }

            /// <summary>
            /// Returns true if procedural aiming precision affects weapon sway.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value bool</returns>
            public static Value IsAimPrecisionEnabled(Value rightInstance)
            {
                return new Value(GameValueMethods.IsAimPrecisionEnabled(rightInstance));
            }

            /// <summary>
            /// Whether or not units can be in a vehicle with broken tracks/wheels.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value bool</returns>
            public static Value IsAllowedCrewInImmobile(Value rightInstance)
            {
                return new Value(GameValueMethods.IsAllowedCrewInImmobile(rightInstance));
            }

            /// <summary>
            /// Check if config entry represents array.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value bool</returns>
            public static Value IsArray(Value rightInstance)
            {
                return new Value(GameValueMethods.IsArray(rightInstance));
            }

            /// <summary>
            /// Return true if vehicle has enabled auto hover. (always returns false if the vehicle can't set auto hover)
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value bool</returns>
            public static Value IsAutoHoverOn(Value rightInstance)
            {
                return new Value(GameValueMethods.IsAutoHoverOn(rightInstance));
            }

            /// <summary>
            /// Returns whether the UAV is in autonomous mode or not.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value bool</returns>
            public static Value IsAutonomous(Value rightInstance)
            {
                return new Value(GameValueMethods.IsAutonomous(rightInstance));
            }

            /// <summary>
            /// Returns state of automatic start up action. For this command to have any effect, the Advanced Flight Model (AFM) has to be enabled. AFM status can be checked with difficultyEnabledRTD.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value IsAutoStartUpEnabledRTD(Value rightInstance)
            {
                return new Value(GameValueMethods.IsAutoStartUpEnabledRTD(rightInstance));
            }

            /// <summary>
            /// Returns true if game was started with autotest parameter
            /// </summary>
            /// <returns>Value bool</returns>
            public static Value IsAutotest()
            {
                return new Value(GameValueMethods.IsAutotest());
            }

            /// <summary>
            /// Returns state of auto trim functionality. For this command to have any effect, the Advanced Flight Model (AFM) has to be enabled. AFM status can be checked with difficultyEnabledRTD.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value bool</returns>
            public static Value IsAutoTrimOnRTD(Value rightInstance)
            {
                return new Value(GameValueMethods.IsAutoTrimOnRTD(rightInstance));
            }

            /// <summary>
            /// Returns resting state of a PhysX (EPE) object. Some EPE objects are deliberately put to sleep by the engine to save resources. This command returns true when object is simulating and false when it is put to sleep. With units of type Man the behaviour is slightly different. As units never get put to sleep, the command outputs ragdoll state of a unit instead. There are 6 states for the output of the command: EPE object is simulaing - true EPE object is put to sleep - false Unit is alive, ragdoll is active - false Unit is alive, ragdoll is NOT active - true 2.10 Unit is NOT alive, ragdoll is active - true 2.10 Unit is NOT alive, ragdoll is NOT active - false It may look counter-intuitive but there is a simple formula to return ragdoll state of a unit (since 2.10): private _unitIsInRagdoll = alive _unit != isAwake _unit;
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value bool</returns>
            public static Value IsAwake(Value rightInstance)
            {
                return new Value(GameValueMethods.IsAwake(rightInstance));
            }

            /// <summary>
            /// Returns whether the unit is bleeding.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value bool</returns>
            public static Value IsBleeding(Value rightInstance)
            {
                return new Value(GameValueMethods.IsBleeding(rightInstance));
            }

            /// <summary>
            /// Returns whether the unit is burning. This returns true only if unit is damaged by nearby fire, it does not check whether a fireplace is burning, use inflamed command for that.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value bool</returns>
            public static Value IsBurning(Value rightInstance)
            {
                return new Value(GameValueMethods.IsBurning(rightInstance));
            }

            /// <summary>
            /// Check if config entry represents config class.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value bool</returns>
            public static Value IsClass(Value rightInstance)
            {
                return new Value(GameValueMethods.IsClass(rightInstance));
            }

            /// <summary>
            /// Returns true if vehicle collision lights are on otherwise false.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value bool</returns>
            public static Value IsCollisionLightOn(Value rightInstance)
            {
                return new Value(GameValueMethods.IsCollisionLightOn(rightInstance));
            }

            /// <summary>
            /// Returns true if copilots actions are enabled.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value bool</returns>
            public static Value IsCopilotEnabled(Value rightInstance)
            {
                return new Value(GameValueMethods.IsCopilotEnabled(rightInstance));
            }

            /// <summary>
            /// A getter for allowDamage command. The command indicates if damage is allowed at current locality, hence local effect of the command. For complete solution for being able to tell whether or not an object can be damaged at current locality see Example 1.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value bool</returns>
            public static Value IsDamageAllowed(Value rightInstance)
            {
                return new Value(GameValueMethods.IsDamageAllowed(rightInstance));
            }

            /// <summary>
            /// Returns true if the machine executing the command is a dedicated multiplayer server. Returns false in single player.
            /// </summary>
            /// <returns>Value bool</returns>
            public static Value IsDedicated()
            {
                return new Value(GameValueMethods.IsDedicated());
            }

            /// <summary>
            /// Returns true if the DLC (CDLC included) is marked as available on Steam. Official and Creator DLC appIds can be found on Arma 3: DLCs & Expansions and Arma 3: CDLCs pages. ⚠This command will return true if the DLC is owned, even if it is not installed!
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value bool</returns>
            public static Value IsDLCAvailable(Value rightInstance)
            {
                return new Value(GameValueMethods.IsDLCAvailable(rightInstance));
            }

            /// <summary>
            /// Returns true if engine is on, false if it is off.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value bool</returns>
            public static Value IsEngineOn(Value rightInstance)
            {
                return new Value(GameValueMethods.IsEngineOn(rightInstance));
            }

            /// <summary>
            /// Compares two values by reference, returns true if equal.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value bool</returns>
            public static Value IsEqualRef(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.IsEqualRef(leftInstance, rightInstance));
            }

            /// <summary>
            /// Performs strict comparison between var1 and var2 and returns true if equal, otherwise false. Strict means that it would check that both arguments are of the same data type and then compare the values. Some differences between isEqualTo and ==: It performs case sensitive comparison on Strings It doesn't throw error when comparing different types, i.e. ("eleven" isEqualTo 11) It can compare Arrays, Script Handles and Booleans (alive player isEqualTo true) It can compare non-existent game objects (grpNull isEqualTo grpNull) It is slightly faster than ==, especially when comparing Strings 1.48 It can compare Namespaces A compiled code is not equal to the same compiled code made final: _a = compile "123"; _b = compileFinal "123"; _a isEqualTo _b; // false ⚠When comparing Arrays, if an array contains nil element, the comparison will return false. For example: private _array1 = [1, nil, 2]; private _array2 = [1, nil, 2]; _array1 isEqualTo _array2; // false UNLESS the compared arrays are the same array: private _array1 = [1, nil, 2]; private _array2 = _array1; _array1 isEqualTo _array2; // true See: isEqualRef and BIS_fnc_areEqual vs BIS_fnc_areEqualNotNil
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value bool</returns>
            public static Value IsEqualTo(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.IsEqualTo(leftInstance, rightInstance));
            }

            /// <summary>
            /// Compares two values' types. A much faster alternative to typeName a == typeName b.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value bool</returns>
            public static Value IsEqualType(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.IsEqualType(leftInstance, rightInstance));
            }

            /// <summary>
            /// Compares types of all elements of an array to the type of a single value. Since Arma 3 v2.09.149634 no additional check is needed to make sure the first argument is an Array. ⚠An empty array will return false (see Example 2).
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value bool</returns>
            public static Value IsEqualTypeAll(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.IsEqualTypeAll(leftInstance, rightInstance));
            }

            /// <summary>
            /// Compares type of given value to every type in the given array and if match is found, true is returned.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value bool</returns>
            public static Value IsEqualTypeAny(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.IsEqualTypeAny(leftInstance, rightInstance));
            }

            /// <summary>
            /// Compares types of all elements of one array to types of all elements of another array. Since Arma 3 v2.09.149634 no additional check is needed to make sure the first argument is an Array.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value bool</returns>
            public static Value IsEqualTypeArray(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.IsEqualTypeArray(leftInstance, rightInstance));
            }

            /// <summary>
            /// Compares types of all elements of input array to types of all elements of template array. Similar to isEqualTypeArray however this command is designed for fast validation of functions params, so there are differences: Input can be anything but will be expected to be an Array, otherwise false is returned Input array can be longer but not shorter than template array, will return false if shorter nil could be used in template type array as a wild card to allow any type match
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value bool</returns>
            public static Value IsEqualTypeParams(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.IsEqualTypeParams(leftInstance, rightInstance));
            }

            /// <summary>
            /// Returns true if file patching is enabled otherwise false
            /// </summary>
            /// <returns>Value bool</returns>
            public static Value IsFilePatchingEnabled()
            {
                return new Value(GameValueMethods.IsFilePatchingEnabled());
            }

            /// <summary>
            /// Checks if Code or a variable was compiled final with compileFinal.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value bool</returns>
            public static Value IsFinal(Value rightInstance)
            {
                return new Value(GameValueMethods.IsFinal(rightInstance));
            }

            /// <summary>
            /// Returns true if there is a linked and enabled flashlight on a given weapon.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value bool</returns>
            public static Value IsFlashlightOn(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.IsFlashlightOn(leftInstance, rightInstance));
            }

            /// <summary>
            /// Checks given position against given filter params. Filter includes checks for: If there are any objects closer than given distance from given position (in 2D) If the area around position is flat enough to match given gradient If the given position is over water or land If the given position is over shore line The gradient seems to correlate with general hill steepness: 0.1 (10%) ~6°, 0.5 (50%) ~27°, 1.0 (100%) ~45°, etc. See also BIS_fnc_findSafePos.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value IsFlatEmpty(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.IsFlatEmpty(leftInstance, rightInstance));
            }

            /// <summary>
            /// Returns true if player is forced to walk with forceWalk.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value bool</returns>
            public static Value IsForcedWalk(Value rightInstance)
            {
                return new Value(GameValueMethods.IsForcedWalk(rightInstance));
            }

            /// <summary>
            /// Returns true if the specified unit is subgroup leader.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value bool</returns>
            public static Value IsFormationLeader(Value rightInstance)
            {
                return new Value(GameValueMethods.IsFormationLeader(rightInstance));
            }

            /// <summary>
            /// Returns the state of game focus changed by pressing ALT + ↹ Tab or similar action.
            /// </summary>
            /// <returns>Value bool</returns>
            public static Value IsGameFocused()
            {
                return new Value(GameValueMethods.IsGameFocused());
            }

            /// <summary>
            /// Returns the state of game simulation. Simulation can get paused by pressing Alt + ↹ Tab or a system dialog opening (e.g. Esc menu). Simulation will not get paused if -noPause startup parameter is used. onEachFrame event and "EachFrame" event handler continue to execute when the simulation is paused, which could result in undesired backlog. Use isGamePaused to skip loop if needed.
            /// </summary>
            /// <returns>Value bool</returns>
            public static Value IsGamePaused()
            {
                return new Value(GameValueMethods.IsGamePaused());
            }

            /// <summary>
            /// Checks if the given group marked for auto-deletion when empty. See deleteGroupWhenEmpty. It might take up to a minute for the groups marked for auto-deletion when empty to get deleted when they become empty. ⚠This command is only a getter for the deleteWhenEmpty flag in createGroup command or deleteGroupWhenEmpty command. All it does is it shows what the flag was set to during group creation. True does not mean the group will be deleted but that it was suggested to the engine that it should be deleted. It is up to the engine how it manages groups. False does not mean that the group will not be deleted at all. It has no influence on the engine functionality whatsoever.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value bool</returns>
            public static Value IsGroupDeletedWhenEmpty(Value rightInstance)
            {
                return new Value(GameValueMethods.IsGroupDeletedWhenEmpty(rightInstance));
            }

            /// <summary>
            /// Returns whether a person is hidden (reached the hiding position). ⚠Not to be confused with isObjectHidden, which is returning object visibility set with hideObject
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value bool</returns>
            public static Value IsHidden(Value rightInstance)
            {
                return new Value(GameValueMethods.IsHidden(rightInstance));
            }

            /// <summary>
            /// Checks if unit or vehicle is queued for disposal after death.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value bool</returns>
            public static Value IsInRemainsCollector(Value rightInstance)
            {
                return new Value(GameValueMethods.IsInRemainsCollector(rightInstance));
            }

            /// <summary>
            /// Returns the status of INSTRUCTOR FIGURE setting in UI (OPTIONS >> GAME >> GENERAL >> INSTRUCTOR FIGURE).
            /// </summary>
            /// <returns>Value bool</returns>
            public static Value IsInstructorFigureEnabled()
            {
                return new Value(GameValueMethods.IsInstructorFigureEnabled());
            }

            /// <summary>
            /// Returns true if there is a linked and enabled IR on the given weapon.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value bool</returns>
            public static Value IsIRLaserOn(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.IsIRLaserOn(leftInstance, rightInstance));
            }

            /// <summary>
            /// Checks whether the given key is active in the current user profile. See keys, keysLimit and doneKeys in the description.ext file of the missions.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value bool</returns>
            public static Value IsKeyActive(Value rightInstance)
            {
                return new Value(GameValueMethods.IsKeyActive(rightInstance));
            }

            /// <summary>
            /// Checks whether the given object or type is (a subtype) of the given type. While Syntax 1 and Syntax 2 only support CfgVehicles, 1.00CfgAmmo and CfgNonAIVehicles, Syntax 3 can be used with any config, including the mission config.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value bool</returns>
            public static Value IsKindOf(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.IsKindOf(leftInstance, rightInstance));
            }

            /// <summary>
            /// Returns true if the vehicle has its laser turned on. Not to be confused with isIRLaserOn which is for units. Main syntax is for primary gunner turret.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value bool</returns>
            public static Value IsLaserOn(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.IsLaserOn(leftInstance, rightInstance));
            }

            /// <summary>
            /// Returns true if vehicle headlights are on otherwise false.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value bool</returns>
            public static Value IsLightOn(Value rightInstance)
            {
                return new Value(GameValueMethods.IsLightOn(rightInstance));
            }

            /// <summary>
            /// Checks whether given stringName is localized.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value bool</returns>
            public static Value IsLocalized(Value rightInstance)
            {
                return new Value(GameValueMethods.IsLocalized(rightInstance));
            }

            /// <summary>
            /// Returns true if manual fire is on. Manual fire could either be selected in vehicle action menu (if available) or with action "ManualFire" and "ManualFireCancel". Always returns false for a soldier.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value bool</returns>
            public static Value IsManualFire(Value rightInstance)
            {
                return new Value(GameValueMethods.IsManualFire(rightInstance));
            }

            /// <summary>
            /// Checks whether the object is marked for weapons collection.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value bool</returns>
            public static Value IsMarkedForCollection(Value rightInstance)
            {
                return new Value(GameValueMethods.IsMarkedForCollection(rightInstance));
            }

            /// <summary>
            /// The missionProfileNamespace variables are loaded at the start of a mission, before 'init.sqf' is executed. If the file with saved variables for current mission exists in user profile and is loaded, the command returns true. It also will return true after the first execution of saveMissionProfileNamespace command, which also creates the file.
            /// </summary>
            /// <returns>Value bool</returns>
            public static Value IsMissionProfileNamespaceLoaded()
            {
                return new Value(GameValueMethods.IsMissionProfileNamespaceLoaded());
            }

            /// <summary>
            /// Return true if multiPlayer.
            /// </summary>
            /// <returns>Value bool</returns>
            public static Value IsMultiplayer()
            {
                return new Value(GameValueMethods.IsMultiplayer());
            }

            /// <summary>
            /// Returns true when playing a game in solo multiplayer (for example Apex coop campaign PLAY SOLO option).
            /// </summary>
            /// <returns>Value bool</returns>
            public static Value IsMultiplayerSolo()
            {
                return new Value(GameValueMethods.IsMultiplayerSolo());
            }

            /// <summary>
            /// Tests whether a variable is nil or undefined from its identifier, or whether the given expression evaluates to nil or Nothing. This command does not exist in Operation Flashpoint/Arma: Cold War Assault but can be emulated (see Example 5).
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value bool</returns>
            public static Value IsNil(Value rightInstance)
            {
                return new Value(GameValueMethods.IsNil(rightInstance));
            }

            /// <summary>
            /// Compares two values by reference, returns true if not equal.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value bool</returns>
            public static Value IsNotEqualRef(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.IsNotEqualRef(leftInstance, rightInstance));
            }

            /// <summary>
            /// Performs strict comparison between var1 and var2 and returns false if equal, otherwise true.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value bool</returns>
            public static Value IsNotEqualTo(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.IsNotEqualTo(leftInstance, rightInstance));
            }

            /// <summary>
            /// Checks whether the tested item is null. Which null type the item has to be equal to depends on the type of game entity tested: Type Object Group Control Display Location Task Script Config Diary Record Team Member Null value objNull grpNull controlNull displayNull locationNull taskNull scriptNull configNull diaryRecordNull teamMemberNull Since 1.00 1.00 1.00 1.00 1.00 1.00 1.30 1.54 2.00 2.10 ⚠A test via == does not work because a null value is not equal to anything, not even itself (configNull being the exception). See also isEqualTo.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value bool</returns>
            public static Value IsNull(Value rightInstance)
            {
                return new Value(GameValueMethods.IsNull(rightInstance));
            }

            /// <summary>
            /// Check if config entry represents number.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value bool</returns>
            public static Value IsNumber(Value rightInstance)
            {
                return new Value(GameValueMethods.IsNumber(rightInstance));
            }

            /// <summary>
            /// Checks visibility of a given object on the local machine.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value bool</returns>
            public static Value IsObjectHidden(Value rightInstance)
            {
                return new Value(GameValueMethods.IsObjectHidden(rightInstance));
            }

            /// <summary>
            /// Returns true if RTD model is loaded.For this command to have any effect, the Advanced Flight Model (AFM) has to be enabled. AFM status can be checked with difficultyEnabledRTD.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value bool</returns>
            public static Value IsObjectRTD(Value rightInstance)
            {
                return new Value(GameValueMethods.IsObjectRTD(rightInstance));
            }

            /// <summary>
            /// Checks if given position is inside road segment. Same as roadAt, only return is boolean instead of road object.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value bool</returns>
            public static Value IsOnRoad(Value rightInstance)
            {
                return new Value(GameValueMethods.IsOnRoad(rightInstance));
            }

            /// <summary>
            /// Returns whether Picture-In-Picture video option (Render to Texture) is enabled or not.
            /// </summary>
            /// <returns>Value bool</returns>
            public static Value IsPiPEnabled()
            {
                return new Value(GameValueMethods.IsPiPEnabled());
            }

            /// <summary>
            /// Checks if given person is a player. Returns true for headless clients as well. Prior to Arma 3 v2.02, in some cases the identity of certain player units could fail to propagate to other clients and the server, which caused isPlayer and getPlayerUID to incorrectly return false and "" respectively, where the affected units were not local. See this GitHub bug report for more info. Remain vigilant toward potential false negatives.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value bool</returns>
            public static Value IsPlayer(Value rightInstance)
            {
                return new Value(GameValueMethods.IsPlayer(rightInstance));
            }

            /// <summary>
            /// Returns true if the mission editor is operating in real time mode.  Some Old Editor Command
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value bool</returns>
            public static Value IsRealTime(Value rightInstance)
            {
                return new Value(GameValueMethods.IsRealTime(rightInstance));
            }

            /// <summary>
            /// Returns true if the code context is being remote executed by remoteExec or remoteExecCall. In SP always returns false. See also isRemoteExecutedJIP
            /// </summary>
            /// <returns>Value bool</returns>
            public static Value IsRemoteExecuted()
            {
                return new Value(GameValueMethods.IsRemoteExecuted());
            }

            /// <summary>
            /// Returns true if the code context is being remote executed from the JIP queue by remoteExec or remoteExecCall (when JIP param was set). It is a subset of isRemoteExecuted: Normal remote execution: isRemoteExecuted - true isRemoteExecutedJIP - false Remote execution from JIP queue: isRemoteExecuted - true isRemoteExecutedJIP - true In SP always returns false.
            /// </summary>
            /// <returns>Value bool</returns>
            public static Value IsRemoteExecutedJIP()
            {
                return new Value(GameValueMethods.IsRemoteExecutedJIP());
            }

            /// <summary>
            /// Returns the status of autosave request, made when saveGame command is executed. When request is made, the command immediately returns true. The engine then handles the saving and when it is done, the command returns false.
            /// </summary>
            /// <returns>Value bool</returns>
            public static Value IsSaving()
            {
                return new Value(GameValueMethods.IsSaving());
            }

            /// <summary>
            /// Returns if given unit is confirmed target for given side.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value bool</returns>
            public static Value IsSensorTargetConfirmed(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.IsSensorTargetConfirmed(leftInstance, rightInstance));
            }

            /// <summary>
            /// Returns true if the machine executing the command is the server in a multiplayer game or is running single player. It will return true for both dedicated and player-hosted server. See also Multiplayer Scripting/machines.
            /// </summary>
            /// <returns>Value bool</returns>
            public static Value IsServer()
            {
                return new Value(GameValueMethods.IsServer());
            }

            /// <summary>
            /// Returns true if the editor is set to draw 3D icons. Some Old Editor Command
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value bool</returns>
            public static Value IsShowing3DIcons(Value rightInstance)
            {
                return new Value(GameValueMethods.IsShowing3DIcons(rightInstance));
            }

            /// <summary>
            /// Returns true if given object is simple object
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value bool</returns>
            public static Value IsSimpleObject(Value rightInstance)
            {
                return new Value(GameValueMethods.IsSimpleObject(rightInstance));
            }

            /// <summary>
            /// Returns true if player is allowed to sprint
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value bool</returns>
            public static Value IsSprintAllowed(Value rightInstance)
            {
                return new Value(GameValueMethods.IsSprintAllowed(rightInstance));
            }

            /// <summary>
            /// Check if stamina depletion is enabled.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value bool</returns>
            public static Value IsStaminaEnabled(Value rightInstance)
            {
                return new Value(GameValueMethods.IsStaminaEnabled(rightInstance));
            }

            /// <summary>
            /// Returns true if the current mission is a Steam Workshop mission.
            /// </summary>
            /// <returns>Value bool</returns>
            public static Value IsSteamMission()
            {
                return new Value(GameValueMethods.IsSteamMission());
            }

            /// <summary>
            /// Returns true if Steam overlay is enabled, otherwise false.
            /// </summary>
            /// <returns>Value bool</returns>
            public static Value IsSteamOverlayEnabled()
            {
                return new Value(GameValueMethods.IsSteamOverlayEnabled());
            }

            /// <summary>
            /// Returns the status of STREAM FRIENDLY UI setting in UI (OPTIONS >> GAME >> GENERAL >> STREAM FRIENDLY UI).
            /// </summary>
            /// <returns>Value bool</returns>
            public static Value IsStreamFriendlyUIEnabled()
            {
                return new Value(GameValueMethods.IsStreamFriendlyUIEnabled());
            }

            /// <summary>
            /// Returns true if stress damage is enabled in the game settings. A getter for enableStressDamage. For this command to have any effect, the Advanced Flight Model (AFM) has to be enabled. AFM status can be checked with difficultyEnabledRTD.
            /// </summary>
            /// <returns>Value bool</returns>
            public static Value IsStressDamageEnabled()
            {
                return new Value(GameValueMethods.IsStressDamageEnabled());
            }

            /// <summary>
            /// Checks if config entry represents a text value.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value bool</returns>
            public static Value IsText(Value rightInstance)
            {
                return new Value(GameValueMethods.IsText(rightInstance));
            }

            /// <summary>
            /// Returns true if object is touching the ground.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value bool</returns>
            public static Value IsTouchingGround(Value rightInstance)
            {
                return new Value(GameValueMethods.IsTouchingGround(rightInstance));
            }

            /// <summary>
            /// Returns true if given unit is turned out, otherwise false. The output changes to true after unit finished turning out, however will change to false almost immediately after unit is ordered to turn in.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value bool</returns>
            public static Value IsTurnedOut(Value rightInstance)
            {
                return new Value(GameValueMethods.IsTurnedOut(rightInstance));
            }

            /// <summary>
            /// Returns the status of TUTORIAL HINTS setting in UI (OPTIONS >> GAME >> GENERAL >> TUTORIAL HINTS).
            /// </summary>
            /// <returns>Value bool</returns>
            public static Value IsTutHintsEnabled()
            {
                return new Value(GameValueMethods.IsTutHintsEnabled());
            }

            /// <summary>
            /// Returns true if UAV is connectable by AV terminal(s).
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value bool</returns>
            public static Value IsUAVConnectable(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.IsUAVConnectable(leftInstance, rightInstance));
            }

            /// <summary>
            /// Returns true if UAV is connected to some terminal.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value bool</returns>
            public static Value IsUAVConnected(Value rightInstance)
            {
                return new Value(GameValueMethods.IsUAVConnected(rightInstance));
            }

            /// <summary>
            /// Returns true if the script originated from some UI control event, for example from "onButtonDown" EH. Exists within parent scope and immediate child scopes.
            /// </summary>
            /// <returns>Value bool</returns>
            public static Value IsUIContext()
            {
                return new Value(GameValueMethods.IsUIContext());
            }

            /// <summary>
            /// Check whether given uniform can be dressed by target soldier.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value bool</returns>
            public static Value IsUniformAllowed(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.IsUniformAllowed(leftInstance, rightInstance));
            }

            /// <summary>
            /// Despite a misleading name, returns the vehicle that is transporting given vehicle in cargo. If the given vehicle is not in vehicle cargo, objNull is returned.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value object</returns>
            public static Value IsVehicleCargo(Value rightInstance)
            {
                return new Value(GameValueMethods.IsVehicleCargo(rightInstance));
            }

            /// <summary>
            /// Returns true if vehicle has active sensors on.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value bool</returns>
            public static Value IsVehicleRadarOn(Value rightInstance)
            {
                return new Value(GameValueMethods.IsVehicleRadarOn(rightInstance));
            }

            /// <summary>
            /// Returns class name (to identify list based on component name) and info if given sensor is enabled.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value IsVehicleSensorEnabled(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.IsVehicleSensorEnabled(leftInstance, rightInstance));
            }

            /// <summary>
            /// Returns true if walk is toggled (default W+S in Arma 3). This command can still return true when the unit is sprinting or stopped; it only returns the toggle value of walking, not if the unit is walking right now.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value bool</returns>
            public static Value IsWalking(Value rightInstance)
            {
                return new Value(GameValueMethods.IsWalking(rightInstance));
            }

            /// <summary>
            /// Returns true if weapon is currently deployed.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value bool</returns>
            public static Value IsWeaponDeployed(Value rightInstance)
            {
                return new Value(GameValueMethods.IsWeaponDeployed(rightInstance));
            }

            /// <summary>
            /// Returns true if weapon is currently rested.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value bool</returns>
            public static Value IsWeaponRested(Value rightInstance)
            {
                return new Value(GameValueMethods.IsWeaponRested(rightInstance));
            }

            /// <summary>
            /// Get array with items from ammo box (or any general weapon holder container).
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value ItemCargo(Value rightInstance)
            {
                return new Value(GameValueMethods.ItemCargo(rightInstance));
            }

            /// <summary>
            /// Returns an array of names of all unit's stored items, including weapons but excluding magazines (see itemsWithMagazines) and assignedItems.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value Items(Value rightInstance)
            {
                return new Value(GameValueMethods.Items(rightInstance));
            }

            /// <summary>
            /// Returns combined array including all unit's stored items and all unit's stored magazines and all unit's stored weapons. Loaded magazines such as currentMagazine, primaryWeaponMagazine, secondaryWeaponMagazine, handgunMagazine, binocularMagazine as well as assignedItems are excluded.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value ItemsWithMagazines(Value rightInstance)
            {
                return new Value(GameValueMethods.ItemsWithMagazines(rightInstance));
            }

            /// <summary>
            /// Maximum number ofunits per group Operation Flashpoint 12 Later titles 10000+ Joins units into a given Group. To make a unit leave its current group, join it into grpNull (e.g. [MyUnit] join grpNull) - but beware: A new group is created for the leaving unit; this could result in the number of groups growing out of control.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value Join(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.Join(leftInstance, rightInstance));
            }

            /// <summary>
            /// Joins the unit to the given group, if position id is available, this one is used.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value JoinAs(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.JoinAs(leftInstance, rightInstance));
            }

            /// <summary>
            /// Joins the unit to the given group, if position id is available, this one is used. Avoid any radio communication related to joining.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value JoinAsSilent(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.JoinAsSilent(leftInstance, rightInstance));
            }

            /// <summary>
            /// Join all units in the array to given group silently (without radio message). To have a group member leave a group, join him with the grpNull group (e.g. [guy1] joinSilent grpNull), but beware, as brand new group is created for the leaving unit and this could result in the number of groups in a mission growing out of control.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value JoinSilent(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.JoinSilent(leftInstance, rightInstance));
            }

            /// <summary>
            /// Joins array into String with provided separator. Array can be of mixed types, all elements will be converted to String prior to joining, but the fastest operation is on the array of Strings.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value string</returns>
            public static Value JoinString(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.JoinString(leftInstance, rightInstance));
            }

            /// <summary>
            /// Register knowledge base database to given person. See Conversations for more details. ⚠This command is no longer available in Arma 2 and Arma 3.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value bool</returns>
            public static Value KbAddDatabase(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.KbAddDatabase(leftInstance, rightInstance));
            }

            /// <summary>
            /// Register target list knowledge base database to given person. See Conversations for more details. ⚠This command is no longer available in Arma 2 and Arma 3.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value bool</returns>
            public static Value KbAddDatabaseTargets(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.KbAddDatabaseTargets(leftInstance, rightInstance));
            }

            /// <summary>
            /// Register conversation topic to given person. See Conversations for more details. Only the speaker(s) need to have the topic added.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value KbAddTopic(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.KbAddTopic(leftInstance, rightInstance));
            }

            /// <summary>
            /// Check if conversation topic was registered to given person. See Conversations for more details.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value bool</returns>
            public static Value KbHasTopic(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.KbHasTopic(leftInstance, rightInstance));
            }

            /// <summary>
            /// Pass a non-verbal communication to the receiver. This command does as if the sentence was said and triggers the reaction scripts (AI FSM or player's conversation EH). See Conversations for more details.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value KbReact(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.KbReact(leftInstance, rightInstance));
            }

            /// <summary>
            /// Unregister conversation topic from given person. See Conversations for more details.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value KbRemoveTopic(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.KbRemoveTopic(leftInstance, rightInstance));
            }

            /// <summary>
            /// Make the person tell to the receiver the sentence. See Conversations for more details.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value KbTell(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.KbTell(leftInstance, rightInstance));
            }

            /// <summary>
            /// Check if given item was said by person to someone. See Conversations for more details.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value bool</returns>
            public static Value KbWasSaid(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.KbWasSaid(leftInstance, rightInstance));
            }

            /// <summary>
            /// Returns a structured text, containing an image or name (if no image is found) of the button, on the keyboard, mouse or joystick, with the given code.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value text</returns>
            public static Value KeyImage(Value rightInstance)
            {
                return new Value(GameValueMethods.KeyImage(rightInstance));
            }

            /// <summary>
            /// Returns the name of a button with extra quotation marks (on the keyboard, mouse or joystick) with the given code.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value string</returns>
            public static Value KeyName(Value rightInstance)
            {
                return new Value(GameValueMethods.KeyName(rightInstance));
            }

            /// <summary>
            /// Retrieves a list of all keys in a HashMap.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value Keys(Value rightInstance)
            {
                return new Value(GameValueMethods.Keys(rightInstance));
            }

            /// <summary>
            /// Checks if a group or a side knows about target. Enemy knowledge is instantly shared among the group units Units in the same group always perfectly know about each others AI knowledge cannot check beyond current viewDistance and it resets to zero as soon as the target's distance is over itNote: neither fog nor daylight affect this behaviour Losing sight of a target for more than 120 seconds resets its knowsAbout to zero as well Magic number is the value that must be reached for a unit to shoot at an enemy (used by "Detected by" triggers as well): Game 1.46 1.96 1.18 1.11 1.62 1.82 Magic value 0.7 0.105 ? ? ? ?
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value scalar</returns>
            public static Value KnowsAbout(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.KnowsAbout(leftInstance, rightInstance));
            }

            /// <summary>
            /// Forces a helicopter landing.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value Land(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.Land(leftInstance, rightInstance));
            }

            /// <summary>
            /// Order an AI airplane to land at a given airport. ID is the number to identify which map airport you want the airplane to land at. See Arma: Airport IDs for more information. Since Arma 3 v1.68 it is possible to also make the airplane land at a dynamic airport object (e.g. aircraft carrier, makeshift runway...) – see Example 2. ⚠To make a helicopter land see land command.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value LandAt(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.LandAt(leftInstance, rightInstance));
            }

            /// <summary>
            /// Return the result of helicopter landing position searching (performed, after land command).
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value string</returns>
            public static Value LandResult(Value rightInstance)
            {
                return new Value(GameValueMethods.LandResult(rightInstance));
            }

            /// <summary>
            /// Returns current game language.
            /// </summary>
            /// <returns>Value string</returns>
            public static Value Language()
            {
                return new Value(GameValueMethods.Language());
            }

            /// <summary>
            /// Returns the laser target object created by given unit (vehicle or soldier) when using a laser targeting device. The main syntax targets the primary gunner turret.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value object</returns>
            public static Value LaserTarget(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.LaserTarget(leftInstance, rightInstance));
            }

            /// <summary>
            /// Adds an item with the given text to the CT_LISTBOX or CT_COMBO or CT_TOOLBOX. If using RscToolBox as template with ctrlCreate, clear it first with lbClear
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value scalar</returns>
            public static Value LbAdd(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.LbAdd(leftInstance, rightInstance));
            }

            /// <summary>
            /// Clear all items from a CT_LISTBOX or CT_COMBO control.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value LbClear(Value rightInstance)
            {
                return new Value(GameValueMethods.LbClear(rightInstance));
            }

            /// <summary>
            /// Returns the text color of the item with the given index of the CT_LISTBOX or CT_COMBO with IDC of the topmost user dialog.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value LbColor(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.LbColor(leftInstance, rightInstance));
            }

            /// <summary>
            /// Returns the text color of the item (right) with the given index of the listbox or combobox with id idc of the topmost user dialog.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value LbColorRight(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.LbColorRight(leftInstance, rightInstance));
            }

            /// <summary>
            /// Returns the index of the selected item of the CT_LISTBOX, CT_LISTNBOX, CT_COMBO or CT_TOOLBOX. For CT_LISTBOX with multi selection enabled use lbSelection.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value scalar</returns>
            public static Value LbCurSel(Value rightInstance)
            {
                return new Value(GameValueMethods.LbCurSel(rightInstance));
            }

            /// <summary>
            /// Returns the data set in given index of the CT_LISTBOX or CT_COMBO.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value string</returns>
            public static Value LbData(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.LbData(leftInstance, rightInstance));
            }

            /// <summary>
            /// Removes the item with the given index from the CT_LISTBOX, CT_COMBO or CT_TOOLBOX.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value LbDelete(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.LbDelete(leftInstance, rightInstance));
            }

            /// <summary>
            /// Checks whether or not given row of the given listbox is selected.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value bool</returns>
            public static Value LbIsSelected(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.LbIsSelected(leftInstance, rightInstance));
            }

            /// <summary>
            /// Returns the picture name of the item with the given index of the listbox or combobox with id idc of the topmost user dialog.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value string</returns>
            public static Value LbPicture(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.LbPicture(leftInstance, rightInstance));
            }

            /// <summary>
            /// Returns the right picture name of the item with the given index of the listbox or combobox with id idc of the topmost user dialog.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value string</returns>
            public static Value LbPictureRight(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.LbPictureRight(leftInstance, rightInstance));
            }

            /// <summary>
            /// Returns Array of selected rows indices in the given listbox. If listbox is of style LB_MULTI (multi-selection) the array will contain multiple elements, otherwise only a single element. For single selection listbox one can also use lbCurSel. See also lbIsSelected, lbSetSelected
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value LbSelection(Value rightInstance)
            {
                return new Value(GameValueMethods.LbSelection(rightInstance));
            }

            /// <summary>
            /// Sets the color of the item (left) with the given index of the listbox or combobox with id idc of the topmost user Dialog to color.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value LbSetColor(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.LbSetColor(leftInstance, rightInstance));
            }

            /// <summary>
            /// Sets the color of the item (right) with the given index of the listbox or combobox with id idc of the topmost user dialog to color.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value LbSetColorRight(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.LbSetColorRight(leftInstance, rightInstance));
            }

            /// <summary>
            /// Selects the item with the given index in the listbox, listnbox, combobox, xcombobox, xlistbox ⚠The following only applies to the Alternative Syntax when used with CT_LISTBOX and CT_LISTNBOX. To deselect all entries, use -1: _ctrl lbSetCurSel -1; For listbox of style LB_MULTI use lbSetSelected instead. CT_COMBO does not allow deselecting entries, it will instead select the first one as it is not a combobox usual behaviour. If you really need to deselect a combobox, see DreadedEntity's note.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value LbSetCurSel(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.LbSetCurSel(leftInstance, rightInstance));
            }

            /// <summary>
            /// Sets the additional text (invisible) in the item with the given index of the listbox or combobox with id idc of the topmost user dialog to the given data. See more information on the CT_LISTBOX command family here.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value LbSetData(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.LbSetData(leftInstance, rightInstance));
            }

            /// <summary>
            /// Sets the left picture in the row with given index of CT_LISTBOX or CT_COMBO. The picture is searched for in the mission directory, the dtaExt subdirectory of the campaign directory and the dtaExt directory and the data bank (or directory). In Arma 3 it might be necessary to set the color of the picture as well with lbSetPictureColor as default color [0,0,0,0] makes the picture invisible.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value LbSetPicture(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.LbSetPicture(leftInstance, rightInstance));
            }

            /// <summary>
            /// Sets the color of item's picture (left) with the given index of the listbox with id idc of the topmost user dialog to the given color. Color is in format Color (RGBA). Color which consists from only zeros means disable this override.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value LbSetPictureColor(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.LbSetPictureColor(leftInstance, rightInstance));
            }

            /// <summary>
            /// Sets the disabled color of item's picture (left) with the given index of the listbox with id idc of the topmost user dialog to the given color. Color is in format Color (RGBA). Color which consists from only zeros means disable this override.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value LbSetPictureColorDisabled(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.LbSetPictureColorDisabled(leftInstance, rightInstance));
            }

            /// <summary>
            /// Sets the selected color of item's picture (left) with the given index of the listbox with id idc of the topmost user dialog to the given color. Color is in format Color (RGBA). Color which consists from only zeros means disable this override.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value LbSetPictureColorSelected(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.LbSetPictureColorSelected(leftInstance, rightInstance));
            }

            /// <summary>
            /// Sets the second (right aligned) picture in the item with the given index of the listbox or combobox with id idc of the topmost user dialog. Name is the picture name. The picture is searched for in the mission directory, the dtaExt subdirectory of the campaign directory and the dtaExt directory and the data bank (or directory). In Arma 3 it might be necessary to set the color of the picture as well with lbSetPictureRightColor as default [0,0,0,0] color makes the picture invisible. When trying to select a listBox entry by clicking at the right picture, the control in the background is focused. It seems the width of the control is not extended by adding a right picture.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value LbSetPictureRight(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.LbSetPictureRight(leftInstance, rightInstance));
            }

            /// <summary>
            /// Sets the color of the second (right aligned) picture of the given index of the listbox with id idc of the topmost user dialog to the given color. Color which consists from only zeros means disable this override.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value LbSetPictureRightColor(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.LbSetPictureRightColor(leftInstance, rightInstance));
            }

            /// <summary>
            /// Sets the disabled color of second (right aligned) picture of the item with the given index of the listbox with id idc of the topmost user dialog to the given color. Color which consists from only zeros means disable this override.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value LbSetPictureRightColorDisabled(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.LbSetPictureRightColorDisabled(leftInstance, rightInstance));
            }

            /// <summary>
            /// Sets the selected color of the second (right aligned) picture of the item with the given index of the listbox with id idc of the topmost user dialog to the given color. Color which consists from only zeros means disable this override.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value LbSetPictureRightColorSelected(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.LbSetPictureRightColorSelected(leftInstance, rightInstance));
            }

            /// <summary>
            /// Sets the select color of the item with the given index of the listbox or combobox with id idc of the topmost user dialog to color.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value LbSetSelectColor(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.LbSetSelectColor(leftInstance, rightInstance));
            }

            /// <summary>
            /// Sets the select color of the of the secondary text (right aligned) of the item with the given index of the listbox or combobox with id idc of the topmost user dialog to color.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value LbSetSelectColorRight(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.LbSetSelectColorRight(leftInstance, rightInstance));
            }

            /// <summary>
            /// Sets the selection state of the given row of the given listbox of style LB_MULTI. The command has to be called for every row which is needed to be selected in multi-selection listbox. Use negative index -1 to select/deselect all rows (since 2.12). For single selection listbox use lbSetCurSel instead.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value LbSetSelected(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.LbSetSelected(leftInstance, rightInstance));
            }

            /// <summary>
            /// Sets the text on the left side of the item with the given index of the listbox or combobox with id idc of the topmost user dialog.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value LbSetText(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.LbSetText(leftInstance, rightInstance));
            }

            /// <summary>
            /// Sets the text on the right side of the item with the given row index of the listbox or combobox with id idc of the topmost user dialog.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value LbSetTextRight(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.LbSetTextRight(leftInstance, rightInstance));
            }

            /// <summary>
            /// Sets tooltip for item with given index of the listbox or combobox with id idc of the topmost user dialog to the given data.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value LbSetTooltip(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.LbSetTooltip(leftInstance, rightInstance));
            }

            /// <summary>
            /// Sets the additional value in the row with the given index of a CT_LISTBOX or CT_COMBO control.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value LbSetValue(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.LbSetValue(leftInstance, rightInstance));
            }

            /// <summary>
            /// Returns the number of items in a CT_LISTBOX or CT_COMBO control. For CT_TOOLBOX size see lnbSize.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value scalar</returns>
            public static Value LbSize(Value rightInstance)
            {
                return new Value(GameValueMethods.LbSize(rightInstance));
            }

            /// <summary>
            /// Sorts listbox entries alphabetically ascending by their lbText.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value LbSort(Value rightInstance)
            {
                return new Value(GameValueMethods.LbSort(rightInstance));
            }

            /// <summary>
            /// Sorts given ListBox by either lbText, lbValue or lbData in normal or reversed order, using case-sensitive or case-insensitive comparison. This command supports UNICODE characters. When sorting by "VALUE", the rows with the same lbValue will additionally be sorted by lbText in the order specified by `reversedOrder` flag, text specified by `useTextRight` flag and case-sensitivity specified by `caseSensitive` flag. ⚠ This command supports referencing control via IDC as well, but as with any use of IDC in UI Control commands, a dialog should be present, i.e. UI user interaction is created with createDialog rather than createDisplay. As this command supports UNICODE by default, which may result in slower sorting, you can switch it off with unicodeOff param.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value LbSortBy(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.LbSortBy(leftInstance, rightInstance));
            }

            /// <summary>
            /// Sorts the ListBox entries by lbValue. The entries are sorted in ascending order. Also note that this command will mix up the entries randomly if multiple entries have the same value. In Arma 3 use lbSortBy to avoid this problem.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value LbSortByValue(Value rightInstance)
            {
                return new Value(GameValueMethods.LbSortByValue(rightInstance));
            }

            /// <summary>
            /// Returns the shown text of the item with the given index of the CT_LISTBOX or CT_COMBO.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value string</returns>
            public static Value LbText(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.LbText(leftInstance, rightInstance));
            }

            /// <summary>
            /// Returns the shown right text in the item with the given index of the listbox or combobox with id idc of the topmost user dialog.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value string</returns>
            public static Value LbTextRight(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.LbTextRight(leftInstance, rightInstance));
            }

            /// <summary>
            /// Returns tooltip for ListBox, ComboBox and Toolbox
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value string</returns>
            public static Value LbTooltip(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.LbTooltip(leftInstance, rightInstance));
            }

            /// <summary>
            /// Returns the additional integer value of the item with the given index of the CT_LISTBOX or CT_COMBO.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value scalar</returns>
            public static Value LbValue(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.LbValue(leftInstance, rightInstance));
            }

            /// <summary>
            /// Returns the group leader for the given unit or group. For dead units, objNull is returned.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value team_member</returns>
            public static Value Leader(Value rightInstance)
            {
                return new Value(GameValueMethods.Leader(rightInstance));
            }

            /// <summary>
            /// Deletes internal class for the leaderboard with given name. Returns true if the board has been found and deinitialized.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value bool</returns>
            public static Value LeaderboardDeInit(Value rightInstance)
            {
                return new Value(GameValueMethods.LeaderboardDeInit(rightInstance));
            }

            /// <summary>
            /// Returns values for the given leaderboard; this can be called after the one of the row request function has been called and successfully finished!
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value LeaderboardGetRows(Value rightInstance)
            {
                return new Value(GameValueMethods.LeaderboardGetRows(rightInstance));
            }

            /// <summary>
            /// Initialize the leaderboard structure for board with given name. Returns true if board is already initialized.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value bool</returns>
            public static Value LeaderboardInit(Value rightInstance)
            {
                return new Value(GameValueMethods.LeaderboardInit(rightInstance));
            }

            /// <summary>
            /// Requests given leaderboard to download friends rows from the given leaderboard
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value bool</returns>
            public static Value LeaderboardRequestRowsFriends(Value rightInstance)
            {
                return new Value(GameValueMethods.LeaderboardRequestRowsFriends(rightInstance));
            }

            /// <summary>
            /// Requests given leaderboard to download values from global table.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value bool</returns>
            public static Value LeaderboardRequestRowsGlobal(Value rightInstance)
            {
                return new Value(GameValueMethods.LeaderboardRequestRowsGlobal(rightInstance));
            }

            /// <summary>
            /// Requests given leaderboard to download values around the user position in the table.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value bool</returns>
            public static Value LeaderboardRequestRowsGlobalAroundUser(Value rightInstance)
            {
                return new Value(GameValueMethods.LeaderboardRequestRowsGlobalAroundUser(rightInstance));
            }

            /// <summary>
            /// Starts async. operation to upload score to board with given name, value always overwrite the current value in the board. The board has to be initialized before the call.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value bool</returns>
            public static Value LeaderboardsRequestUploadScore(Value rightInstance)
            {
                return new Value(GameValueMethods.LeaderboardsRequestUploadScore(rightInstance));
            }

            /// <summary>
            /// Starts async. operation to upload score to board with given name, value is only stored to board if it is better than one already in the board. The board has to be initialised before the call.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value bool</returns>
            public static Value LeaderboardsRequestUploadScoreKeepBest(Value rightInstance)
            {
                return new Value(GameValueMethods.LeaderboardsRequestUploadScoreKeepBest(rightInstance));
            }

            /// <summary>
            /// Returns the state of the board with the given name.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value scalar</returns>
            public static Value LeaderboardState(Value rightInstance)
            {
                return new Value(GameValueMethods.LeaderboardState(rightInstance));
            }

            /// <summary>
            /// Ceases the using of the vehicle by a group and unassigns vehicle from the group. If the argument is a single unit, the vehicle will be unassigned from unit's group. After vehicle is unassigned from the group, each individual crew member then unassigned from the vehicle. In short the command could be hypothetically presented as: leaveVehicle = un-addVehicle + unassignVehicle forEach crew However, to make it more reliable, it is best to move unit out of the vehicle manually with moveOut and force unassign the vehicle with unassignVehicle. See AI Group Vehicle Management for more information.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value LeaveVehicle(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.LeaveVehicle(leftInstance, rightInstance));
            }

            /// <summary>
            /// Returns the credits for the libraries used by the game.
            /// </summary>
            /// <returns>Value array</returns>
            public static Value LibraryCredits()
            {
                return new Value(GameValueMethods.LibraryCredits());
            }

            /// <summary>
            /// Returns the library disclaimers.
            /// </summary>
            /// <returns>Value array</returns>
            public static Value LibraryDisclaimers()
            {
                return new Value(GameValueMethods.LibraryDisclaimers());
            }

            /// <summary>
            /// Returns the life state of the given unit. Arma 2 Arma 3 "ALIVE" "DEAD" "DEAD-RESPAWN" "DEAD-SWITCHING" "ASLEEP" "UNCONSCIOUS" "HEALTHY" "DEAD" "DEAD-RESPAWN" "DEAD-SWITCHING" "INCAPACITATED" "INJURED" In Arma 3, lifeState seems to change to "INJURED" when damage aliveUnit >= 0.1 (0.1 seeming to be the value defined in config under "InjuredTreshold"sic). When the state is "INCAPACITATED", a sub-state is available via incapacitatedState command.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value string</returns>
            public static Value LifeState(Value rightInstance)
            {
                return new Value(GameValueMethods.LifeState(rightInstance));
            }

            /// <summary>
            /// Attach light to given object at given position on object.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value LightAttachObject(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.LightAttachObject(leftInstance, rightInstance));
            }

            /// <summary>
            /// Detach light from object.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value LightDetachObject(Value rightInstance)
            {
                return new Value(GameValueMethods.LightDetachObject(rightInstance));
            }

            /// <summary>
            /// Check if lampost is on (shining). A lamp state is local to each client (see switchLight). This command was originally designed to only work with CfgNonAIVehicles class "StreetLamp" only; since Arma 3 v1.92 this command was extended to work with street lights.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value string</returns>
            public static Value LightIsOn(Value rightInstance)
            {
                return new Value(GameValueMethods.LightIsOn(rightInstance));
            }

            /// <summary>
            /// Return the current lightnings value.
            /// </summary>
            /// <returns>Value scalar</returns>
            public static Value Lightnings()
            {
                return new Value(GameValueMethods.Lightnings());
            }

            /// <summary>
            /// Limit the speed of an AI-driven vehicle or AI person to given value. It has continuous effect and AI will not break through the speed limitation until one is contacted, engaged or regrouped.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value LimitSpeed(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.LimitSpeed(leftInstance, rightInstance));
            }

            /// <summary>
            /// Converts given value from given "from" range to wanted "to" range. If clipping is set to true, the resulting value is guaranteed to be within "to" range no matter what. Faster alternative to BIS_fnc_linearConversion.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value scalar</returns>
            public static Value LinearConversion(Value rightInstance)
            {
                return new Value(GameValueMethods.LinearConversion(rightInstance));
            }

            /// <summary>
            /// Creates a structured text containing a line break.
            /// </summary>
            /// <returns>Value text</returns>
            public static Value LineBreak()
            {
                return new Value(GameValueMethods.LineBreak());
            }

            /// <summary>
            /// Checks for object intersection with a virtual line between two positions. Does not work under water. Max harcoded distance is 1000m.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value bool</returns>
            public static Value LineIntersects(Value rightInstance)
            {
                return new Value(GameValueMethods.LineIntersects(rightInstance));
            }

            /// <summary>
            /// Returns a list of objects intersected by the line from begPos to endPos.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value LineIntersectsObjs(Value rightInstance)
            {
                return new Value(GameValueMethods.LineIntersectsObjs(rightInstance));
            }

            /// <summary>
            /// Returns a list of intersections with surfaces and ground from begPosASL to endPosASL. Doesn't return intersection with sea surface. Works underwater, unlike lineIntersects. Hardcoded max distance: 5000m. ⚠ if begPosASL is under the ground and endPosASL is above it, the command will only return intersection with the ground, this is an engine limitation and none of the intersectXXX commands will work when initiated from under the ground. only a single LOD is checked for intersection. LOD2 will only be checked if LOD1 is unavailable.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value LineIntersectsSurfaces(Value rightInstance)
            {
                return new Value(GameValueMethods.LineIntersectsSurfaces(rightInstance));
            }

            /// <summary>
            /// Returns objects intersecting with the virtual line from begPos to endPos. By default, the resulting array of intersecting objects is unsorted (see sortByDistance). Does not work under water. Max hardcoded distance is 1000m.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value LineIntersectsWith(Value rightInstance)
            {
                return new Value(GameValueMethods.LineIntersectsWith(rightInstance));
            }

            /// <summary>
            /// Create and assign item to the correct slot. If there is an item in the targeted slot, it gets replaced. See also assignItem.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value LinkItem(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.LinkItem(leftInstance, rightInstance));
            }

            /// <summary>
            /// List of units that would activate given Trigger. It returns nothing before the simulation started, i.e. in (undelayed) init.sqf files. Returns a pointer to the trigger's list after the simulation started. Since this is just a reference this means that the value in your local variable will change as the content of the trigger area changes. To permanently copy the returned list to a different variable, use _mylist = +(list triggerOne). The second example can be used inside the trigger (in that case, no need to name your trigger). The list returned for trigger of type "Not present" is the same as that returned for type "present".  ⚠While the command can query any trigger, local or remote, the result will be only for the trigger condition set on the local client. See createTrigger for more info.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value List(Value rightInstance)
            {
                return new Value(GameValueMethods.List(rightInstance));
            }

            /// <summary>
            /// Return the list of all objects of given type. Some Old Editor Command
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value ListObjects(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.ListObjects(leftInstance, rightInstance));
            }

            /// <summary>
            /// Return list of datalink targets and time for which they will be/were known.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value ListRemoteTargets(Value rightInstance)
            {
                return new Value(GameValueMethods.ListRemoteTargets(rightInstance));
            }

            /// <summary>
            /// Returns an array of the sensors in the given vehicle's config (configFile >> "CfgVehicles" >> vehicle >> "Components" >> "SensorsManagerComponent" >> "Components").
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value ListVehicleSensors(Value rightInstance)
            {
                return new Value(GameValueMethods.ListVehicleSensors(rightInstance));
            }

            /// <summary>
            /// Returns the natural logarithm of x.   ln(x) and ln(e)
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value scalar_nan</returns>
            public static Value Ln(Value rightInstance)
            {
                return new Value(GameValueMethods.Ln(rightInstance));
            }

            /// <summary>
            /// Adds list of rows of strings.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value scalar</returns>
            public static Value LnbAddArray(Value rightInstance)
            {
                return new Value(GameValueMethods.LnbAddArray(rightInstance));
            }

            /// <summary>
            /// Adds a column at given position.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value scalar</returns>
            public static Value LnbAddColumn(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.LnbAddColumn(leftInstance, rightInstance));
            }

            /// <summary>
            /// Adds a row of strings.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value scalar</returns>
            public static Value LnbAddRow(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.LnbAddRow(leftInstance, rightInstance));
            }

            /// <summary>
            /// Clears all items in the given listbox or combobox.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value LnbClear(Value rightInstance)
            {
                return new Value(GameValueMethods.LnbClear(rightInstance));
            }

            /// <summary>
            /// Returns the text color of the item with the given position of the 2D listbox. The color is returned in format Color (RGBA).
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value LnbColor(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.LnbColor(leftInstance, rightInstance));
            }

            /// <summary>
            /// Returns the right color of given row.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value LnbColorRight(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.LnbColorRight(leftInstance, rightInstance));
            }

            /// <summary>
            /// Returns the index of the selected row id 2D listbox.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value scalar</returns>
            public static Value LnbCurSelRow(Value rightInstance)
            {
                return new Value(GameValueMethods.LnbCurSelRow(rightInstance));
            }

            /// <summary>
            /// Returns the additional text (invisible) in an item with the given position of the 2D listbox.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value string</returns>
            public static Value LnbData(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.LnbData(leftInstance, rightInstance));
            }

            /// <summary>
            /// Removes column with given index from ListNBox control.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value LnbDeleteColumn(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.LnbDeleteColumn(leftInstance, rightInstance));
            }

            /// <summary>
            /// Removes row with the given index from the given listbox or combobox.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value LnbDeleteRow(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.LnbDeleteRow(leftInstance, rightInstance));
            }

            /// <summary>
            /// Returns relative screen X of ListNBox control columns position [0.1,0.3,0.6...]. Use lnbSetColumnsPos to set positions.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value LnbGetColumnsPosition(Value rightInstance)
            {
                return new Value(GameValueMethods.LnbGetColumnsPosition(rightInstance));
            }

            /// <summary>
            /// Returns the picture name or path of the item with the given position of the 2D listbox.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value string</returns>
            public static Value LnbPicture(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.LnbPicture(leftInstance, rightInstance));
            }

            /// <summary>
            /// Returns the right picture of given row. The column parameter does not matter.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value string</returns>
            public static Value LnbPictureRight(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.LnbPictureRight(leftInstance, rightInstance));
            }

            /// <summary>
            /// Sets the color of the item with the given position of the 2D listbox. Color is in format Color (RGBA).
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value LnbSetColor(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.LnbSetColor(leftInstance, rightInstance));
            }

            /// <summary>
            /// Sets the right color.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value LnbSetColorRight(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.LnbSetColorRight(leftInstance, rightInstance));
            }

            /// <summary>
            /// Sets relative screen X for ListNBox control columns positions. Setter for lnbGetColumnsPosition.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value LnbSetColumnsPos(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.LnbSetColumnsPos(leftInstance, rightInstance));
            }

            /// <summary>
            /// Selects the row with the given index of the 2D listbox.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value LnbSetCurSelRow(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.LnbSetCurSelRow(leftInstance, rightInstance));
            }

            /// <summary>
            /// Sets the additional text (invisible) on the item with the given position of the 2D listbox.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value LnbSetData(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.LnbSetData(leftInstance, rightInstance));
            }

            /// <summary>
            /// Sets the picture in the item with the given position of the 2D listbox.The picture is searched in the mission, directory, the dtaExt subdirectory of the campaign directory, and the dtaExt directory and the data bank (or directory).
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value LnbSetPicture(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.LnbSetPicture(leftInstance, rightInstance));
            }

            /// <summary>
            /// Sets the cell picture's colour.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value LnbSetPictureColor(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.LnbSetPictureColor(leftInstance, rightInstance));
            }

            /// <summary>
            /// Sets color of the right picture in a CT_LISTNBOX.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value LnbSetPictureColorRight(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.LnbSetPictureColorRight(leftInstance, rightInstance));
            }

            /// <summary>
            /// Sets the cell picture's colour on cell selection.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value LnbSetPictureColorSelected(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.LnbSetPictureColorSelected(leftInstance, rightInstance));
            }

            /// <summary>
            /// Sets the color of the right picture when it is selected.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value LnbSetPictureColorSelectedRight(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.LnbSetPictureColorSelectedRight(leftInstance, rightInstance));
            }

            /// <summary>
            /// Sets the cell's right-picture. The picture is set to the end of the row, the column parameter does not matter. The picture is searched in the mission, directory, the campaign directory's dtaExt subdirectory, and the data bank (or directory).
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value LnbSetPictureRight(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.LnbSetPictureRight(leftInstance, rightInstance));
            }

            /// <summary>
            /// Sets the text in the item with the given position of the 2D listbox.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value LnbSetText(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.LnbSetText(leftInstance, rightInstance));
            }

            /// <summary>
            /// Sets cell's right-aligned text. Does not replace cell's text.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value LnbSetTextRight(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.LnbSetTextRight(leftInstance, rightInstance));
            }

            /// <summary>
            /// Sets tooltip on the item with the given row and column of CT_LISTNBOX. ⚠By default, tooltips are added for all columns no matter what column index is provided. This behaviour can be overwritten since 2.02 by setting the control's property tooltipPerColumn to true. See CT_LISTNBOX documentation.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value LnbSetTooltip(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.LnbSetTooltip(leftInstance, rightInstance));
            }

            /// <summary>
            /// Sets the additional integer value in the item with the position index of the 2D listbox.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value LnbSetValue(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.LnbSetValue(leftInstance, rightInstance));
            }

            /// <summary>
            /// Returns size of CT_LISTNBOX. This command supports CT_TOOLBOX control since Arma 3 v2.06. For CT_COMBO or CT_LISTBOX see lbSize.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value LnbSize(Value rightInstance)
            {
                return new Value(GameValueMethods.LnbSize(rightInstance));
            }

            /// <summary>
            /// Sorts given multicolumn listbox by lnbText in given column in ascending or descending order. ⚠This command does not support UNICODE, use lnbSortBy if it is needed instead
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value LnbSort(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.LnbSort(leftInstance, rightInstance));
            }

            /// <summary>
            /// Sorts given multi-column ListNBox in the given column by either lnbText, lnbValue or lnbData in normal or reversed order, using case-sensitive or case-insensitive comparison. Unlike the older lnbSortXXX commands, this command supports UNICODE characters out of the box. When sorting by "VALUE", the rows with the same lnbValue will additionally be sorted by lnbText in the order specified by the reversedOrder flag, text specified by `useTextRight` flag and case-sensitivity specified by `caseSensitive` flag. ⚠ This command supports referencing control via IDC as well, but as with any use of IDC in UI Control commands, a dialog should be present, i.e. UI user interaction is created with createDialog rather than createDisplay. As this command supports UNICODE by default, which may result in slower sorting, you can switch it off with unicodeOff param.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value LnbSortBy(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.LnbSortBy(leftInstance, rightInstance));
            }

            /// <summary>
            /// Sorts given multicolumn listbox by lnbValue in given column in ascending or descending order.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value LnbSortByValue(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.LnbSortByValue(leftInstance, rightInstance));
            }

            /// <summary>
            /// Returns the shown text in the item with the given position of the given 2D listbox.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value string</returns>
            public static Value LnbText(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.LnbText(leftInstance, rightInstance));
            }

            /// <summary>
            /// Returns CT_LISTNBOX's right aligned cell text.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value string</returns>
            public static Value LnbTextRight(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.LnbTextRight(leftInstance, rightInstance));
            }

            /// <summary>
            /// Returns the additional integer value in the item with the given position of the 2D listbox.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value scalar</returns>
            public static Value LnbValue(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.LnbValue(leftInstance, rightInstance));
            }

            /// <summary>
            /// Returns the percentage of fullness of a unit's cargo. Output is usually in range 0..1, but can be higher after using certain scripting commands (like addWeaponWithAttachmentsCargoGlobal) which ignore load values when adding items. See Example 2 for load calculation.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value scalar</returns>
            public static Value Load(Value rightInstance)
            {
                return new Value(GameValueMethods.Load(rightInstance));
            }

            /// <summary>
            /// Returns current sum of mass from items stored in all unit's containers, linked items and weapons.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value scalar</returns>
            public static Value LoadAbs(Value rightInstance)
            {
                return new Value(GameValueMethods.LoadAbs(rightInstance));
            }

            /// <summary>
            /// Returns current percentage of mass from items stored in a backpack relative to the maximum capacity of the backpack. It is equivalent to this formula: _loadBackpack = massOfAllItemsInBackpack / getContainerMaxLoad backpack player;
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value scalar</returns>
            public static Value LoadBackpack(Value rightInstance)
            {
                return new Value(GameValueMethods.LoadBackpack(rightInstance));
            }

            /// <summary>
            /// Loads the given file as a Config, allowing easy processing of the config file contents using commands such as configClasses, configProperties, >>, etc. It can load .rvmat, .bisurf, .cpp, .bin, .sqm, and description.ext files (both binarized and unbinarized configs are supported). ⚠ Config loading can be very slow; the config should only be loaded once and cached, e.g in a HashMap of File Path → Config pairs (see Example 3). It is advised to store the generated config in a variable, otherwise it will get destroyed if it is not being referenced directly (see Example 2).
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value config</returns>
            public static Value LoadConfig(Value rightInstance)
            {
                return new Value(GameValueMethods.LoadConfig(rightInstance));
            }

            /// <summary>
            /// Returns the content of given files. If you plan to compile said string, be aware that the file should not contain comments or compile will throw an error. If there are comments, use preprocessFile/preprocessFileLineNumbers instead. ⚠If the file is not prepared using UTF-8 encoding and contains some characters with codes > 127, they might convert incorrectly.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value string</returns>
            public static Value LoadFile(Value rightInstance)
            {
                return new Value(GameValueMethods.LoadFile(rightInstance));
            }

            /// <summary>
            /// Loads game from the last autosave made with saveGame. If no autosave exists, restarts the mission. When used in campaign it will also deduct 1 life, defined in: campaignConfigFile >> "Campaign" / <battle> / <mission> / "lives" A  "Loaded" mission event handler is available and it is important that it is added in preInit in order for it to fire on load from save.
            /// </summary>
            /// <returns>Value nothing</returns>
            public static Value LoadGame()
            {
                return new Value(GameValueMethods.LoadGame());
            }

            /// <summary>
            /// Loads person's identity from Objects.sav file in campaign directory (from entry name).
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value bool</returns>
            public static Value LoadIdentity(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.LoadIdentity(leftInstance, rightInstance));
            }

            /// <summary>
            /// Initiates the loading action on given weapon of the turret of a transport. So the new magazine is not available instantly, yet according to the reloadTime. The turret has to be manned. One can also change the magazine if its respective weapon is not selected.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value LoadMagazine(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.LoadMagazine(leftInstance, rightInstance));
            }

            /// <summary>
            /// Creates the load overlay dialog for the specified type of overlay. Some Old Editor Command
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value LoadOverlay(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.LoadOverlay(leftInstance, rightInstance));
            }

            /// <summary>
            /// Loads object's properties from Objects.sav file in campaign directory (from entry name).
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value bool</returns>
            public static Value LoadStatus(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.LoadStatus(leftInstance, rightInstance));
            }

            /// <summary>
            /// Returns current percentage of mass from items stored in a uniform relative to the maximum capacity of the uniform. It is equivalent to this formula: private _loadUniform = massOfAllItemsInUniform / getContainerMaxLoad uniform player;
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value scalar</returns>
            public static Value LoadUniform(Value rightInstance)
            {
                return new Value(GameValueMethods.LoadUniform(rightInstance));
            }

            /// <summary>
            /// Returns current percentage of mass from items stored in a vest relative to the maximum capacity of the vest.  It is equivalent to this formula: _loadVest = massOfAllItemsInVest / getContainerMaxLoad vest player;
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value scalar</returns>
            public static Value LoadVest(Value rightInstance)
            {
                return new Value(GameValueMethods.LoadVest(rightInstance));
            }

            /// <summary>
            /// Check if given unit is local on the computer in multiplayer games - see Multiplayer Scripting - Locality. This can be used to determine on which computer some code must be run. In single player all objects are local.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value bool</returns>
            public static Value Local(Value rightInstance)
            {
                return new Value(GameValueMethods.Local(rightInstance));
            }

            /// <summary>
            /// Used to internationalise text messages. The provided translation key is looked up in Stringtable.xml (or Stringtable.csv).
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value string</returns>
            public static Value Localize(Value rightInstance)
            {
                return new Value(GameValueMethods.Localize(rightInstance));
            }

            /// <summary>
            /// Returns local Namespace attached to the mission. Has the same lifetime as missionNamespace but variables cannot be broadcasted out of or into this namespace in multiplayer and will not be serialized when game is saved. UI variables can be safely stored in this namespace. Use allVariables command to save the variables elsewhere if required.
            /// </summary>
            /// <returns>Value namespace</returns>
            public static Value LocalNamespace()
            {
                return new Value(GameValueMethods.LocalNamespace());
            }

            /// <summary>
            /// A non-existing Location. To compare non-existent locations use isNull or isEqualTo: locationNull == locationNull;			// false isNull locationNull;					// true locationNull isEqualTo locationNull;	// true
            /// </summary>
            /// <returns>Value location</returns>
            public static Value LocationNull()
            {
                return new Value(GameValueMethods.LocationNull());
            }

            /// <summary>
            /// Returns the position of a location. If the location is attached to an object, that object's position is returned.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value LocationPosition(Value rightInstance)
            {
                return new Value(GameValueMethods.LocationPosition(rightInstance));
            }

            /// <summary>
            /// Lock vehicle (disable mounting / dismounting) for player. This command will remove user get in/get out actions but will not stop player getting into or out of vehicle via script commands (e.g moveInCargo). Alternative syntax is similar to setVehicleLock but with numbers.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value Lock(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.Lock(leftInstance, rightInstance));
            }

            /// <summary>
            /// Lock/Unlock stabilized camera to target. Works only on turrets which have optic mode selected with direction stabilization enabled. Since 2.08 the command also works with non-stabilized turrets (such as main turret of a tank). See syntax 2. The command is local to the turret gunner, not the vehicle.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value LockCameraTo(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.LockCameraTo(leftInstance, rightInstance));
            }

            /// <summary>
            /// Lock all cargo positions of a vehicle or lock by index. This command will remove user "get in" action (not get out) but will also stop player getting into vehicle via script commands (e.g moveInCargo) unlike lock command.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value LockCargo(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.LockCargo(leftInstance, rightInstance));
            }

            /// <summary>
            /// Lock the driver position of the vehicle. This command must be executed where vehicle is local. This command will remove user get in action (not get out) but will also stop player getting into vehicle via script commands unlike lock command
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value LockDriver(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.LockDriver(leftInstance, rightInstance));
            }

            /// <summary>
            /// Check if vehicle is locked. If it is locked, Persons cannot mount / dismount without order.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value scalar</returns>
            public static Value Locked(Value rightInstance)
            {
                return new Value(GameValueMethods.Locked(rightInstance));
            }

            /// <summary>
            /// Return the turret lock target. The command is local to the turret, not the vehicle.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing_object</returns>
            public static Value LockedCameraTo(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.LockedCameraTo(leftInstance, rightInstance));
            }

            /// <summary>
            /// Check whether cargo position of the vehicle is locked.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value bool</returns>
            public static Value LockedCargo(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.LockedCargo(leftInstance, rightInstance));
            }

            /// <summary>
            /// Check whether driver position of the vehicle turret is locked.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value bool</returns>
            public static Value LockedDriver(Value rightInstance)
            {
                return new Value(GameValueMethods.LockedDriver(rightInstance));
            }

            /// <summary>
            /// Get a vehicle's inventory lock state. Can also be used on a unit's backback (see lockInventory).
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value bool</returns>
            public static Value LockedInventory(Value rightInstance)
            {
                return new Value(GameValueMethods.LockedInventory(rightInstance));
            }

            /// <summary>
            /// Check whether gunner position of the vehicle turret is locked.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value bool</returns>
            public static Value LockedTurret(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.LockedTurret(leftInstance, rightInstance));
            }

            /// <summary>
            /// Locks the identity of a person. This will disable default identity.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value bool</returns>
            public static Value LockIdentity(Value rightInstance)
            {
                return new Value(GameValueMethods.LockIdentity(rightInstance));
            }

            /// <summary>
            /// Lock or unlock a vehicle's inventory access. This command can also lock backpack a unit is wearing to prevent access by a third party. If set to true (locked), the inventory cannot be accessed via hotkey or action menu.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value LockInventory(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.LockInventory(leftInstance, rightInstance));
            }

            /// <summary>
            /// Lock the gunner position of the vehicle turret. This command will remove user "get in" action (not "get out") but will also stop player getting into vehicle via script commands unlike lock command.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value LockTurret(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.LockTurret(leftInstance, rightInstance));
            }

            /// <summary>
            /// 
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value LockWP(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.LockWP(leftInstance, rightInstance));
            }

            /// <summary>
            /// 
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value scalar_nan</returns>
            public static Value Log(Value rightInstance)
            {
                return new Value(GameValueMethods.Log(rightInstance));
            }

            /// <summary>
            /// Creates a log file containing the list of all game entities in scene.  File is created in the same directory as .rpt file.  Special: BattlEye's RCON variant of this command is #logEntities (see also Multiplayer_Server_Commands)
            /// </summary>
            /// <returns>Value nothing</returns>
            public static Value LogEntities()
            {
                return new Value(GameValueMethods.LogEntities());
            }

            /// <summary>
            /// Registers new log file recording a network traffic and returns handle of the log. The log file is saved inside the Arma 3 root folder. ⚠logNetwork can potentially create a large log file.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value scalar</returns>
            public static Value LogNetwork(Value rightInstance)
            {
                return new Value(GameValueMethods.LogNetwork(rightInstance));
            }

            /// <summary>
            /// Terminates a network log file started with logNetwork with the given handle
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value LogNetworkTerminate(Value rightInstance)
            {
                return new Value(GameValueMethods.LogNetworkTerminate(rightInstance));
            }

            /// <summary>
            /// Control what the unit(s) is/are looking at (target or Position). If target is used, it will get revealed fully.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value LookAt(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.LookAt(leftInstance, rightInstance));
            }

            /// <summary>
            /// Point the camera and center the map on the position. Some Old Editor Command
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value LookAtPos(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.LookAtPos(leftInstance, rightInstance));
            }

            /// <summary>
            /// Get array with magazines from ammo box (or any general weapon holder container).
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value MagazineCargo(Value rightInstance)
            {
                return new Value(GameValueMethods.MagazineCargo(rightInstance));
            }

            /// <summary>
            /// Returns array of type names of all vehicle's magazines. When applied to a unit, the command behaves differently and will omit magazines already loaded into unit's weapons. Use currentMagazine to get this information for a currently loaded magazine.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value Magazines(Value rightInstance)
            {
                return new Value(GameValueMethods.Magazines(rightInstance));
            }

            /// <summary>
            /// Returns all magazines (including empty) from all vehicle turrets (including driver turret [-1]) and their ammo counts. Since Arma 3 v2.08.148327 it is possible to exclude person turrets from returned results.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value MagazinesAllTurrets(Value rightInstance)
            {
                return new Value(GameValueMethods.MagazinesAllTurrets(rightInstance));
            }

            /// <summary>
            /// Returns all vehicle's magazines and their ammo count (also works on supply boxes). When applied to a unit (soldier), the command behaves differently and will omit magazines already loaded into unit's weapons. Use magazinesAmmoFull to return all magazines.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value MagazinesAmmo(Value rightInstance)
            {
                return new Value(GameValueMethods.MagazinesAmmo(rightInstance));
            }

            /// <summary>
            /// Returns an array of subarrays with the type names and ammo left of all the vehicle's cargo or container magazines.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value MagazinesAmmoCargo(Value rightInstance)
            {
                return new Value(GameValueMethods.MagazinesAmmoCargo(rightInstance));
            }

            /// <summary>
            /// Returns array of arrays of all unit's or vehicle's magazines with extended information about them. The magazines returned are for primary gunner. If you need magazines for all turrets, see magazinesAllTurrets. ⚠This command does not return empty magazines from containers, only from the weapon. Use magazinesAmmoCargo instead.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value MagazinesAmmoFull(Value rightInstance)
            {
                return new Value(GameValueMethods.MagazinesAmmoFull(rightInstance));
            }

            /// <summary>
            /// Returns an array of strings with description of all vehicle's magazines, their ammo count (current/default) and their ids for the primary gunner.  When applied to a unit (soldier), the command behaves differently and will omit magazines already loaded into unit's weapons. Use currentMagazineDetail to get this information for a currently loaded magazine.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value MagazinesDetail(Value rightInstance)
            {
                return new Value(GameValueMethods.MagazinesDetail(rightInstance));
            }

            /// <summary>
            /// Returns an array with the type names of all the unit's backpack magazines.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value MagazinesDetailBackpack(Value rightInstance)
            {
                return new Value(GameValueMethods.MagazinesDetailBackpack(rightInstance));
            }

            /// <summary>
            /// Returns an array with the type names of all the unit's uniform magazines.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value MagazinesDetailUniform(Value rightInstance)
            {
                return new Value(GameValueMethods.MagazinesDetailUniform(rightInstance));
            }

            /// <summary>
            /// Returns an array with the type names of all the unit's vest magazines.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value MagazinesDetailVest(Value rightInstance)
            {
                return new Value(GameValueMethods.MagazinesDetailVest(rightInstance));
            }

            /// <summary>
            /// Returns all magazines of given turret. Use turret path [-1] for driver's turret. Alternatively, use magazinesAllTurrets. When main syntax is used, command excludes empty magazines for driver turret [-1] but returns empty magazines for all the other turrets.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value MagazinesTurret(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.MagazinesTurret(leftInstance, rightInstance));
            }

            /// <summary>
            /// Returns ammo count of given type from given turret  ⚠Broken when vehicle has multiple magazines of the same type.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value scalar</returns>
            public static Value MagazineTurretAmmo(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.MagazineTurretAmmo(leftInstance, rightInstance));
            }

            /// <summary>
            /// Add next frame to map animation.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value MapAnimAdd(Value rightInstance)
            {
                return new Value(GameValueMethods.MapAnimAdd(rightInstance));
            }

            /// <summary>
            /// Clear map animation.
            /// </summary>
            /// <returns>Value nothing</returns>
            public static Value MapAnimClear()
            {
                return new Value(GameValueMethods.MapAnimClear());
            }

            /// <summary>
            /// Play map animation.
            /// </summary>
            /// <returns>Value nothing</returns>
            public static Value MapAnimCommit()
            {
                return new Value(GameValueMethods.MapAnimCommit());
            }

            /// <summary>
            /// Check if map animation is finished.
            /// </summary>
            /// <returns>Value bool</returns>
            public static Value MapAnimDone()
            {
                return new Value(GameValueMethods.MapAnimDone());
            }

            /// <summary>
            /// ctrl mapCenterOnCamera enable syntax enables/disables continuous centering of the main map type control on the camera position. Needs to be executed once. mapCenterOnCamera ctrl syntax centers mini map type control on camera. The command returns world position of the camera. Needs to be executed each frame (preferably inside onDraw EH).
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value MapCenterOnCamera(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.MapCenterOnCamera(leftInstance, rightInstance));
            }

            /// <summary>
            /// Returns the map grid position of an object or position. The format is determined by the Grid format specified in the CfgWorlds for the current world. Eg: "024577" or "De82" or similar.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value string</returns>
            public static Value MapGridPosition(Value rightInstance)
            {
                return new Value(GameValueMethods.MapGridPosition(rightInstance));
            }

            /// <summary>
            /// Marks current mission as finished on Steam. Returns true if Steam query is successfully started or false otherwise.
            /// </summary>
            /// <returns>Value bool</returns>
            public static Value MarkAsFinishedOnSteam()
            {
                return new Value(GameValueMethods.MarkAsFinishedOnSteam());
            }

            /// <summary>
            /// Gets the marker alpha. See setMarkerAlpha.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value scalar</returns>
            public static Value MarkerAlpha(Value rightInstance)
            {
                return new Value(GameValueMethods.MarkerAlpha(rightInstance));
            }

            /// <summary>
            /// Gets the marker brush. See setMarkerBrush.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value string</returns>
            public static Value MarkerBrush(Value rightInstance)
            {
                return new Value(GameValueMethods.MarkerBrush(rightInstance));
            }

            /// <summary>
            /// Returns the channel that a marker belongs to.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value string</returns>
            public static Value MarkerChannel(Value rightInstance)
            {
                return new Value(GameValueMethods.MarkerChannel(rightInstance));
            }

            /// <summary>
            /// Returns marker color for given marker. See also setMarkerColor.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value string</returns>
            public static Value MarkerColor(Value rightInstance)
            {
                return new Value(GameValueMethods.MarkerColor(rightInstance));
            }

            /// <summary>
            /// Get marker direction.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value scalar</returns>
            public static Value MarkerDir(Value rightInstance)
            {
                return new Value(GameValueMethods.MarkerDir(rightInstance));
            }

            /// <summary>
            /// Returns a polyline marker's path data.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value MarkerPolyline(Value rightInstance)
            {
                return new Value(GameValueMethods.MarkerPolyline(rightInstance));
            }

            /// <summary>
            /// Returns marker position. See also setMarkerPos.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value MarkerPos(Value rightInstance)
            {
                return new Value(GameValueMethods.MarkerPos(rightInstance));
            }

            /// <summary>
            /// Returns if the marker is drawn with shadow enabled.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value bool</returns>
            public static Value MarkerShadow(Value rightInstance)
            {
                return new Value(GameValueMethods.MarkerShadow(rightInstance));
            }

            /// <summary>
            /// Returns the shape of given marker.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value string</returns>
            public static Value MarkerShape(Value rightInstance)
            {
                return new Value(GameValueMethods.MarkerShape(rightInstance));
            }

            /// <summary>
            /// Returns marker size. This command is identical to getMarkerSize.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value MarkerSize(Value rightInstance)
            {
                return new Value(GameValueMethods.MarkerSize(rightInstance));
            }

            /// <summary>
            /// Get marker text.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value string</returns>
            public static Value MarkerText(Value rightInstance)
            {
                return new Value(GameValueMethods.MarkerText(rightInstance));
            }

            /// <summary>
            /// Gets type of marker. See CfgMarkers for a list of standard markers.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value string</returns>
            public static Value MarkerType(Value rightInstance)
            {
                return new Value(GameValueMethods.MarkerType(rightInstance));
            }

            /// <summary>
            /// Returns resulting matrix from the multiplication of two matrices. First matrix must be of the size n × k, while the second must be of the size k × m, i.e columns matrix1 == rows matrix2. The resulting matrix will be of the size n × m. If the shapes do not match, empty array [] will be returned.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value MatrixMultiply(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.MatrixMultiply(leftInstance, rightInstance));
            }

            /// <summary>
            ///  Matrix transposition Returns transposed version of the given matrix. The matrix is an Array of rows. Each row is an Array of corresponding column values for the row. The minimum number of rows is 1.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value MatrixTranspose(Value rightInstance)
            {
                return new Value(GameValueMethods.MatrixTranspose(rightInstance));
            }

            /// <summary>
            /// The greater value of a and b.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value scalar_nan</returns>
            public static Value Max(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.Max(leftInstance, rightInstance));
            }

            /// <summary>
            /// Returns maximum load limit for a unit, uniform/vest/backpack containers, vehicle cargo, supply boxes and weapon holders.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value scalar</returns>
            public static Value MaxLoad(Value rightInstance)
            {
                return new Value(GameValueMethods.MaxLoad(rightInstance));
            }

            /// <summary>
            /// Return a list of members in given team.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value Members(Value rightInstance)
            {
                return new Value(GameValueMethods.Members(rightInstance));
            }

            /// <summary>
            /// Returns action stored in item on given path in CT_MENU_STRIP control.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value string</returns>
            public static Value MenuAction(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.MenuAction(leftInstance, rightInstance));
            }

            /// <summary>
            /// Adds new submenu entry into item on given path.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value scalar</returns>
            public static Value MenuAdd(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.MenuAdd(leftInstance, rightInstance));
            }

            /// <summary>
            /// Returns if item on given path is checked or not.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value bool</returns>
            public static Value MenuChecked(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.MenuChecked(leftInstance, rightInstance));
            }

            /// <summary>
            /// Removes all entries from given menu strip.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value MenuClear(Value rightInstance)
            {
                return new Value(GameValueMethods.MenuClear(rightInstance));
            }

            /// <summary>
            /// Collapses item on given path and all its children.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value MenuCollapse(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.MenuCollapse(leftInstance, rightInstance));
            }

            /// <summary>
            /// Returns data stored in menu entry on given path.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value string</returns>
            public static Value MenuData(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.MenuData(leftInstance, rightInstance));
            }

            /// <summary>
            /// Deletes menu entry on given path.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value MenuDelete(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.MenuDelete(leftInstance, rightInstance));
            }

            /// <summary>
            /// Enables or disables menu entry on given path. ⚠The old alternative syntax control menuEnable path is still in use and left for backward compatibility.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value MenuEnable(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.MenuEnable(leftInstance, rightInstance));
            }

            /// <summary>
            /// Returns if menu entry on given path is enabled or not.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value bool</returns>
            public static Value MenuEnabled(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.MenuEnabled(leftInstance, rightInstance));
            }

            /// <summary>
            /// Expands given menu entry on given path and all its parents so entry is visible.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value MenuExpand(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.MenuExpand(leftInstance, rightInstance));
            }

            /// <summary>
            /// Returns path to menu entry mouse is currently hovering over.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value MenuHover(Value rightInstance)
            {
                return new Value(GameValueMethods.MenuHover(rightInstance));
            }

            /// <summary>
            /// Returns picture set into item on given path.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value string</returns>
            public static Value MenuPicture(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.MenuPicture(leftInstance, rightInstance));
            }

            /// <summary>
            /// Sets new action into menu entry on given path.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value MenuSetAction(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.MenuSetAction(leftInstance, rightInstance));
            }

            /// <summary>
            /// Sets item on given path to be checked or not. By default menu strip entries are not checkable. Once this command was executed, an entry can become checked and unchecked. If an entry is checked is indicated by a tick to the left of the entry's text. Setting an entry to be checkable will overwrite set picture with menuSetPicture.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value MenuSetCheck(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.MenuSetCheck(leftInstance, rightInstance));
            }

            /// <summary>
            /// Sets data into menu entry on given path.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value MenuSetData(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.MenuSetData(leftInstance, rightInstance));
            }

            /// <summary>
            /// Sets new picture into menu entry on given path. The picture will be replaced by a tick if the entry was set to checkable with menuSetCheck.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value MenuSetPicture(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.MenuSetPicture(leftInstance, rightInstance));
            }

            /// <summary>
            /// Sets shortcut of given menu strip entry.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value MenuSetShortcut(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.MenuSetShortcut(leftInstance, rightInstance));
            }

            /// <summary>
            /// Sets text of given menu strip entry.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value MenuSetText(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.MenuSetText(leftInstance, rightInstance));
            }

            /// <summary>
            /// Sets weblink (URL) of given menu strip entry, subject to allowedHTMLLoadURIs[] whitelisting in CfgCommands config.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value MenuSetURL(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.MenuSetURL(leftInstance, rightInstance));
            }

            /// <summary>
            /// Sets new value into menu entry on given path.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value MenuSetValue(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.MenuSetValue(leftInstance, rightInstance));
            }

            /// <summary>
            /// Returns shortcut related to menu entry on given path in form of a bitflag. To get the shortcut text use menuShortcutText.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value scalar</returns>
            public static Value MenuShortcut(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.MenuShortcut(leftInstance, rightInstance));
            }

            /// <summary>
            /// Returns a string containing shortcut text for menu item on the given path.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value string</returns>
            public static Value MenuShortcutText(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.MenuShortcutText(leftInstance, rightInstance));
            }

            /// <summary>
            /// Returns how many sub entries is in item on given path.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value scalar</returns>
            public static Value MenuSize(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.MenuSize(leftInstance, rightInstance));
            }

            /// <summary>
            /// Sorts subentries of item on given path by their text.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value MenuSort(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.MenuSort(leftInstance, rightInstance));
            }

            /// <summary>
            /// Returns current text set in menu entry on given path.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value string</returns>
            public static Value MenuText(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.MenuText(leftInstance, rightInstance));
            }

            /// <summary>
            /// Returns current URL set in entry on given path.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value string</returns>
            public static Value MenuURL(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.MenuURL(leftInstance, rightInstance));
            }

            /// <summary>
            /// Returns current value set in menu entry on given path.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value scalar</returns>
            public static Value MenuValue(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.MenuValue(leftInstance, rightInstance));
            }

            /// <summary>
            /// Merges two HashMaps.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value Merge(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.Merge(leftInstance, rightInstance));
            }

            /// <summary>
            /// The smaller of a and b.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value scalar_nan</returns>
            public static Value Min(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.Min(leftInstance, rightInstance));
            }

            /// <summary>
            /// Checks if the given mine is active.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value bool</returns>
            public static Value MineActive(Value rightInstance)
            {
                return new Value(GameValueMethods.MineActive(rightInstance));
            }

            /// <summary>
            /// Returns true if mine has been detected by a given side
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value bool</returns>
            public static Value MineDetectedBy(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.MineDetectedBy(leftInstance, rightInstance));
            }

            /// <summary>
            /// Returns a guided missile's target.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value object</returns>
            public static Value MissileTarget(Value rightInstance)
            {
                return new Value(GameValueMethods.MissileTarget(rightInstance));
            }

            /// <summary>
            /// Returns a guided missile's target position.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value MissileTargetPos(Value rightInstance)
            {
                return new Value(GameValueMethods.MissileTargetPos(rightInstance));
            }

            /// <summary>
            /// Return root of mission Description.ext entries hierarchy. ⚠Since the introduction of the Eden Editor, scenario attributes can be configured in the editor itself, not only in the external Description.ext file. To access desired value independently on where it is stored, use the following commands: getMissionConfigValue getMissionConfig
            /// </summary>
            /// <returns>Value config</returns>
            public static Value MissionConfigFile()
            {
                return new Value(GameValueMethods.MissionConfigFile());
            }

            /// <summary>
            /// Return difficulty that has been forced for this mission, returns -1 if difficulty is not forced and it is used one from player's options.
            /// </summary>
            /// <returns>Value scalar</returns>
            public static Value MissionDifficulty()
            {
                return new Value(GameValueMethods.MissionDifficulty());
            }

            /// <summary>
            /// Returns mission end type and how it was ended or an empty array [] is mission was not ended.
            /// </summary>
            /// <returns>Value array</returns>
            public static Value MissionEnd()
            {
                return new Value(GameValueMethods.MissionEnd());
            }

            /// <summary>
            /// Return currently loaded mission file (path to mission.pbo, relative to game exe).
            /// </summary>
            /// <returns>Value string</returns>
            public static Value MissionName()
            {
                return new Value(GameValueMethods.MissionName());
            }

            /// <summary>
            /// Return workshop-compatible currently loaded mission file (path to mission.pbo, relative to game exe). missionName will return the Workshop user-friendly mission name, whereas missionNameSource will take the information from mission.sqm. pre-v2.02 missions may return an empty string.
            /// </summary>
            /// <returns>Value string</returns>
            public static Value MissionNameSource()
            {
                return new Value(GameValueMethods.MissionNameSource());
            }

            /// <summary>
            /// Returns the global namespace attached to mission.
            /// </summary>
            /// <returns>Value namespace</returns>
            public static Value MissionNamespace()
            {
                return new Value(GameValueMethods.MissionNamespace());
            }

            /// <summary>
            /// This namespace has the same lifetime as profileNamespace but is also connected to the mission it is saved from. See saveMissionProfileNamespace for more details.
            /// </summary>
            /// <returns>Value namespace</returns>
            public static Value MissionProfileNamespace()
            {
                return new Value(GameValueMethods.MissionProfileNamespace());
            }

            /// <summary>
            /// Returns date and time when mission started. Because this command returns the time of the actual start of the mission, it might not be available in pre-init or init, but is guaranteed to be available in post-init when time > 0.
            /// </summary>
            /// <returns>Value array</returns>
            public static Value MissionStart()
            {
                return new Value(GameValueMethods.MissionStart());
            }

            /// <summary>
            /// Returns the version of the current mission. Mission from the 2D Editor: 12 Mission from the Eden Editor: 15 and higher (for example current version for Eden Editor mission in Arma 3 v1.57 is 51)
            /// </summary>
            /// <returns>Value scalar</returns>
            public static Value MissionVersion()
            {
                return new Value(GameValueMethods.MissionVersion());
            }

            /// <summary>
            /// Remainder of a divided by b.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value scalar_nan</returns>
            public static Value Mod(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.Mod(leftInstance, rightInstance));
            }

            /// <summary>
            /// Translates relative position from object model space to world space in PositionAGL format. This command will take into account vectorUp of the object when calculating relative coordinates. For the PositionASL version of this command, see modelToWorldWorld. ⚠For scaled objects, the relative position will first be multiplied by the object scale. For example, if the object scale is 2, _obj modelToWorld [0,1,0] will be offset 2 meters from the model center ([0,0,0]).
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value ModelToWorld(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.ModelToWorld(leftInstance, rightInstance));
            }

            /// <summary>
            /// Converts position from object model space to world space in render time scope. For ASL version see modelToWorldVisualWorld. ⚠For scaled objects, the relative position will first be multiplied by the object scale. For example, if the object scale is 2, _obj modelToWorldVisual [0,1,0] will be offset 2 meters from the model center ([0,0,0]).
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value ModelToWorldVisual(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.ModelToWorldVisual(leftInstance, rightInstance));
            }

            /// <summary>
            /// Converts position from object model space to world space in render time scope. For the PositionAGL version see modelToWorldVisual. ⚠For scaled objects, the relative position will first be multiplied by the object scale. For example, if the object's scale is 2, _obj modelToWorldVisualWorld [0,1,0] will be offset 2 meters from the model center ([0,0,0]).
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value ModelToWorldVisualWorld(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.ModelToWorldVisualWorld(leftInstance, rightInstance));
            }

            /// <summary>
            /// Converts position from object model space to world space in PositionASL format from the object's centre position. ⚠For scaled objects, the relative position will first be multiplied by the object scale. For example, if the object scale is 2, _obj modelToWorldWorld [0,1,0] will be offset 2 meters from the model center ([0,0,0]).
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value ModelToWorldWorld(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.ModelToWorldWorld(leftInstance, rightInstance));
            }

            /// <summary>
            /// Returns list of mod parameters according to given options, values are in same order as the given options.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value ModParams(Value rightInstance)
            {
                return new Value(GameValueMethods.ModParams(rightInstance));
            }

            /// <summary>
            /// Returns the intensity of the moon's brightness in range 0...1.
            /// </summary>
            /// <returns>Value scalar</returns>
            public static Value MoonIntensity()
            {
                return new Value(GameValueMethods.MoonIntensity());
            }

            /// <summary>
            /// Returns the phase of the in-game Moon on the given date in range 0...1, where 0 - new Moon, 1 - full Moon. According to this command the fullest Moon in Arma 3 at midnight is on setDate [4804,7,13,0,0]; Use Moon Phase Utility to find out date for a mission with desired moon.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value scalar</returns>
            public static Value MoonPhase(Value rightInstance)
            {
                return new Value(GameValueMethods.MoonPhase(rightInstance));
            }

            /// <summary>
            /// Get the provided unit's current morale level.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value scalar</returns>
            public static Value Morale(Value rightInstance)
            {
                return new Value(GameValueMethods.Morale(rightInstance));
            }

            /// <summary>
            /// Let group move to given position. Active waypoints will be ignored when command is used.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value Move(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.Move(leftInstance, rightInstance));
            }

            /// <summary>
            /// Moves the Eden Editor camera.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value Move3DENCamera(Value rightInstance)
            {
                return new Value(GameValueMethods.Move3DENCamera(rightInstance));
            }

            /// <summary>
            /// Moves unit to the first available seat in the specified vehicle. The order of priorities is the same order used in squad command when you order subordinates to get in vehicle to any position and is the same order used in Zeus when you drag units to a vehicle. Seat assignment seems to use the following priority logic: driver (moveInDriver) → commander (moveInCommander) → gunner (moveInGunner) → turrets (moveInTurret) → cargo (moveInCargo). ⚠If the unit is already in a vehicle, nothing will happen. You should use moveOut to move the unit out of his vehicle before trying to move him into a new (or same) vehicle. This command will move player into the locked vehicle or seat just as well.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value bool</returns>
            public static Value MoveInAny(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.MoveInAny(leftInstance, rightInstance));
            }

            /// <summary>
            /// Moves a unit into a vehicle cargo position (immediately and without animation). See AI Group Vehicle Management for more information. ⚠If the unit is already in a vehicle, nothing will happen. You should use moveOut to move the unit out of his vehicle before trying to move him into a new (or same) vehicle.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value MoveInCargo(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.MoveInCargo(leftInstance, rightInstance));
            }

            /// <summary>
            /// Move soldier into vehicle commander position (Immediate, no animation). ⚠If the unit is already in a vehicle, nothing will happen. You should use moveOut to move the unit out of his vehicle before trying to move him into a new (or same) vehicle.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value MoveInCommander(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.MoveInCommander(leftInstance, rightInstance));
            }

            /// <summary>
            /// Moves soldier into vehicle driver position (immediate, no animation). See AI Group Vehicle Management for more information. ⚠If the unit is already in a vehicle, nothing will happen. You should use moveOut to move the unit out of his vehicle before trying to move him into a new (or same) vehicle.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value MoveInDriver(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.MoveInDriver(leftInstance, rightInstance));
            }

            /// <summary>
            /// Move soldier into vehicle gunner position (Immediate, no animation). See AI Group Vehicle Management for more information. ⚠If the unit is already in a vehicle, nothing will happen. You should use moveOut to move the unit out of his vehicle before trying to move him into a new (or same) vehicle.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value MoveInGunner(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.MoveInGunner(leftInstance, rightInstance));
            }

            /// <summary>
            /// Moves the soldier into the vehicle's turret. (Immediately, without animation). See AI Group Vehicle Management for more information. ⚠If the unit is already in a vehicle, nothing will happen. You should use moveOut to move the unit out of his vehicle before trying to move him into a new (or same) vehicle.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value MoveInTurret(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.MoveInTurret(leftInstance, rightInstance));
            }

            /// <summary>
            /// Shifts an editor object to the end of the objects array. This means,that the object will be drawn last (after all other objects).  Some Old Editor Command
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value MoveObjectToEnd(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.MoveObjectToEnd(leftInstance, rightInstance));
            }

            /// <summary>
            /// Moves the soldier out of the vehicle. Notes: Works for both AI and player entities AI unit gets back in - unless is under player command or combined with other sqf commands (orderGetIn false, allowGetIn false or leaveVehicle) Respects the vehicle's lock state (same as action "Eject") - unlike doGetOut, commandGetOut. It will work for player entities regardless though Still executes when the vehicle is moving/flying (same as action "Eject") - unlike doGetOut, commandGetOut Without vehicle's position's get out animation - unlike action eject, doGetOut, commandGetOut Immediately - unlike action eject, doGetOut, commandGetOut Works also on dead units (same as action "Eject" (but one after another)) - unlike doGetOut, commandGetOut Does not work for UAV crew Does not work for remoteControlled units Works on unconscious (same as action "Eject" (but one after another)) - unlike doGetOut, commandGetOut (unless AI under player command)
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value MoveOut(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.MoveOut(leftInstance, rightInstance));
            }

            /// <summary>
            /// Returns the current time of the most important RTM animation currently being played on the soldier.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value scalar</returns>
            public static Value MoveTime(Value rightInstance)
            {
                return new Value(GameValueMethods.MoveTime(rightInstance));
            }

            /// <summary>
            /// Low level command to person to move to given position.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value MoveTo(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.MoveTo(leftInstance, rightInstance));
            }

            /// <summary>
            /// Check if latest low level moveTo command is finished.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value bool</returns>
            public static Value MoveToCompleted(Value rightInstance)
            {
                return new Value(GameValueMethods.MoveToCompleted(rightInstance));
            }

            /// <summary>
            /// Check if latest low level moveTo command failed.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value bool</returns>
            public static Value MoveToFailed(Value rightInstance)
            {
                return new Value(GameValueMethods.MoveToFailed(rightInstance));
            }

            /// <summary>
            /// Returns the current music volume (set by fadeMusic)
            /// </summary>
            /// <returns>Value scalar</returns>
            public static Value MusicVolume()
            {
                return new Value(GameValueMethods.MusicVolume());
            }

            /// <summary>
            /// When argument is Object, the command returns the name given to a unit using the setIdentity instruction or selected randomly by the game engine if setIdentity has not been used on the unit. If used on vehicle, name of first crew member (in order commander, driver, gunner). If used on an object, "Error: No unit" is being returned.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value string</returns>
            public static Value Name(Value rightInstance)
            {
                return new Value(GameValueMethods.Name(rightInstance));
            }

            /// <summary>
            /// Returns a list of named properties on Geometry LOD.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value NamedProperties(Value rightInstance)
            {
                return new Value(GameValueMethods.NamedProperties(rightInstance));
            }

            /// <summary>
            /// Returns the nameSound of a person.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value string</returns>
            public static Value NameSound(Value rightInstance)
            {
                return new Value(GameValueMethods.NameSound(rightInstance));
            }

            /// <summary>
            /// Finds entities inside a sphere with the given radius. If the alternative syntax is used, only entities of given types or subtypes are listed. Entities returned are not sorted by distance. This command doesn't return dead entities or entities inside vehicles. If you need to return those, use entities command.This command is much  faster than nearestObjects for on-foot soldier and vehicle detection.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value NearEntities(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.NearEntities(leftInstance, rightInstance));
            }

            /// <summary>
            /// Finds the nearest building to a given object or position. A "building" is defined as an object that is of class "House" and contains a path LOD.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value object</returns>
            public static Value NearestBuilding(Value rightInstance)
            {
                return new Value(GameValueMethods.NearestBuilding(rightInstance));
            }

            /// <summary>
            /// Return the closest location of specified class to a given position. Checked range is unlimited (i.e. covers the whole map).
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value location</returns>
            public static Value NearestLocation(Value rightInstance)
            {
                return new Value(GameValueMethods.NearestLocation(rightInstance));
            }

            /// <summary>
            /// Returns an array of locations of chosen type(s) within the given radius of the given position, sorted from nearest to farthest. Although locations can be placed in 3D with setPosition, nearestLocations search result is sorted in 2D.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value NearestLocations(Value rightInstance)
            {
                return new Value(GameValueMethods.NearestLocations(rightInstance));
            }

            /// <summary>
            /// Find the nearest location having a non-empty speech. No locations are dubbed in Arma 3.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value location</returns>
            public static Value NearestLocationWithDubbing(Value rightInstance)
            {
                return new Value(GameValueMethods.NearestLocationWithDubbing(rightInstance));
            }

            /// <summary>
            /// Returns a list of nearest mines of the given types to the given position or object, within the specified distance. If more than one mine are found they will be ordered by proximity by default, the closest one will be first in the array. The sorting can be turned off.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value NearestMines(Value rightInstance)
            {
                return new Value(GameValueMethods.NearestMines(rightInstance));
            }

            /// <summary>
            /// Returns the nearest object of given type (or inherited classes) to given position within a sphere. Hardcoded radius is 50 meters. Unlike with nearestObjects, where distance is measured in 2D space, nearestObject will be closest object in 3D space. in Operation Flashpoint, only objects of the exact provided class are found. if an object ID is used (Syntax 4, see Example 2) the search range is unlimited
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value object</returns>
            public static Value NearestObject(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.NearestObject(leftInstance, rightInstance));
            }

            /// <summary>
            /// Returns a list of nearest objects of the given types to the given position or object, within the specified distance. If more than one object is found they will be ordered by proximity, the closest one will be first in the array. If an object is given as the center and the filter criteria applies to it, it will be the first result in the list. Alternatively, you can use nearObjects command, which doesn't sort results. A list of ClassName types (e.g Tank) can be found in CfgVehicles. ⚠This command matches objects using isKindOf comparison instead of direct class name == comparison. As a result, if a class type is a parent, the search will return all objects that inherit from the parent as well as parent itself. This command also only finds objects that are entities. If you are looking for non-entity objects, see nearObjects, nearestObject. ⚠Because of map object streaming, using nearestObjects or similar object finding commands over long distance from player camera may not find what you are looking for, as some objects might not exist at the time of command execution. Use nearestTerrainObjects instead.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value NearestObjects(Value rightInstance)
            {
                return new Value(GameValueMethods.NearestObjects(rightInstance));
            }

            /// <summary>
            /// Returns a list of nearest terrain objects of the given types to the given position or object, within the specified distance. If more than one object is found they will be ordered according to 3D distance to the object (i.e. the closest one will be first in the array).  In contrast to nearestObjects this command returns terrain placed objects like trees, rocks and buildings which don't necessarily need an associated config class. Possible type names: "BUILDING" "BUNKER" "BUSH" "BUSSTOP" "CHAPEL" "CHURCH" "CROSS" "FENCE" "FOREST BORDER" "FOREST SQUARE" "FOREST TRIANGLE" "FOREST" "FORTRESS" "FOUNTAIN" "FUELSTATION" "HIDE" "HOSPITAL" "HOUSE" "LIGHTHOUSE" "MAIN ROAD" "POWER LINES" "POWERSOLAR" "POWERWAVE" "POWERWIND" "QUAY" "RAILWAY" "ROAD" "ROCK" "ROCKS" "RUIN" "SHIPWRECK" "SMALL TREE" "STACK" "TOURISM" "TRACK" "TRAIL" "TRANSMITTER" "TREE" "VIEW-TOWER" "WALL" "WATERTOWER" ⚠The names are / The filter is based on the named property map - not on the named property class or any config definition! Terrain object counts Types which are missing are not present in the given world. Virtual Reality has no terrain objects. Last updated 1.99 Stratis BUSH: 47974 CHAPEL: 2 CROSS: 1 FENCE: 1728 FUELSTATION: 3 HIDE: 70975 HOUSE: 684 LIGHTHOUSE: 3 ROAD: 143 ROCK: 820 SHIPWRECK: 11 TRACK: 2063 TRANSMITTER: 11 TREE: 40110 WALL: 1355 WATERTOWER: 1 Altis BUSH: 747193 CHAPEL: 165 CHURCH: 54 CROSS: 48 FENCE: 47940 FUELSTATION: 32 HIDE: 655958 HOSPITAL: 1 HOUSE: 17472 LIGHTHOUSE: 7 MAIN ROAD: 2061 POWER LINES: 2224 POWERSOLAR: 10 POWERWAVE: 51 POWERWIND: 128 ROAD: 4849 ROCK: 5483 RUIN: 3 SHIPWRECK: 43 TOURISM: 1 TRACK: 26823 TRANSMITTER: 23 TREE: 263630 WALL: 38943 WATERTOWER: 10 Malden 2035 BUSH: 288461 BUSSTOP: 45 CHAPEL: 14 CHURCH: 14 CROSS: 16 FENCE: 11189 FUELSTATION: 24 HIDE: 192553 HOUSE: 4062 LIGHTHOUSE: 15 MAIN ROAD: 1050 POWER LINES: 3427 POWERSOLAR: 1 ROAD: 1442 ROCK: 3513 SHIPWRECK: 23 TRACK: 3489 TRANSMITTER: 7 TREE: 101960 WALL: 14189 WATERTOWER: 63 Tanoa BUSH: 754347 CHURCH: 21 FENCE: 2912 FUELSTATION: 85 HIDE: 356904 HOUSE: 13389 MAIN ROAD: 2921 POWER LINES: 3985 POWERSOLAR: 2 POWERWIND: 19 RAILWAY: 2138 ROAD: 1485 ROCK: 8909 SHIPWRECK: 58 TOURISM: 35 TRACK: 9419 TRAIL: 6936 TRANSMITTER: 16 TREE: 506993 WALL: 20526 WATERTOWER: 73 Livonia BUILDING: 1262 BUNKER: 40 BUSH: 473543 BUSSTOP: 73 CHAPEL: 8 CHURCH: 17 FENCE: 48426 FOUNTAIN: 36 FUELSTATION: 7 HIDE: 474123 HOUSE: 6762 MAIN ROAD: 2118 POWER LINES: 2671 POWERSOLAR: 2 POWERWIND: 1 RAILWAY: 843 ROAD: 5378 ROCK: 744 SHIPWRECK: 4 STACK: 11 TRACK: 12834 TRANSMITTER: 15 TREE: 1881630 VIEW-TOWER: 239 WALL: 4418 WATERTOWER: 7 Weferlingen BUILDING: 5072 BUSH: 731315 BUSSTOP: 106 CHAPEL: 13 CHURCH: 21 FENCE: 83908 FUELSTATION: 9 HIDE: 231818 HOUSE: 4562 MAIN ROAD: 1535 POWER LINES: 1958 RAILWAY: 2324 ROAD: 8740 STACK: 18 TRACK: 24372 TRANSMITTER: 1 TREE: 829449 VIEW-TOWER: 34 Weferlingen (Winter) BUILDING: 5072 BUSH: 519827 BUSSTOP: 106 CHAPEL: 13 CHURCH: 21 FENCE: 83908 FUELSTATION: 9 HIDE: 229792 HOUSE: 4562 MAIN ROAD: 1535 POWER LINES: 1958 RAILWAY: 2324 ROAD: 8740 STACK: 18 TRACK: 24372 TRANSMITTER: 1 TREE: 829449 VIEW-TOWER: 34 Extraction script can be found on the Biki Export Scripts page.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value NearestTerrainObjects(Value rightInstance)
            {
                return new Value(GameValueMethods.NearestTerrainObjects(rightInstance));
            }

            /// <summary>
            /// Find objects (Units, Vehicles, Dead, Map Objects) in a sphere with given radius. The first object in the returned array is not necessarily the closest one. If you need returned objects to be sorted by distance, use nearestObjects. If typeName is given, only objects of given type (or its subtype) are listed.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value NearObjects(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.NearObjects(leftInstance, rightInstance));
            }

            /// <summary>
            /// Check whether all data are loaded to nearObjects will return in reasonable time.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value bool</returns>
            public static Value NearObjectsReady(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.NearObjectsReady(leftInstance, rightInstance));
            }

            /// <summary>
            /// Find the road segments within the circle of given radius.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value NearRoads(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.NearRoads(leftInstance, rightInstance));
            }

            /// <summary>
            /// Find supplies (weapon holders, ammo crates, fuel feeds, other units) in the sphere with given radius.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value NearSupplies(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.NearSupplies(leftInstance, rightInstance));
            }

            /// <summary>
            /// Returns a list of targets within the defined range. "Targets" are not restricted to enemy units.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value NearTargets(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.NearTargets(leftInstance, rightInstance));
            }

            /// <summary>
            /// Returns how much vehicle wants to reload its weapons.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value scalar</returns>
            public static Value NeedReload(Value rightInstance)
            {
                return new Value(GameValueMethods.NeedReload(rightInstance));
            }

            /// <summary>
            /// Returns array with how much vehicle needs repairing, refueling and rearming.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value NeedService(Value rightInstance)
            {
                return new Value(GameValueMethods.NeedService(rightInstance));
            }

            /// <summary>
            /// Unique ID of object or group.  As this command is MP only, you can use BIS_fnc_netId, which extends the use to SP as well. See also: BIS_fnc_objectVar
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value string</returns>
            public static Value NetId(Value rightInstance)
            {
                return new Value(GameValueMethods.NetId(rightInstance));
            }

            /// <summary>
            /// 
            /// </summary>
            /// <returns>Value netobject</returns>
            public static Value NetObjNull()
            {
                return new Value(GameValueMethods.NetObjNull());
            }

            /// <summary>
            /// Creates the new overlay dialog for the specified type of overlay.  Some Old Editor Command
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value NewOverlay(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.NewOverlay(leftInstance, rightInstance));
            }

            /// <summary>
            /// Returns the next available menu item index. Some Old Editor Command
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value scalar</returns>
            public static Value NextMenuItemIndex(Value rightInstance)
            {
                return new Value(GameValueMethods.NextMenuItemIndex(rightInstance));
            }

            /// <summary>
            /// Return the remaining time (in seconds) over which the current weather change will occur. When a weather change finishes, the game engine will automatically generate a new random weather change over a realistic time period (minimum of 90 minutes).
            /// </summary>
            /// <returns>Value scalar</returns>
            public static Value NextWeatherChange()
            {
                return new Value(GameValueMethods.NextWeatherChange());
            }

            /// <summary>
            /// Nil value. This value can be used to undefine existing variables.
            /// </summary>
            /// <returns>Value any</returns>
            public static Value Nil()
            {
                return new Value(GameValueMethods.Nil());
            }

            /// <summary>
            /// Returns the total number of user-added menu items belonging to the given menu. Some Old Editor Command
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value scalar</returns>
            public static Value NMenuItems(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.NMenuItems(leftInstance, rightInstance));
            }

            /// <summary>
            /// not a is exactly the same as ! a.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value bool</returns>
            public static Value Not(Value rightInstance)
            {
                return new Value(GameValueMethods.Not(rightInstance));
            }

            /// <summary>
            /// Returns the number of engines a helicopter has. For this command to have any effect, the Advanced Flight Model (AFM) has to be enabled. AFM status can be checked with difficultyEnabledRTD.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value scalar</returns>
            public static Value NumberOfEnginesRTD(Value rightInstance)
            {
                return new Value(GameValueMethods.NumberOfEnginesRTD(rightInstance));
            }

            /// <summary>
            /// Convert float number to a date.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value NumberToDate(Value rightInstance)
            {
                return new Value(GameValueMethods.NumberToDate(rightInstance));
            }

            /// <summary>
            /// Returns array with all curators which can edit given object.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value ObjectCurators(Value rightInstance)
            {
                return new Value(GameValueMethods.ObjectCurators(rightInstance));
            }

            /// <summary>
            /// Get object with given unique ID. If object is a group use groupFromNetId. As this command is MP only, you can use BIS_fnc_objectFromNetId, which extends the use to SP as well.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value object</returns>
            public static Value ObjectFromNetId(Value rightInstance)
            {
                return new Value(GameValueMethods.ObjectFromNetId(rightInstance));
            }

            /// <summary>
            /// Returns the parent of an object if said object is a proxy. ⚠Use objectParent instead of vehicle to get a soldier's vehicle. Apart from being faster it is also more reliable, as when used on dead crew, vehicle command may surprisingly return the unit itself. To delete a unit which is in a vehicle, execute: objectParent _unit deleteVehicleCrew _unit;
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value object</returns>
            public static Value ObjectParent(Value rightInstance)
            {
                return new Value(GameValueMethods.ObjectParent(rightInstance));
            }

            /// <summary>
            /// A non-existent Object. To compare non-existent objects use isNull or isEqualTo: objNull == objNull;			// false isNull objNull;				// true objNull isEqualTo objNull;	// true
            /// </summary>
            /// <returns>Value object</returns>
            public static Value ObjNull()
            {
                return new Value(GameValueMethods.ObjNull());
            }

            /// <summary>
            /// Sets the status of an objective that was defined in briefing.html. Status may be one of: "ACTIVE" "FAILED" "DONE" "HIDDEN" To refer to an objective that is named "OBJ_1", for example, use only the index number in this command (i.e. "1" objStatus "HIDDEN").
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value ObjStatus(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.ObjStatus(leftInstance, rightInstance));
            }

            /// <summary>
            /// Select a sound declared in the Description.ext of the mission to be played the first time the Group tab is selected in the briefing.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value OnBriefingGroup(Value rightInstance)
            {
                return new Value(GameValueMethods.OnBriefingGroup(rightInstance));
            }

            /// <summary>
            /// Select a sound declared in the Description.ext of the mission to be played the first time the Notes tab is selected in the briefing.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value OnBriefingNotes(Value rightInstance)
            {
                return new Value(GameValueMethods.OnBriefingNotes(rightInstance));
            }

            /// <summary>
            /// Select a sound declared in the Description.ext of the mission to be played the first time the Plan tab is selected in the briefing.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value OnBriefingPlan(Value rightInstance)
            {
                return new Value(GameValueMethods.OnBriefingPlan(rightInstance));
            }

            /// <summary>
            /// Select a sound defined in the CfgSounds of the mission to be played the first time the TeamSwitch tab is selected in the briefing.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value OnBriefingTeamSwitch(Value rightInstance)
            {
                return new Value(GameValueMethods.OnBriefingTeamSwitch(rightInstance));
            }

            /// <summary>
            /// Defines code performed when hc command mode changes either because of (Left Ctrl + Space) shortcut or hcShowBar scripting command. Groups hc mode must contain at least one group for this command to work (see High Command). Attached code receives _isHighCommand boolean.  Since Arma 3 v1.57 a stackable version of this EH is available: CommandModeChanged
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value OnCommandModeChanged(Value rightInstance)
            {
                return new Value(GameValueMethods.OnCommandModeChanged(rightInstance));
            }

            /// <summary>
            /// Defines an action performed when the user double clicks on the map. Command receives:,_pos array position,_units array selected units,_shift,_alt bool key state Some Old Editor Command
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value any</returns>
            public static Value OnDoubleClick(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.OnDoubleClick(leftInstance, rightInstance));
            }

            /// <summary>
            /// Runs given statement every frame in an unscheduled environment. In order to keep compatibility between official and community content: Since Arma 3 v1.57 a stackable version of this EH is available: EachFrame Mission Event Handler Before that, the scripted version of the event handler should be used instead (using BIS_fnc_addStackedEventHandler and BIS_fnc_removeStackedEventHandler).
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value OnEachFrame(Value rightInstance)
            {
                return new Value(GameValueMethods.OnEachFrame(rightInstance));
            }

            /// <summary>
            /// Defines an action performed when player clicked on group marker (3D or in a map). The code executed once. This EH, unlike onGroupIconOverEnter and onGroupIconOverLeave, has one more param which returns 1 if RMB was pressed, 0 otherwise. Since Arma 3 v1.58 a Mission Event Handler exists and should be used.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value OnGroupIconClick(Value rightInstance)
            {
                return new Value(GameValueMethods.OnGroupIconClick(rightInstance));
            }

            /// <summary>
            /// Defines an action performed when player moves pointer over group marker (3D or in a map). The code will execute continuously while pointer is over icon. Since Arma 3 v1.58 a Mission Event Handler exists and should be used.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value OnGroupIconOverEnter(Value rightInstance)
            {
                return new Value(GameValueMethods.OnGroupIconOverEnter(rightInstance));
            }

            /// <summary>
            /// Defines an action performed when pointer, previously positioned over icon, is moved away from it (3D or in a map). The code is executed once. Since Arma 3 v1.58 a Mission Event Handler exists and should be used.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value OnGroupIconOverLeave(Value rightInstance)
            {
                return new Value(GameValueMethods.OnGroupIconOverLeave(rightInstance));
            }

            /// <summary>
            /// Defines an action performed when high command group selection has been changed. Command receives 2 variables: _group: Group - last selected/deselected group _isSelected: Boolean - new selection state of the specific group The code is executed on every hc group selection change until it is replaced or removed (see Example 3). ⚠Using the command again will overwrite the previously set code. Since Arma 3 v1.58 a stackable version of this EH is available: HCGroupSelectionChanged
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value OnHCGroupSelectionChanged(Value rightInstance)
            {
                return new Value(GameValueMethods.OnHCGroupSelectionChanged(rightInstance));
            }

            /// <summary>
            /// Defines the action performed when user clicks in map by executing command string. The code is executed on every click, until the command is  removed via onMapSingleClick "", or replaced by onMapSingleClick "SomeOtherCommand(s)" In Arma 3 the code should return true only if you wish to override default engine handling of the mouse click on map (see Example 4). For older games, when click is processed, code should ultimately return true back to the engine. If false is returned, default processing by the game engine is done. Return value of any other type (including Nothing) is an error. In such case default processing by the game engine is done, and error message may be displayed. Since 1.58 the stackable MapSingleClick Mission Event Handler is available and should be used instead.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value OnMapSingleClick(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.OnMapSingleClick(leftInstance, rightInstance));
            }

            /// <summary>
            /// This command will execute the provided code on the server whenever a player connects to a multiplayer session. Since Arma 3 v1.57 a stackable MissionEventHandler is available and should be used: PlayerConnected.Before that, the functions BIS_fnc_addStackedEventHandler and BIS_fnc_removeStackedEventHandler should be used instead in order to keep compatibility between official and community content.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value OnPlayerConnected(Value rightInstance)
            {
                return new Value(GameValueMethods.OnPlayerConnected(rightInstance));
            }

            /// <summary>
            /// This command will execute attached code whenever a player is leaving an MP session. The code will receive a number of special variables:
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value OnPlayerDisconnected(Value rightInstance)
            {
                return new Value(GameValueMethods.OnPlayerDisconnected(rightInstance));
            }

            /// <summary>
            /// Defines an action performed after the preload screen finished. Preload event occurs after briefing screen on mission start. ⚠This event handler also fires on client after user closes the main map. Since Arma 3 v1.57 a stackable version of this EH is available: PreloadFinished Before that, the BIS_fnc_addStackedEventHandler and BIS_fnc_removeStackedEventHandler functions should be used instead.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value OnPreloadFinished(Value rightInstance)
            {
                return new Value(GameValueMethods.OnPreloadFinished(rightInstance));
            }

            /// <summary>
            /// Defines an action performed just before the preload screen started. Preload event occurs after briefing screen on mission start.⚠This event handler also fires on client after user closes the main map. Since Arma 3 v1.57 a stackable version of this EH is available: PreloadStarted In order to keep compatibility between official and community content the functions BIS_fnc_addStackedEventHandler and BIS_fnc_removeStackedEventHandler should be used instead.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value OnPreloadStarted(Value rightInstance)
            {
                return new Value(GameValueMethods.OnPreloadStarted(rightInstance));
            }

            /// <summary>
            /// Defines an action performed when the user right clicks on the map and,selects New Object. Set to empty for default behavior. Command receives:,_pos array position,  Some Old Editor Command
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value any</returns>
            public static Value OnShowNewObject(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.OnShowNewObject(leftInstance, rightInstance));
            }

            /// <summary>
            /// Defines an action performed when the team switch is finished. Commandset receives the following special variables: _from object previous unit, _to object current unit. Consecutive use of onTeamSwitch command will overwrite previously set commandset.  ⚠This command is deprecated. Since Arma 3 v1.57 a stackable version of this EH is available: TeamSwitch When player switches and leaves behind AI unit, you need to enable "TeamSwitch" AI on it (with onTeamSwitch { _from enableAI "TeamSwitch" };) so that the unit continues with waypoints.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value OnTeamSwitch(Value rightInstance)
            {
                return new Value(GameValueMethods.OnTeamSwitch(rightInstance));
            }

            /// <summary>
            /// Force opens curator interface.
            /// </summary>
            /// <returns>Value nothing</returns>
            public static Value OpenCuratorInterface()
            {
                return new Value(GameValueMethods.OpenCuratorInterface());
            }

            /// <summary>
            /// Opens a Steam page of the app with given appId. Only works for known appId (game + linked DLCs)
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value bool</returns>
            public static Value OpenDLCPage(Value rightInstance)
            {
                return new Value(GameValueMethods.OpenDLCPage(rightInstance));
            }

            /// <summary>
            /// Opens or closes minimap if player has "ItemGPS" linked in inventory and "MinimapDisplayComponent" is not disabled with enableInfoPanelComponent. Returns true on success. If more than one minimap is open (see infoPanels, infoPanel) each call to the command will close only 1 minimap. Visibility of minimap can be checked with visibleGPS command.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value bool</returns>
            public static Value OpenGPS(Value rightInstance)
            {
                return new Value(GameValueMethods.OpenGPS(rightInstance));
            }

            /// <summary>
            /// Opens or closes in-game map.⚠If forced param is set to true and map is set to open, when the map is opened it cannot be closed manually and the user can get stuck requiring the game restart. Make sure you provide scripted mechanics to resolve this, should you need to force the map. Useful when you wish to keep user for example on respawn screen, where they could still interact with the map but cannot enter the game until the time is up Since Arma 3 v2.06.147984 the alternative syntax has the following functionality: openMap [true, false] - opens map normally openMap [false, false] - closes opened map normally openMap [true, true] - force opens map and keeps open (the user cannot close it on their own) New openMap [false, true] - prevents map from opening, closes open map and forces it to stay close (the user cannot open it on their own)
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value bool</returns>
            public static Value OpenMap(Value rightInstance)
            {
                return new Value(GameValueMethods.OpenMap(rightInstance));
            }

            /// <summary>
            /// Opens a Steam application, returns false if it was not possible to run the application.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value bool</returns>
            public static Value OpenSteamApp(Value rightInstance)
            {
                return new Value(GameValueMethods.OpenSteamApp(rightInstance));
            }

            /// <summary>
            /// Opens Steam overlay with given YT video. Video URL is the end part of the YT URL, starting with watch?v=.... If the user has Steam overlay disabled, the command will display appropriate message to the user and return false.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value bool</returns>
            public static Value OpenYoutubeVideo(Value rightInstance)
            {
                return new Value(GameValueMethods.OpenYoutubeVideo(rightInstance));
            }

            /// <summary>
            /// Pre-defined variable for the opfor side.
            /// </summary>
            /// <returns>Value side</returns>
            public static Value Opfor()
            {
                return new Value(GameValueMethods.Opfor());
            }

            /// <summary>
            /// Returns true if one or both conditions are true. In case of the alternative syntax, lazy evaluation is used. That means that if left operand is true, evaluation of the right side is skipped completely.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value bool</returns>
            public static Value Or(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.Or(leftInstance, rightInstance));
            }

            /// <summary>
            /// Force all units in the array to get in or out of their assigned vehicles. Units must be assigned to a vehicle before this command will do anything. See AI Group Vehicle Management for more information.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value OrderGetIn(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.OrderGetIn(leftInstance, rightInstance));
            }

            /// <summary>
            /// Return the current overcast level. Zero is clear skies, one is maximum cloud cover.
            /// </summary>
            /// <returns>Value scalar</returns>
            public static Value Overcast()
            {
                return new Value(GameValueMethods.Overcast());
            }

            /// <summary>
            /// Return the overcast forecast.
            /// </summary>
            /// <returns>Value scalar</returns>
            public static Value OvercastForecast()
            {
                return new Value(GameValueMethods.OvercastForecast());
            }

            /// <summary>
            /// On server machine, returns the  machine network ID of the client to which the object is local. Otherwise returns 0. For use on clients clientOwner command is available. To find out the owner of a Group, use groupOwner.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value scalar</returns>
            public static Value Owner(Value rightInstance)
            {
                return new Value(GameValueMethods.Owner(rightInstance));
            }

            /// <summary>
            /// Extracts a single value with given index from input argument, similar to BIS_fnc_param.  When used without argument, as shown in main syntax, internal variable _this, which is usually available inside functions and event handlers, is used as argument. If input argument is not an array, it will be converted to 1 element array. If extracted item of input with given index is undefined, of the wrong type or of the wrong length (if the item is an array), default value is used instead. Since Arma 3 v1.54, onscreen errors are displayed for when the input is of the wrong type or size.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value any</returns>
            public static Value Param(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.Param(leftInstance, rightInstance));
            }

            /// <summary>
            /// Parses input argument into array of private variables. When used without argument, as shown in main syntax, internal variable _this, which is usually available inside functions and event handlers, is used as argument. In addition to simple parsing directly into variables, input can be tested in case it is undefined, of the wrong type or of the wrong size (if array) and substituted if necessary with default values. Since Arma 3 v1.54, onscreen errors are displayed for when the input is of the wrong type or size. ⚠All variables names must start with underscore and be enclosed in quotes: params ["_myVar1", "_myVar2"]; It is a good practice to make your local variables private (through private or params) in order to avoid overwriting a local variable of the same name.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value bool</returns>
            public static Value Params(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.Params(leftInstance, rightInstance));
            }

            /// <summary>
            /// Parses the string, interpreting its content as a floating point number. ⚠This command does not work with strings representing hexadecimal numbers (e.g "0xCF"). Starting whitespaces are discarded, then as many valid characters are used to be interpreted as a number until an invalid character is found then the rest of the string is ignored.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value scalar</returns>
            public static Value ParseNumber(Value rightInstance)
            {
                return new Value(GameValueMethods.ParseNumber(rightInstance));
            }

            /// <summary>
            /// Converts given, formatted as simple array, String into a valid Array. Simple array is array consisting of Numbers, Strings, Booleans and Arrays of all of the above. This command is almost 4× faster than similar uncached call compile method. And because call compile is not required, it is also more secure and primarily intended for use with callExtension to parse the String output into Array. Since Arma 3 v1.96 the command will tolerate extra spaces and supports single quotes. The only recognised keywords (case insensitive) are: true - translates into true false - translates into false nil - translates into nil null - translates into nil <null> - translates into nil any - translates into nil
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value ParseSimpleArray(Value rightInstance)
            {
                return new Value(GameValueMethods.ParseSimpleArray(rightInstance));
            }

            /// <summary>
            /// Creates a structured text by parsing the given XML description. Do not use parseText when displaying a localized text from Stringtable.xml. A detailed explanation of all formatting possibilities can be found at Structured Text.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value text</returns>
            public static Value ParseText(Value rightInstance)
            {
                return new Value(GameValueMethods.ParseText(rightInstance));
            }

            /// <summary>
            /// Returns the global namespace attached to config parser.
            /// </summary>
            /// <returns>Value namespace</returns>
            public static Value ParsingNamespace()
            {
                return new Value(GameValueMethods.ParsingNamespace());
            }

            /// <summary>
            /// Returns current user settings for particles quality (configure->video->general->particles). 0-low, 1-normal, 2-high
            /// </summary>
            /// <returns>Value scalar</returns>
            public static Value ParticlesQuality()
            {
                return new Value(GameValueMethods.ParticlesQuality());
            }

            /// <summary>
            /// Returns current periscope elevation value, see also elevatePeriscope.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value PeriscopeElevation(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.PeriscopeElevation(leftInstance, rightInstance));
            }

            /// <summary>
            /// pi (180 degrees converted to Radians).
            /// </summary>
            /// <returns>Value scalar</returns>
            public static Value Pi()
            {
                return new Value(GameValueMethods.Pi());
            }

            /// <summary>
            /// Transfers weapons and magazines from cargo of object into the weapon pool. This is used in the campaign to transfer weapons into the next mission.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value PickWeaponPool(Value rightInstance)
            {
                return new Value(GameValueMethods.PickWeaponPool(rightInstance));
            }

            /// <summary>
            /// Returns the pitch of a persons voice.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value string</returns>
            public static Value Pitch(Value rightInstance)
            {
                return new Value(GameValueMethods.Pitch(rightInstance));
            }

            /// <summary>
            /// Returns grid size based on screen resolution, UI size and configs: uiScaleFactor, uiScaleMaxGrids.
            /// </summary>
            /// <returns>Value scalar</returns>
            public static Value PixelGrid()
            {
                return new Value(GameValueMethods.PixelGrid());
            }

            /// <summary>
            /// Returns grid size based on screen resolution.
            /// </summary>
            /// <returns>Value scalar</returns>
            public static Value PixelGridBase()
            {
                return new Value(GameValueMethods.PixelGridBase());
            }

            /// <summary>
            /// Returns grid size based on screen resolution and configs: uiScaleFactor, uiScaleMaxGrids. As mentioned in the name of this command, the user interface scale is ignored.
            /// </summary>
            /// <returns>Value scalar</returns>
            public static Value PixelGridNoUIScale()
            {
                return new Value(GameValueMethods.PixelGridNoUIScale());
            }

            /// <summary>
            /// Returns the height of one pixel for current resolution.
            /// </summary>
            /// <returns>Value scalar</returns>
            public static Value PixelH()
            {
                return new Value(GameValueMethods.PixelH());
            }

            /// <summary>
            /// Returns width of one pixel for current resolution.
            /// </summary>
            /// <returns>Value scalar</returns>
            public static Value PixelW()
            {
                return new Value(GameValueMethods.PixelW());
            }

            /// <summary>
            /// Returns the number of available slots in mission per side (both empty and taken). In singleplayer mission, it returns number of playable units per side.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value scalar</returns>
            public static Value PlayableSlotsNumber(Value rightInstance)
            {
                return new Value(GameValueMethods.PlayableSlotsNumber(rightInstance));
            }

            /// <summary>
            /// Returns a list of playable units in a multiplayer game (occupied by both AI or players), created on the following sides east/opfor, west/blufor, resistance/independent and civilian only. Does not contain units of sideLogic. This command returns an empty array in Singleplayer; use switchableUnits instead. ⚠This command does not include dead players awaiting for respawn.
            /// </summary>
            /// <returns>Value array</returns>
            public static Value PlayableUnits()
            {
                return new Value(GameValueMethods.PlayableUnits());
            }

            /// <summary>
            /// When used on a person, a smooth transition to the given action will be initiated. For Arma 3 actions see: playAction/actions.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value PlayAction(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.PlayAction(leftInstance, rightInstance));
            }

            /// <summary>
            /// When used on a person, a smooth transition to the given action will be initiated, but all previous playAction are discarded. For Arma 3 actions see: playAction/actions.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value PlayActionNow(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.PlayActionNow(leftInstance, rightInstance));
            }

            /// <summary>
            /// A person object controlled by user. In Intros and Outros this isn't set by default and must be assigned.
            /// </summary>
            /// <returns>Value object</returns>
            public static Value Player()
            {
                return new Value(GameValueMethods.Player());
            }

            /// <summary>
            /// Return the player's remaining time before respawn, or -1 if it is not available (such as when the player is alive).
            /// </summary>
            /// <returns>Value scalar</returns>
            public static Value PlayerRespawnTime()
            {
                return new Value(GameValueMethods.PlayerRespawnTime());
            }

            /// <summary>
            /// Returns the player's side. This is valid even when the player controlled person is dead (a difference from side player). playerSide will not change automatically if player joins a group on different side. However, selectPlayer command can and does change playerSide - see Example 3 for information.
            /// </summary>
            /// <returns>Value side</returns>
            public static Value PlayerSide()
            {
                return new Value(GameValueMethods.PlayerSide());
            }

            /// <summary>
            /// Returns count of occupied role selection slots for given side. Players who claimed a slot in the lobby but did not start the mission are counted as well. If disabledAI = 0; in description.ext or Enable AI option is checked in Eden Editor, AI bots will be treated as valid players and will be counted too.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value scalar</returns>
            public static Value PlayersNumber(Value rightInstance)
            {
                return new Value(GameValueMethods.PlayersNumber(rightInstance));
            }

            /// <summary>
            /// When used on a person,a smooth transition to the given move will be initiated. Command doesn't seem to be functional
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value PlayGesture(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.PlayGesture(leftInstance, rightInstance));
            }

            /// <summary>
            /// The mission is launched (from the main menu). Both campaign and mission are given as their directory name. If the campaign is empty, a single mission is launched. If skipBriefing is true, the intro and briefing are skipped.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value PlayMission(Value rightInstance)
            {
                return new Value(GameValueMethods.PlayMission(rightInstance));
            }

            /// <summary>
            /// When used on a person, smooth transition to given move will be done. The difference between playMove and playMoveNow is that playMove adds another move to the move queue, while playMoveNow replaces the whole move queue with new move (see Example 2). see Moves for respective games animations.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value PlayMove(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.PlayMove(leftInstance, rightInstance));
            }

            /// <summary>
            /// When used on a person,a smooth transition to the given move will be initiated, but all previous playMove are discarded.  The difference between playMove and playMoveNow is that playMove adds another move to the move queue, while playMoveNow replaces the whole move queue with new move (see Example 2). see Moves for respective games animations.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value PlayMoveNow(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.PlayMoveNow(leftInstance, rightInstance));
            }

            /// <summary>
            /// Plays music defined in Description.ext's CfgMusic or config.cpp. If the musicName could not be found a message is logged into the .rpt file: Music <musicName> not found. Arma 3 CfgMusic Arma 2: CfgMusic ArmA: Armed Assault: CfgMusic Operation Flashpoint: CfgMusic To stop the music, use playMusic "";.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value PlayMusic(Value rightInstance)
            {
                return new Value(GameValueMethods.PlayMusic(rightInstance));
            }

            /// <summary>
            /// Load the given world, launch an empty mission, and execute the given expression. If provided, config can reference to the config entry, replacing Description.ext for this mission.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value PlayScriptedMission(Value rightInstance)
            {
                return new Value(GameValueMethods.PlayScriptedMission(rightInstance));
            }

            /// <summary>
            /// Plays a sound from CfgSounds. Sound can be defined in missionConfigFile, configFile or campaignConfigFile.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value object</returns>
            public static Value PlaySound(Value rightInstance)
            {
                return new Value(GameValueMethods.PlaySound(rightInstance));
            }

            /// <summary>
            /// Plays positional sound with given filename on every computer on network. Since Arma 2.10 the leading slash in file path will be ignored.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value PlaySound3D(Value rightInstance)
            {
                return new Value(GameValueMethods.PlaySound3D(rightInstance));
            }

            /// <summary>
            /// Plays given CfgSounds sound or a  sound file given by file path through a dedicated UI sound channel unaffected by the global mixer volumes. If the file path is given, the leading slash will be ignored.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value PlaySoundUI(Value rightInstance)
            {
                return new Value(GameValueMethods.PlaySoundUI(rightInstance));
            }

            /// <summary>
            /// Returns the pose of the given unit.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value string</returns>
            public static Value Pose(Value rightInstance)
            {
                return new Value(GameValueMethods.Pose(rightInstance));
            }

            /// <summary>
            /// Returns position of an object (alias of getPos) or location (alias of locationPosition). ⚠Do not use this command to get an object's position in 3D. See getPos for an explanation and alternatives.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value Position(Value rightInstance)
            {
                return new Value(GameValueMethods.Position(rightInstance));
            }

            /// <summary>
            /// Transforms position from camera coordinate space to world coordinate space.  Camera axes are relative to camera orientation. x axis goes from left of the camera to right of the camera, z axis goes from underneath the camera to above the camera and y axis goes from back of the camera to where the camera is looking.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value PositionCameraToWorld(Value rightInstance)
            {
                return new Value(GameValueMethods.PositionCameraToWorld(rightInstance));
            }

            /// <summary>
            /// Converts map screen coordinates into world coordinates. Unlike ctrlMapScreenToWorld, this command returns world position is format [x, y, 0], otherwise it is identical to it.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value PosScreenToWorld(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.PosScreenToWorld(leftInstance, rightInstance));
            }

            /// <summary>
            /// Converts world coordinates into map screen coordinates. This command is identical to ctrlMapWorldToScreen.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value PosWorldToScreen(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.PosWorldToScreen(leftInstance, rightInstance));
            }

            /// <summary>
            /// Set post process effect parameters. The two syntaxes differ in what format of the params they accept. The syntax with PP name expects colors to be packed into arrays within main array, while the syntax with PP handle can handle both flat and packed array. Therefore it is recommended to use the universal packed format, such as shown in the examples.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value PpEffectAdjust(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.PpEffectAdjust(leftInstance, rightInstance));
            }

            /// <summary>
            /// Commit post process effect in given time.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value PpEffectCommit(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.PpEffectCommit(leftInstance, rightInstance));
            }

            /// <summary>
            /// Check whether given post process effect is committed.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value bool</returns>
            public static Value PpEffectCommitted(Value rightInstance)
            {
                return new Value(GameValueMethods.PpEffectCommitted(rightInstance));
            }

            /// <summary>
            /// Creates Post Process Effects specified by effect name and priority. Supported effects: "RadialBlur" "ChromAberration" "WetDistortion" "ColorCorrections" "DynamicBlur" "FilmGrain" "ColorInversion"
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value scalar_array</returns>
            public static Value PpEffectCreate(Value rightInstance)
            {
                return new Value(GameValueMethods.PpEffectCreate(rightInstance));
            }

            /// <summary>
            /// Destroy Post Process Effects given by handle or array of handles.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value PpEffectDestroy(Value rightInstance)
            {
                return new Value(GameValueMethods.PpEffectDestroy(rightInstance));
            }

            /// <summary>
            /// Enable / disable Post Process Effects ⚠If effect fails to get enabled (can check it with ppEffectEnabled) try adding a little sleep in front of it.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value PpEffectEnable(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.PpEffectEnable(leftInstance, rightInstance));
            }

            /// <summary>
            /// Checks whether given post process effect is enabled
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value bool</returns>
            public static Value PpEffectEnabled(Value rightInstance)
            {
                return new Value(GameValueMethods.PpEffectEnabled(rightInstance));
            }

            /// <summary>
            /// Forces use of Post Process Effects in NVG.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value PpEffectForceInNVG(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.PpEffectForceInNVG(leftInstance, rightInstance));
            }

            /// <summary>
            /// Return the movement precision of the given entity, how is the entity able to be precise when moving to given target. See CfgVehicles Config Reference - precision.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value scalar</returns>
            public static Value Precision(Value rightInstance)
            {
                return new Value(GameValueMethods.Precision(rightInstance));
            }

            /// <summary>
            /// Preload all textures and models around given Position to avoid visual artifacts after camera is moved. Should be used before any abrupt camera change/cut. Returns true once all data is ready. See camPreload for alternative, more flexible camera preloading.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value bool</returns>
            public static Value PreloadCamera(Value rightInstance)
            {
                return new Value(GameValueMethods.PreloadCamera(rightInstance));
            }

            /// <summary>
            /// Preloads all textures, materials and proxies needed to render given object. Works with objects and classnames - note that classnames require an object instance in the mission.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value bool</returns>
            public static Value PreloadObject(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.PreloadObject(leftInstance, rightInstance));
            }

            /// <summary>
            /// Makes sure that a sound can start playing without any delay once it is needed. Command works in Arma 3, but might not be implemented in earlier Arma installments.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value bool</returns>
            public static Value PreloadSound(Value rightInstance)
            {
                return new Value(GameValueMethods.PreloadSound(rightInstance));
            }

            /// <summary>
            /// Preloads data for the given resource object.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value bool</returns>
            public static Value PreloadTitleObj(Value rightInstance)
            {
                return new Value(GameValueMethods.PreloadTitleObj(rightInstance));
            }

            /// <summary>
            /// Resource title - preload data. The resource can be defined in the Description.ext file.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value bool</returns>
            public static Value PreloadTitleRsc(Value rightInstance)
            {
                return new Value(GameValueMethods.PreloadTitleRsc(rightInstance));
            }

            /// <summary>
            /// Reads and processes the content of the specified file. Preprocessor is C-like, supports comments using // or /* and */ and PreProcessor Commands. Due to the hard-drive access this command executes and the lack of caching this command should not be used in time-critical script loops. ⚠If the file you are loading is not prepared using UTF-8 encoding and contains some characters  with codes > 127, they might convert incorrectly.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value string</returns>
            public static Value PreprocessFile(Value rightInstance)
            {
                return new Value(GameValueMethods.PreprocessFile(rightInstance));
            }

            /// <summary>
            /// Returns the preprocessed content of the given file. The preprocessor is C-like, it supports comments using /* */ and PreProcessor Commands. The preprocessor also adds a default debug entrypoint for compiler at the begining of script: #line 1 "aFilename" The #line keyword can be used in any script that are not preprocess, or with preprocess script with extra macro to protect reserverd sharp character. The format is: #line <number> "<name>" followed by new line. <number> could be only positive integer and <name> could be any name. This will be used only if an error occurs in the script. The error will contain the line: File <filename>, line <linenumber> where <filename> will be the <name> you set and <linenumber> will be <number> + how many lines it is from the #line line. If the error happened on the line right under #line it will add 0 to <number>, if on second line, it will add 1 etc. It is possible to use more than one #line keywords, but it seems having just one at the top for little script is enough to pinpoint position of the error easily.  ⚠If the file you are loading is not prepared using UTF-8 encoding and contains some characters  with codes > 127, they might convert incorrectly
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value string</returns>
            public static Value PreprocessFileLineNumbers(Value rightInstance)
            {
                return new Value(GameValueMethods.PreprocessFileLineNumbers(rightInstance));
            }

            /// <summary>
            /// Returns name of unit's primary weapon. This command will also return a weapon class name if the weapon is not used by the player, for example, it is on the unit's back. Use currentWeapon to get the weapon the unit is using.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value string</returns>
            public static Value PrimaryWeapon(Value rightInstance)
            {
                return new Value(GameValueMethods.PrimaryWeapon(rightInstance));
            }

            /// <summary>
            /// Returns array with all items assigned to the primaryWeapon except magazines. Use primaryWeaponMagazine command for the latter. This command is used for infantry weapons only.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value PrimaryWeaponItems(Value rightInstance)
            {
                return new Value(GameValueMethods.PrimaryWeaponItems(rightInstance));
            }

            /// <summary>
            /// Collects all loaded magazines from all primaryWeapon muzzles and returns them in Array, otherwise it returns []. This command is used for infantry weapons only.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value PrimaryWeaponMagazine(Value rightInstance)
            {
                return new Value(GameValueMethods.PrimaryWeaponMagazine(rightInstance));
            }

            /// <summary>
            /// Return the priority of the task.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value scalar</returns>
            public static Value Priority(Value rightInstance)
            {
                return new Value(GameValueMethods.Priority(rightInstance));
            }

            /// <summary>
            /// Sets a variable to the innermost scope as demonstrated in Example 3. See also param and params. private variables must start with an underscore: private _myVar1 = "myVar"; - see Identifier. ⚠Always make your local variables private (through private or params) in order to avoid overwriting a local variable of the same name.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value Private(Value rightInstance)
            {
                return new Value(GameValueMethods.Private(rightInstance));
            }

            /// <summary>
            /// Opens the Diary screen on the subject/record specified by link. To get a valid link format, use createDiaryLink.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value ProcessDiaryLink(Value rightInstance)
            {
                return new Value(GameValueMethods.ProcessDiaryLink(rightInstance));
            }

            /// <summary>
            /// Returns the product's friendly name, identifier, version and build number. The command has been upgraded to also returns branch identifier, whether or not the game was launched using mods, the platform and the architecture.
            /// </summary>
            /// <returns>Value array</returns>
            public static Value ProductVersion()
            {
                return new Value(GameValueMethods.ProductVersion());
            }

            /// <summary>
            /// Returns currently chosen user profile name. For Steam profile name see profileNameSteam.
            /// </summary>
            /// <returns>Value string</returns>
            public static Value ProfileName()
            {
                return new Value(GameValueMethods.ProfileName());
            }

            /// <summary>
            /// Returns the global namespace attached to the active user profile. Use setVariable and getVariable to save and load data to and from this Namespace. A variable can be deleted by setting its value to nil. By default the variables set in this namespace will exist while the game is running, and variables are saved persistently when the game is closed. Saving can also be forced by using saveProfileNamespace to prevent data loss on e.g game crash. The variables are stored next to the user profile in a file named myUsername.vars.GAMENAME.
            /// </summary>
            /// <returns>Value namespace</returns>
            public static Value ProfileNamespace()
            {
                return new Value(GameValueMethods.ProfileNamespace());
            }

            /// <summary>
            /// Returns name of the current Steam profile. For currently chosen user profile name see profileName
            /// </summary>
            /// <returns>Value string</returns>
            public static Value ProfileNameSteam()
            {
                return new Value(GameValueMethods.ProfileNameSteam());
            }

            /// <summary>
            /// If loading screen is shown, sets progress bar to the given value (interval is from 0 to 1])
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value ProgressLoadingScreen(Value rightInstance)
            {
                return new Value(GameValueMethods.ProgressLoadingScreen(rightInstance));
            }

            /// <summary>
            /// Returns the current position in the progress bar.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value scalar</returns>
            public static Value ProgressPosition(Value rightInstance)
            {
                return new Value(GameValueMethods.ProgressPosition(rightInstance));
            }

            /// <summary>
            /// Sets progress position of a progress bar.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value ProgressSetPosition(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.ProgressSetPosition(leftInstance, rightInstance));
            }

            /// <summary>
            /// Reliably broadcasts missionNamespace variable and its current value to all computers (server/client). Variables broadcast with publicVariable during a mission will be available to JIP clients with the value they held at the time. Such variables are persistent and sent to the JIP client before the first batch of client-side Event Scripts (such as init.sqf) is run. ⚠Using publicVariable too frequently and/or with a lot of data can cause other aspects of the game to experience bandwidth problems. The following  Data Types are supported: Type Number Boolean Object Group String Text Array Code Nothing (nil) HashMap Since 1.34 1.34 1.34 1.34 1.00 1.00 1.09 1.09 1.26 2.02 ⚠It is not possible (and illogical) to transfer a local entity reference, such as scripts, displays or local objects. Also, note that Team Member is not supported.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value PublicVariable(Value rightInstance)
            {
                return new Value(GameValueMethods.PublicVariable(rightInstance));
            }

            /// <summary>
            /// Send the variable value to the client computer - same limitations regarding variable type as publicVariable. The Client ID is the temporary ID given to a connected client for that session. You can find out this ID with the owner command (using it on a player's character, for example, will give you that players client ID). In Arma 3 it is possible to broadcast nil value
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value PublicVariableClient(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.PublicVariableClient(leftInstance, rightInstance));
            }

            /// <summary>
            /// Send the variable value to the server - same limitations regarding variable type as publicVariable. In Arma 3 it is possible to broadcast nil value
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value PublicVariableServer(Value rightInstance)
            {
                return new Value(GameValueMethods.PublicVariableServer(rightInstance));
            }

            /// <summary>
            /// Insert an element to the back of the given array. This command modifies the original array. (see also: pushBackUnique)
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value scalar</returns>
            public static Value PushBack(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.PushBack(leftInstance, rightInstance));
            }

            /// <summary>
            /// Adds element to the back of the given array but only if it is unique to the array. The index of the added element is returned upon success, otherwise -1. This command modifies the original array. Adding string elements is case sensitive.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value scalar</returns>
            public static Value PushBackUnique(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.PushBackUnique(leftInstance, rightInstance));
            }

            /// <summary>
            /// Transfers weapons and magazines from weapon pool into cargo of given object. Used in campaign to transfer weapons into next mission.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value PutWeaponPool(Value rightInstance)
            {
                return new Value(GameValueMethods.PutWeaponPool(rightInstance));
            }

            /// <summary>
            /// Returns the number of items of type in the weapon pool (used in campaigns to transfer weapons to the next mission).
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value scalar</returns>
            public static Value QueryItemsPool(Value rightInstance)
            {
                return new Value(GameValueMethods.QueryItemsPool(rightInstance));
            }

            /// <summary>
            /// Return number of magazines of type name in magazine pool (used in campaign to transfer magazines into next mission).
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value scalar</returns>
            public static Value QueryMagazinePool(Value rightInstance)
            {
                return new Value(GameValueMethods.QueryMagazinePool(rightInstance));
            }

            /// <summary>
            /// Return number of weapons of type name in weapon pool (used in campaign to transfer weapons into next mission).
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value scalar</returns>
            public static Value QueryWeaponPool(Value rightInstance)
            {
                return new Value(GameValueMethods.QueryWeaponPool(rightInstance));
            }

            /// <summary>
            /// Converts given value in degrees to radians. 1 radian equals 180 degrees divided by pi.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value scalar_nan</returns>
            public static Value Rad(Value rightInstance)
            {
                return new Value(GameValueMethods.Rad(rightInstance));
            }

            /// <summary>
            /// Add the units to the custom channel.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value RadioChannelAdd(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.RadioChannelAdd(leftInstance, rightInstance));
            }

            /// <summary>
            /// Create a custom radio channel with the given color, label, call sign and registered characters. The custom channel ID returned can be used to manipulate the created channel later. There are 10 slots for custom radio channels which would correspond to channels 6-15 (see getPlayerChannel). The command will find an unused index in this range and create it when found.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value scalar</returns>
            public static Value RadioChannelCreate(Value rightInstance)
            {
                return new Value(GameValueMethods.RadioChannelCreate(rightInstance));
            }

            /// <summary>
            /// Obtains custom radio channel's details, set by radioChannelCreate.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value RadioChannelInfo(Value rightInstance)
            {
                return new Value(GameValueMethods.RadioChannelInfo(rightInstance));
            }

            /// <summary>
            /// Remove the units from the custom radio channel.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value RadioChannelRemove(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.RadioChannelRemove(leftInstance, rightInstance));
            }

            /// <summary>
            /// Set the custom radio channel's call sign.  Available special parameters: $KEY (reference to a localized text) %CHANNEL_LABEL %UNIT_SIDE %UNIT_NAME %UNIT_RANK %UNIT_ID %UNIT_REF %UNIT_GRP_NAME %UNIT_GRP_LEADER %UNIT_VEH_NAME %UNIT_VEH_POSITION
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value RadioChannelSetCallSign(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.RadioChannelSetCallSign(leftInstance, rightInstance));
            }

            /// <summary>
            /// Set the custom radio channel's label.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value RadioChannelSetLabel(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.RadioChannelSetLabel(leftInstance, rightInstance));
            }

            /// <summary>
            /// A getter for enableRadio.
            /// </summary>
            /// <returns>Value bool</returns>
            public static Value RadioEnabled()
            {
                return new Value(GameValueMethods.RadioEnabled());
            }

            /// <summary>
            /// Returns the current radio volume (set by fadeRadio).
            /// </summary>
            /// <returns>Value scalar</returns>
            public static Value RadioVolume()
            {
                return new Value(GameValueMethods.RadioVolume());
            }

            /// <summary>
            /// Returns the current value of rain density in range 0..1
            /// </summary>
            /// <returns>Value scalar</returns>
            public static Value Rain()
            {
                return new Value(GameValueMethods.Rain());
            }

            /// <summary>
            /// Returns the current rainbow intensity.
            /// </summary>
            /// <returns>Value scalar</returns>
            public static Value Rainbow()
            {
                return new Value(GameValueMethods.Rainbow());
            }

            /// <summary>
            /// Returns currently set  RainParticles params, custom or default.
            /// </summary>
            /// <returns>Value array</returns>
            public static Value RainParams()
            {
                return new Value(GameValueMethods.RainParams());
            }

            /// <summary>
            ///  Syntax 2's distribution Syntax 1 generates a random floating point value Syntax 2 generates a Gaussian Distribution[1]. It uses the same method as setTriggerTimeout command and is quite useful for e.g spawning loot, making more valuable items more rare Syntax 3 generates a seed-based random number Syntax 4 generates a seed-based random noise (not Perlin) texture based on provided seed and returning the value at supplied coordinates
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value scalar</returns>
            public static Value Random(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.Random(leftInstance, rightInstance));
            }

            /// <summary>
            /// Returns the rank of the given unit. Rank can be one of the following: "PRIVATE" "CORPORAL" "SERGEANT" "LIEUTENANT" "CAPTAIN" "MAJOR" "COLONEL"
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value string</returns>
            public static Value Rank(Value rightInstance)
            {
                return new Value(GameValueMethods.Rank(rightInstance));
            }

            /// <summary>
            /// Return the rank of the given unit for comparison. Value may be: 0 - Private 1 - Corporal 2 - Sergeant 3 - Lieutenant 4 - Captain 5 - Major 6 - Colonel
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value scalar</returns>
            public static Value RankId(Value rightInstance)
            {
                return new Value(GameValueMethods.RankId(rightInstance));
            }

            /// <summary>
            /// Check unit rating. Rating is increased for killing enemies, decreased for killing friendlies (see Rating Values). Can be changed via addRating by the mission designer.  The rating of the player is displayed as the "score" at the end of the mission. Via Description.ext one can define how many points it takes to get a perfect score, as well as the number of stars.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value scalar</returns>
            public static Value Rating(Value rightInstance)
            {
                return new Value(GameValueMethods.Rating(rightInstance));
            }

            /// <summary>
            /// Checks if a location is rectangular (returns true) or elliptical (returns false).
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value bool</returns>
            public static Value Rectangular(Value rightInstance)
            {
                return new Value(GameValueMethods.Rectangular(rightInstance));
            }

            /// <summary>
            /// Searches in a string with a regular expression. See Arma 3: Regular Expressions.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value RegexFind(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.RegexFind(leftInstance, rightInstance));
            }

            /// <summary>
            /// Returns whether the haystack matches the pattern.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value bool</returns>
            public static Value RegexMatch(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.RegexMatch(leftInstance, rightInstance));
            }

            /// <summary>
            /// Searches given haystack with given pattern and replaces all matches with given replaceString.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value string</returns>
            public static Value RegexReplace(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.RegexReplace(leftInstance, rightInstance));
            }

            /// <summary>
            /// Returns array with all registered task types for the given agent. The values are the names set in CfgTasks classes name property. The same names are used for unregisterTask
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value RegisteredTasks(Value rightInstance)
            {
                return new Value(GameValueMethods.RegisteredTasks(rightInstance));
            }

            /// <summary>
            /// Registers a new task type. Parameters are defined in the given config class (subclass of CfgTasks)
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value bool</returns>
            public static Value RegisterTask(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.RegisterTask(leftInstance, rightInstance));
            }

            /// <summary>
            /// Old syntax: Reload first found muzzle that needs reloading (with some inconsistencies). Alternative syntax (Since Arma 3 v2.08.148609): This syntax allows to reload given muzzle with given magazine while playing proper animation. If param is omitted or is empty string, default value is used. The default behaviour is to find best matching magazine for given muzzle from the pool of available magazines. If specific magazine is requested, the reload will fail if unit has run out of this type of magazines. If empty array [] is given, the behaviour is similar to player pressing "Reload" key. The command reloads the given muzzle but doesn't select it. In case of  throwable muzzles, each throwable has own muzzle, they are autoreloaded after throw. Using reload on the trowable muzzle will just swap throwable for another one of the same type from inventory.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value bool</returns>
            public static Value Reload(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.Reload(leftInstance, rightInstance));
            }

            /// <summary>
            /// Check whether magazine is reloaded whenever emptied.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value bool</returns>
            public static Value ReloadEnabled(Value rightInstance)
            {
                return new Value(GameValueMethods.ReloadEnabled(rightInstance));
            }

            /// <summary>
            /// Switches on remote control of the unit. Command needs to be executed locally to the player. If driver is remote it will get transferred to players PC. There is currently no getter command for remote control, but it is possible to use a trick described in Example 3.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value RemoteControl(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.RemoteControl(leftInstance, rightInstance));
            }

            /// <summary>
            /// Asks the server to execute the given function or script command on the given target machine(s). Functions are executed in the scheduled environment; suspension is allowed. Script commands are executed in the unscheduled environment; suspension is not allowed (see Example 7). Read Arma 3: Remote Execution for more information about remote execution, security features and JIP techniques. remoteExec/remoteExecCall can be used in single player as well, as it is considered as player-hosted multiplayer. ⚠The direct execution of call or spawn via remoteExec (or remoteExecCall) should be avoided to prevent issues in cases where the remote execution of call or spawn is blocked by CfgRemoteExec. It is instead recommended to create a function to be itself remote-executed.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value string_nothing</returns>
            public static Value RemoteExec(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.RemoteExec(leftInstance, rightInstance));
            }

            /// <summary>
            /// Unscheduled version of remoteExec. The only difference between remoteExec and remoteExecCall is that remoteExecCall will run functions in unscheduled environment. ⚠The "Call" in remoteExecCall only means that the remote execution will take place in unscheduled environment and does not mean it will happen right away (see Example 3).
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value string_nothing</returns>
            public static Value RemoteExecCall(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.RemoteExecCall(leftInstance, rightInstance));
            }

            /// <summary>
            /// Returns the  machine network ID of the client that initiated Remote Execution. ⚠Running this command in a Single Player environment outside of a remote-executed context in a remote-executed context received from a Headless Client will return 0 by design. To check if the context is remote executed, use isRemoteExecuted or isRemoteExecutedJIP.
            /// </summary>
            /// <returns>Value scalar</returns>
            public static Value RemoteExecutedOwner()
            {
                return new Value(GameValueMethods.RemoteExecutedOwner());
            }

            /// <summary>
            /// Removes connection between entities.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value Remove3DENConnection(Value rightInstance)
            {
                return new Value(GameValueMethods.Remove3DENConnection(rightInstance));
            }

            /// <summary>
            /// Removes Eden Editor event handler of given type and ID. See the list of all Eden Editor Event Handlers.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value Remove3DENEventHandler(Value rightInstance)
            {
                return new Value(GameValueMethods.Remove3DENEventHandler(rightInstance));
            }

            /// <summary>
            /// Remove Eden Editor editing layer.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value bool</returns>
            public static Value Remove3DENLayer(Value rightInstance)
            {
                return new Value(GameValueMethods.Remove3DENLayer(rightInstance));
            }

            /// <summary>
            /// Removes user added action with given ID. This only removes actions added with the addAction command. You cannot remove default game actions, such as reload.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value RemoveAction(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.RemoveAction(leftInstance, rightInstance));
            }

            /// <summary>
            /// Removes all Eden Editor event handlers of given type.  See the list of all Eden Editor Event Handlers.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value RemoveAll3DENEventHandlers(Value rightInstance)
            {
                return new Value(GameValueMethods.RemoveAll3DENEventHandlers(rightInstance));
            }

            /// <summary>
            /// Removes all unit's user added actions. This command's syntax was unit removeAllActions number from Arma 3 v0.50 to v1.06. ⚠Usage of this command is usually a bad practice unless justified by the situation; removing all actions in order to remove all actions that one added is not a good method as a mod or another script could have added its own actions as well and see them removed. Instead, store the action id returned by addAction either in a script variable or using setVariable.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value RemoveAllActions(Value rightInstance)
            {
                return new Value(GameValueMethods.RemoveAllActions(rightInstance));
            }

            /// <summary>
            /// Unassigns and deletes all linked items from inventory. The commands operates on assignedItems array, which does not include goggles or headgear but includes binoculars, which is a weapon. Use removeGoggles and removeHeadgear for those.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value RemoveAllAssignedItems(Value rightInstance)
            {
                return new Value(GameValueMethods.RemoveAllAssignedItems(rightInstance));
            }

            /// <summary>
            /// Removes all items from binocular weapon, except magazine.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value RemoveAllBinocularItems(Value rightInstance)
            {
                return new Value(GameValueMethods.RemoveAllBinocularItems(rightInstance));
            }

            /// <summary>
            /// Removes all containers (vest, uniform, backpack) from the provided unit.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value RemoveAllContainers(Value rightInstance)
            {
                return new Value(GameValueMethods.RemoveAllContainers(rightInstance));
            }

            /// <summary>
            /// Restrict access to all addons for given curator.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value RemoveAllCuratorAddons(Value rightInstance)
            {
                return new Value(GameValueMethods.RemoveAllCuratorAddons(rightInstance));
            }

            /// <summary>
            /// Delete all curator camera areas.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value RemoveAllCuratorCameraAreas(Value rightInstance)
            {
                return new Value(GameValueMethods.RemoveAllCuratorCameraAreas(rightInstance));
            }

            /// <summary>
            /// Delete all curator edit areas.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value RemoveAllCuratorEditingAreas(Value rightInstance)
            {
                return new Value(GameValueMethods.RemoveAllCuratorEditingAreas(rightInstance));
            }

            /// <summary>
            /// Removes all event handlers of given type that were added by addEventHandler and resets event handler's creation index to 0.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value RemoveAllEventHandlers(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.RemoveAllEventHandlers(leftInstance, rightInstance));
            }

            /// <summary>
            /// Removes all items from handgunWeapon, except magazine.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value RemoveAllHandgunItems(Value rightInstance)
            {
                return new Value(GameValueMethods.RemoveAllHandgunItems(rightInstance));
            }

            /// <summary>
            /// Removes all special items from the unit.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value RemoveAllItems(Value rightInstance)
            {
                return new Value(GameValueMethods.RemoveAllItems(rightInstance));
            }

            /// <summary>
            /// Removes all itemsWithMagazines from the uniform, vest and backpack. Command essentially clears all unit's containers.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value RemoveAllItemsWithMagazines(Value rightInstance)
            {
                return new Value(GameValueMethods.RemoveAllItemsWithMagazines(rightInstance));
            }

            /// <summary>
            /// Removes all mission event handlers of the given type which were added by addMissionEventHandler. ⚠Prior to 2.08 this command would also reset the Event Handler creation index to 0.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value RemoveAllMissionEventHandlers(Value rightInstance)
            {
                return new Value(GameValueMethods.RemoveAllMissionEventHandlers(rightInstance));
            }

            /// <summary>
            /// Removes all MP event handlers of the given type which were added by addMPEventHandler. Command needs to be executed only on one PC for MP event handler to be removed globally.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value RemoveAllMPEventHandlers(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.RemoveAllMPEventHandlers(leftInstance, rightInstance));
            }

            /// <summary>
            /// Removes all music track event handlers of given type.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value RemoveAllMusicEventHandlers(Value rightInstance)
            {
                return new Value(GameValueMethods.RemoveAllMusicEventHandlers(rightInstance));
            }

            /// <summary>
            /// Removes ownership of all owned mines/explosive devices of the given unit
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value RemoveAllOwnedMines(Value rightInstance)
            {
                return new Value(GameValueMethods.RemoveAllOwnedMines(rightInstance));
            }

            /// <summary>
            /// Removes all items from primaryWeapon, except magazine.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value RemoveAllPrimaryWeaponItems(Value rightInstance)
            {
                return new Value(GameValueMethods.RemoveAllPrimaryWeaponItems(rightInstance));
            }

            /// <summary>
            /// Removes all items from secondaryWeapon, except magazine.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value RemoveAllSecondaryWeaponItems(Value rightInstance)
            {
                return new Value(GameValueMethods.RemoveAllSecondaryWeaponItems(rightInstance));
            }

            /// <summary>
            /// Removes all UserAction event handlers of the given type which were added by addUserActionEventHandler. ⚠This command also resets the Event Handler creation index to 0.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value RemoveAllUserActionEventHandlers(Value rightInstance)
            {
                return new Value(GameValueMethods.RemoveAllUserActionEventHandlers(rightInstance));
            }

            /// <summary>
            /// Removes all weapons and magazines from the given unit. Does not remove items like map, compass, radio (see removeWeapon for this). Doesn't quite work with vehicles. If you need to remove all weapons from a vehicle, remove each weapon individually (see removeWeapon).
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value RemoveAllWeapons(Value rightInstance)
            {
                return new Value(GameValueMethods.RemoveAllWeapons(rightInstance));
            }

            /// <summary>
            /// Removes unit's backpack
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value RemoveBackpack(Value rightInstance)
            {
                return new Value(GameValueMethods.RemoveBackpack(rightInstance));
            }

            /// <summary>
            /// Removes backpack from a unit. (even non-local)
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value RemoveBackpackGlobal(Value rightInstance)
            {
                return new Value(GameValueMethods.RemoveBackpackGlobal(rightInstance));
            }

            /// <summary>
            /// Removes given weapon item, including magazine, from the binocular weapon.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value RemoveBinocularItem(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.RemoveBinocularItem(leftInstance, rightInstance));
            }

            /// <summary>
            /// Restrict curator use of given addons.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value RemoveCuratorAddons(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.RemoveCuratorAddons(leftInstance, rightInstance));
            }

            /// <summary>
            /// Removes curator camera area.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value RemoveCuratorCameraArea(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.RemoveCuratorCameraArea(leftInstance, rightInstance));
            }

            /// <summary>
            /// Unregister objects which can be edited by a curator.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value RemoveCuratorEditableObjects(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.RemoveCuratorEditableObjects(leftInstance, rightInstance));
            }

            /// <summary>
            /// Removes editing area for given curator.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value RemoveCuratorEditingArea(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.RemoveCuratorEditingArea(leftInstance, rightInstance));
            }

            /// <summary>
            /// Remove a log record.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value RemoveDiaryRecord(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.RemoveDiaryRecord(leftInstance, rightInstance));
            }

            /// <summary>
            /// Removes a page and all its subjects from the Diary.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value RemoveDiarySubject(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.RemoveDiarySubject(leftInstance, rightInstance));
            }

            /// <summary>
            /// Removes an icon for an editor object.  Some Old Editor Command
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value RemoveDrawIcon(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.RemoveDrawIcon(leftInstance, rightInstance));
            }

            /// <summary>
            /// Remove all drawn links for the given editor object for the given editor,object type. Pass an empty string as param type to remove all draw,links for an object.   Some Old Editor Command
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value RemoveDrawLinks(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.RemoveDrawLinks(leftInstance, rightInstance));
            }

            /// <summary>
            /// Removes a given Event Handler that was added with addEventHandler.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value RemoveEventHandler(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.RemoveEventHandler(leftInstance, rightInstance));
            }

            /// <summary>
            /// Removes vehicles/units from the garbage collector, so they do not get deleted automatically; added earlier with addToRemainsCollector.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value RemoveFromRemainsCollector(Value rightInstance)
            {
                return new Value(GameValueMethods.RemoveFromRemainsCollector(rightInstance));
            }

            /// <summary>
            /// Removes goggles from unit (diver goggles for example). This command does not remove NVGoggles. Use unassignItem and removeItem or just unlinkItem for latter.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value RemoveGoggles(Value rightInstance)
            {
                return new Value(GameValueMethods.RemoveGoggles(rightInstance));
            }

            /// <summary>
            /// Remove icon with given ID from group.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value RemoveGroupIcon(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.RemoveGroupIcon(leftInstance, rightInstance));
            }

            /// <summary>
            /// Removes given weapon item, including magazine, from the handgunWeapon
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value RemoveHandgunItem(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.RemoveHandgunItem(leftInstance, rightInstance));
            }

            /// <summary>
            /// Removes headgear from a unit. If unit has no headgear command quietly fails.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value RemoveHeadgear(Value rightInstance)
            {
                return new Value(GameValueMethods.RemoveHeadgear(rightInstance));
            }

            /// <summary>
            /// Removes item from the inventory.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value RemoveItem(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.RemoveItem(leftInstance, rightInstance));
            }

            /// <summary>
            /// Removes item from soldier's backpack.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value RemoveItemFromBackpack(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.RemoveItemFromBackpack(leftInstance, rightInstance));
            }

            /// <summary>
            /// Removes item from soldier's uniform. Can be used with magazines and weapons too.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value RemoveItemFromUniform(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.RemoveItemFromUniform(leftInstance, rightInstance));
            }

            /// <summary>
            /// Removes item from soldier's vest.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value RemoveItemFromVest(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.RemoveItemFromVest(leftInstance, rightInstance));
            }

            /// <summary>
            /// Removes all items with given class name from the inventory.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value RemoveItems(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.RemoveItems(leftInstance, rightInstance));
            }

            /// <summary>
            /// Remove magazine from the unit.⚠You may create invalid combinations with this function. When doing so, application behaviour is undefined.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value RemoveMagazine(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.RemoveMagazine(leftInstance, rightInstance));
            }

            /// <summary>
            /// Removes the magazine from the unit.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value RemoveMagazineGlobal(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.RemoveMagazineGlobal(leftInstance, rightInstance));
            }

            /// <summary>
            /// Removes all magazines of given type from the unit. If magazine class does not exist, nothing happens, not even .rpt message, unlike with addMagazine command.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value RemoveMagazines(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.RemoveMagazines(leftInstance, rightInstance));
            }

            /// <summary>
            /// Removes all magazines of the given type from given vehicle. Use turret path [-1] for driver's turret.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value RemoveMagazinesTurret(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.RemoveMagazinesTurret(leftInstance, rightInstance));
            }

            /// <summary>
            /// Removes the magazine from the turret. Use turret path [-1] for driver's turret. Note: you may create invalid combinations by using this function. When doing so, application behaviour is undefined.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value RemoveMagazineTurret(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.RemoveMagazineTurret(leftInstance, rightInstance));
            }

            /// <summary>
            /// Removes a previously added menu item.  Some Old Editor Command
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value RemoveMenuItem(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.RemoveMenuItem(leftInstance, rightInstance));
            }

            /// <summary>
            /// Removes mission event handler added by addMissionEventHandler.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value RemoveMissionEventHandler(Value rightInstance)
            {
                return new Value(GameValueMethods.RemoveMissionEventHandler(rightInstance));
            }

            /// <summary>
            /// Removes MP event handler added by addMPEventHandler.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value RemoveMPEventHandler(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.RemoveMPEventHandler(leftInstance, rightInstance));
            }

            /// <summary>
            /// Removes specified music track event handler. See Arma 3: Event Handlers - Music Event Handlers.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value RemoveMusicEventHandler(Value rightInstance)
            {
                return new Value(GameValueMethods.RemoveMusicEventHandler(rightInstance));
            }

            /// <summary>
            /// Removes ownership over a remotely detonatable mine from the unit.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value RemoveOwnedMine(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.RemoveOwnedMine(leftInstance, rightInstance));
            }

            /// <summary>
            /// Removes given weapon item, including magazine, from the primaryWeapon.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value RemovePrimaryWeaponItem(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.RemovePrimaryWeaponItem(leftInstance, rightInstance));
            }

            /// <summary>
            /// Removes given weapon item, including magazine, from the secondaryWeapon.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value RemoveSecondaryWeaponItem(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.RemoveSecondaryWeaponItem(leftInstance, rightInstance));
            }

            /// <summary>
            /// Remove a simple task from the list of simple tasks. If the Task to be removed is a child to some parent task and at the same time the parent to some child task, the child of this task gets orphaned and is listed in the root of Tasks tree (Tasks menu), retaining tree structure of its children.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value RemoveSimpleTask(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.RemoveSimpleTask(leftInstance, rightInstance));
            }

            /// <summary>
            /// Remove a unit from the list of units available for Team Switch.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value RemoveSwitchableUnit(Value rightInstance)
            {
                return new Value(GameValueMethods.RemoveSwitchableUnit(rightInstance));
            }

            /// <summary>
            /// Remove given member from given team. Effect is local, unless both member and team are local to PC on which command is executed, then effect is global.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value RemoveTeamMember(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.RemoveTeamMember(leftInstance, rightInstance));
            }

            /// <summary>
            /// Removes uniform from unit.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value RemoveUniform(Value rightInstance)
            {
                return new Value(GameValueMethods.RemoveUniform(rightInstance));
            }

            /// <summary>
            /// Removes a UserAction event handler. For a list of available UserAction event handlers, see: Arma 3: Mission Event Handlers.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value RemoveUserActionEventHandler(Value rightInstance)
            {
                return new Value(GameValueMethods.RemoveUserActionEventHandler(rightInstance));
            }

            /// <summary>
            /// Removes vest from unit.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value RemoveVest(Value rightInstance)
            {
                return new Value(GameValueMethods.RemoveVest(rightInstance));
            }

            /// <summary>
            /// Remove weapon from a unit. The unit must be local to the computer where command is executed. For a global version of this command see removeWeaponGlobal. Note: It is possible to create invalid combinations with this command (ie, attempting to remove a weapon that a unit does not possess). When doing so, application behaviour is undefined.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value RemoveWeapon(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.RemoveWeapon(leftInstance, rightInstance));
            }

            /// <summary>
            /// Remove attachment linked to a weapon from the vehicle cargo space.  ⚠This is unofficial documentation. All Information here is as it exists in the Engine. It might not reflect the reality.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value RemoveWeaponAttachmentCargo(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.RemoveWeaponAttachmentCargo(leftInstance, rightInstance));
            }

            /// <summary>
            /// Remove weapon from the vehicle cargo space. ⚠This is unofficial documentation. All Information here is as it exists in the Engine. It might not reflect the reality.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value RemoveWeaponCargo(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.RemoveWeaponCargo(leftInstance, rightInstance));
            }

            /// <summary>
            /// Remove a weapon from a unit. An attempt to remove a weapon, which is not in unit's possession, is simply ignored.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value RemoveWeaponGlobal(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.RemoveWeaponGlobal(leftInstance, rightInstance));
            }

            /// <summary>
            /// Removes weapon from the turret. Use turret path [-1] for driver's turret.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value RemoveWeaponTurret(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.RemoveWeaponTurret(leftInstance, rightInstance));
            }

            /// <summary>
            /// Shares the target vehicle via datalink to the Side center for a given time.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value ReportRemoteTarget(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.ReportRemoteTarget(leftInstance, rightInstance));
            }

            /// <summary>
            /// Check if version of application is available. If the current version is older than the required one, a warning message is shown and false is returned.  Version of format Major.Minor, e.g. 1.30
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value bool</returns>
            public static Value RequiredVersion(Value rightInstance)
            {
                return new Value(GameValueMethods.RequiredVersion(rightInstance));
            }

            /// <summary>
            /// Stops any ongoing camera shake effects. Does not prevent new effects from being created. To disallow new effects altogether, enableCamShake should be used.
            /// </summary>
            /// <returns>Value nothing</returns>
            public static Value ResetCamShake()
            {
                return new Value(GameValueMethods.ResetCamShake());
            }

            /// <summary>
            /// Sets  formation direction of a group relative to current direction of the group leader. The group units will change their positions to form new formation if new formation direction is different (approx +/- 15 degrees). Does the same as: _grp setFormDir getDir leader _grp;
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value ResetSubgroupDirection(Value rightInstance)
            {
                return new Value(GameValueMethods.ResetSubgroupDirection(rightInstance));
            }

            /// <summary>
            /// Pre-defined variable for the resistance side.
            /// </summary>
            /// <returns>Value side</returns>
            public static Value Resistance()
            {
                return new Value(GameValueMethods.Resistance());
            }

            /// <summary>
            /// Changes the size of the given array. The command does not return new array, it resizes the source array to the desired number of elements. If the new size is bigger than the current size, the new places are filled with nil. The alternative syntax allows to fill resized positions with a given value. Array and HashMap values are copied.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value Resize(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.Resize(leftInstance, rightInstance));
            }

            /// <summary>
            /// Returns the resources of a team member. Results are local to the PC on which command was executed.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value Resources(Value rightInstance)
            {
                return new Value(GameValueMethods.Resources(rightInstance));
            }

            /// <summary>
            /// Sets vehicle as respawnable in MP game. The vehicle will be spawned at the locality and coordinates it was prior to destruction. If respawn type is set to base respawn (type 3) and vehicle respawn marker is provided (respawn_vehicle_XXXSIDEXXX), vehicle will spawn on the marker.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value RespawnVehicle(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.RespawnVehicle(leftInstance, rightInstance));
            }

            /// <summary>
            /// Restarts the mission editor camera (if it was deleted by a script,for example). Some Old Editor Command
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value RestartEditorCamera(Value rightInstance)
            {
                return new Value(GameValueMethods.RestartEditorCamera(rightInstance));
            }

            /// <summary>
            /// Reveals a target to a group. If toWhom is a unit, unit's group is considered. If toWhom is a vehicle, vehicle commander's group is considered.  The knowledge value will be set to the highest level any unit of the revealing side has about the revealed target. If the revealing side has no knowledge about the revealed target, the value will be set to 1. The knowledge level can only be increased by this command, not decreased. Use forgetTarget first if you need to decrease value.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value Reveal(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.Reveal(leftInstance, rightInstance));
            }

            /// <summary>
            /// Sets given mine as known to the side. (Knowledge about a mine is always shared across all units in a side.)
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value RevealMine(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.RevealMine(leftInstance, rightInstance));
            }

            /// <summary>
            /// Reverses given array by reference (modifies the original array, just like resize). The alternative syntax can be used to reverse a ANSI string. If Unicode support is desired, see forceUnicode.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value string</returns>
            public static Value Reverse(Value rightInstance)
            {
                return new Value(GameValueMethods.Reverse(rightInstance));
            }

            /// <summary>
            /// Returns true if mouse vertical axe is inverted.
            /// </summary>
            /// <returns>Value bool</returns>
            public static Value ReversedMouseY()
            {
                return new Value(GameValueMethods.ReversedMouseY());
            }

            /// <summary>
            /// Returns a road segment containing given position, objNull otherwise. Same as isOnRoad only returns the actual road object instead of boolean.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value object</returns>
            public static Value RoadAt(Value rightInstance)
            {
                return new Value(GameValueMethods.RoadAt(rightInstance));
            }

            /// <summary>
            /// Find the road segments connected to the given road segment. ⚠Pedestrian roads such as "TRAIL"s are missing connection information by design, therefore basic command will return empty array for those. Use the alternative syntax to return pedestrian roads.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value RoadsConnectedTo(Value rightInstance)
            {
                return new Value(GameValueMethods.RoadsConnectedTo(rightInstance));
            }

            /// <summary>
            /// Returns unit description set in the editor and visible on role selection screen in multiplayer.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value string</returns>
            public static Value RoleDescription(Value rightInstance)
            {
                return new Value(GameValueMethods.RoleDescription(rightInstance));
            }

            /// <summary>
            /// Returns an array of all entities that are attached to the transport with ropes. This command is the opposite of ropeAttachedTo.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value RopeAttachedObjects(Value rightInstance)
            {
                return new Value(GameValueMethods.RopeAttachedObjects(rightInstance));
            }

            /// <summary>
            /// Returns the owner of the first rope - the transport to which other entities are attached with ropes. This command is the opposite of ropeAttachedObjects. To return all owners see ropesAttachedTo.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value object</returns>
            public static Value RopeAttachedTo(Value rightInstance)
            {
                return new Value(GameValueMethods.RopeAttachedTo(rightInstance));
            }

            /// <summary>
            /// Returns true if entity can be attached to a rope end.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value bool</returns>
            public static Value RopeAttachEnabled(Value rightInstance)
            {
                return new Value(GameValueMethods.RopeAttachEnabled(rightInstance));
            }

            /// <summary>
            /// Attaches entity to the rope end with optional offset. For detach operation use ropeDetach.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value RopeAttachTo(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.RopeAttachTo(leftInstance, rightInstance));
            }

            /// <summary>
            /// Creates a rope.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value object</returns>
            public static Value RopeCreate(Value rightInstance)
            {
                return new Value(GameValueMethods.RopeCreate(rightInstance));
            }

            /// <summary>
            /// Cuts the given rope to the specified length. If some entity was attached to the end of the rope, it will be detached. The rope remains attached to its parent transport and if the length is set to 0 or even negative does not get destroyed. Use ropeDestroy to remove it completely.The rope could only be shortened. If the cut length is greater than current rope length, nothing happens
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value RopeCut(Value rightInstance)
            {
                return new Value(GameValueMethods.RopeCut(rightInstance));
            }

            /// <summary>
            /// Destroys the given rope. If the rope is attached to a vehicle, it will be detached and then destroyed.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value RopeDestroy(Value rightInstance)
            {
                return new Value(GameValueMethods.RopeDestroy(rightInstance));
            }

            /// <summary>
            /// Detaches attached object from rope (i.e. detaches rope end from attached to it entity). See ropeAttachTo for attach operation.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value RopeDetach(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.RopeDetach(leftInstance, rightInstance));
            }

            /// <summary>
            /// Returns start and end positions for the given  rope. If command fails, empty array [] is returned.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value RopeEndPosition(Value rightInstance)
            {
                return new Value(GameValueMethods.RopeEndPosition(rightInstance));
            }

            /// <summary>
            /// Return rope length in meters (set by ropeCreate, ropeCut, ropeUnwind). Returned rope length will remain the same, even if the rope is stretched.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value scalar</returns>
            public static Value RopeLength(Value rightInstance)
            {
                return new Value(GameValueMethods.RopeLength(rightInstance));
            }

            /// <summary>
            /// Returns all ropes attached to a ropes owner transport vehicle.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value Ropes(Value rightInstance)
            {
                return new Value(GameValueMethods.Ropes(rightInstance));
            }

            /// <summary>
            /// Returns the owners of all ropes attached to the cargo - the transports to which other entities are attached with ropes. This command returns Array of Objects instead of a single Object as with ropeAttachedTo.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value RopesAttachedTo(Value rightInstance)
            {
                return new Value(GameValueMethods.RopesAttachedTo(rightInstance));
            }

            /// <summary>
            /// Returns provided rope's segments. To return the rope parent from a rope segment, use objectParent (Since Arma 3 2.12)
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value RopeSegments(Value rightInstance)
            {
                return new Value(GameValueMethods.RopeSegments(rightInstance));
            }

            /// <summary>
            /// Increases or decreases the rope length by the given amount. Use relative parameter for changing rope length +/- from current length. Rope length can be in range 0.5..100 metres.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value RopeUnwind(Value rightInstance)
            {
                return new Value(GameValueMethods.RopeUnwind(rightInstance));
            }

            /// <summary>
            /// Returns false if rope length changing animation is in progress. Returns true if animation is done.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value bool</returns>
            public static Value RopeUnwound(Value rightInstance)
            {
                return new Value(GameValueMethods.RopeUnwound(rightInstance));
            }

            /// <summary>
            /// Returns force produced by rotors. For this command to have any effect, the Advanced Flight Model (AFM) has to be enabled. AFM status can be checked with difficultyEnabledRTD.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value RotorsForcesRTD(Value rightInstance)
            {
                return new Value(GameValueMethods.RotorsForcesRTD(rightInstance));
            }

            /// <summary>
            /// Returns rotors RPM. For this command to have any effect, the Advanced Flight Model (AFM) has to be enabled. AFM status can be checked with difficultyEnabledRTD.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value RotorsRpmRTD(Value rightInstance)
            {
                return new Value(GameValueMethods.RotorsRpmRTD(rightInstance));
            }

            /// <summary>
            /// Rounds the provided value to the closest integer.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value scalar_nan</returns>
            public static Value Round(Value rightInstance)
            {
                return new Value(GameValueMethods.Round(rightInstance));
            }

            /// <summary>
            /// Fades in mission screen and re-executes init.sqf and init.sqs scripts. In Eden Editor the code inside the "Init" mission attribute is executed.
            /// </summary>
            /// <returns>Value nothing</returns>
            public static Value RunInitScript()
            {
                return new Value(GameValueMethods.RunInitScript());
            }

            /// <summary>
            /// Returns the height of the screen in screen measurement units. Taken from top left corner of the default viewport (0,0) of the screen and going in the same direction as the Y axis, the value will be positive but resulting Y will end up beyond the bottom border. Therefore in order to calculate Y of the bottom screen border, the length of safeZoneY must be subtracted from safeZoneH, but because it is negative, it must be added instead. _screenBottomBorderY = safeZoneH + safeZoneY. The measurement units depend on the current screen resolution getResolution. See also SafeZone
            /// </summary>
            /// <returns>Value scalar</returns>
            public static Value SafeZoneH()
            {
                return new Value(GameValueMethods.SafeZoneH());
            }

            /// <summary>
            /// Returns the width of the screen in screen measurement units. Taken from top left corner of the default viewport (0,0) of the screen and going in the same direction as the X axis, the value will be positive but resulting X will end up beyond the right border. Therefore in order to calculate X of the right screen border, the length of safeZoneX must be subtracted from safeZoneW, but because it is negative, it must be added instead. _screenRightBorderX = safeZoneW + safeZoneX. The measurement units depend on the current screen resolution getResolution. See also SafeZone
            /// </summary>
            /// <returns>Value scalar</returns>
            public static Value SafeZoneW()
            {
                return new Value(GameValueMethods.SafeZoneW());
            }

            /// <summary>
            /// Returns absolute safeZoneW including all monitors.
            /// </summary>
            /// <returns>Value scalar</returns>
            public static Value SafeZoneWAbs()
            {
                return new Value(GameValueMethods.SafeZoneWAbs());
            }

            /// <summary>
            ///  Returns the X of the left border of the screen, which is also a distance in screen measurement units from top left corner of the default viewport (0,0) of the screen to the left border of the screen. Since it is going in opposite way of the X axis, the value is negative. The measurement units depend on the current screen resolution getResolution. See also SafeZone.
            /// </summary>
            /// <returns>Value scalar</returns>
            public static Value SafeZoneX()
            {
                return new Value(GameValueMethods.SafeZoneX());
            }

            /// <summary>
            /// Returns absolute safeZoneX including all monitors. 
            /// </summary>
            /// <returns>Value scalar</returns>
            public static Value SafeZoneXAbs()
            {
                return new Value(GameValueMethods.SafeZoneXAbs());
            }

            /// <summary>
            ///  Returns the Y of the top border of the screen, which is also a distance in screen measurement units from top left corner of the default viewport (0,0) of the screen to the top border of the screen. Since it is going in opposite way of the Y axis, the value is negative. The measurement units depend on the current screen resolution getResolution. See also SafeZone.
            /// </summary>
            /// <returns>Value scalar</returns>
            public static Value SafeZoneY()
            {
                return new Value(GameValueMethods.SafeZoneY());
            }

            /// <summary>
            /// Saves the current state of entities' inventory to the Mission.sqm.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value Save3DENInventory(Value rightInstance)
            {
                return new Value(GameValueMethods.Save3DENInventory(rightInstance));
            }

            /// <summary>
            /// Autosaves the game (used for Retry). The saving is not started immediately, the request for autosave is made instead. To check the status of the request, use isSaving. The game can then be loaded from the last autosave with loadGame. Will not save if the player is  null or dead. Since 1.88 a  "OnSaveGame"  scripted event handler is available.
            /// </summary>
            /// <returns>Value nothing</returns>
            public static Value SaveGame()
            {
                return new Value(GameValueMethods.SaveGame());
            }

            /// <summary>
            /// Saves units's identity to Objects.sav file in campaign directory as entry name.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value bool</returns>
            public static Value SaveIdentity(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SaveIdentity(leftInstance, rightInstance));
            }

            /// <summary>
            /// Saves joysticks key mappings into the joysticks.cfg file. Engine add these joysticks to the Joystick Scheme mapping dialog in options controls section.
            /// </summary>
            /// <returns>Value nothing</returns>
            public static Value SaveJoysticks()
            {
                return new Value(GameValueMethods.SaveJoysticks());
            }

            /// <summary>
            /// missionProfileNamespace provides long term storage solution for mission variables. When this namespace has variables set with setVariable and is saved, the variables are saved into missionName.vars file into current soldier profileName folder. Next time when the same mission is loaded by the client with the same soldier profile, the saved variables can be read normally with getVariable command. This way each mission maker can create persistent data that is both mission and soldier profile specific. This is default behaviour. The file is only created when save operation is invoked with this command. It is also possible to share the same mission profile variables between several missions. To override default behaviour one needs to create an entry missionGroup in  Description.ext, for example missionGroup = "MyMissionCollectionName";. This will create MyMissionCollectionName.vars file instead of default one, which would be loaded into every mission with matching missionGroup entry.
            /// </summary>
            /// <returns>Value bool</returns>
            public static Value SaveMissionProfileNamespace()
            {
                return new Value(GameValueMethods.SaveMissionProfileNamespace());
            }

            /// <summary>
            /// Save the current overlay. Some Old Editor Command
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SaveOverlay(Value rightInstance)
            {
                return new Value(GameValueMethods.SaveOverlay(rightInstance));
            }

            /// <summary>
            /// Saves all variables stored in profileNamespace to the active Profile. ⚠ This command triggers a file operation. As file operations are slow (even on SSDs), it is not recommended to use this command too frequently (i.e. several times per second). Do not save large amounts of data to the profile; the larger the profile file gets, the slower it loads! The profileNamespace is also saved when the game is closed. Heliport status, used in the Career mode for example, is stored in the file that is modified by this command, so be mindful of this to avoid losing data and progress.
            /// </summary>
            /// <returns>Value nothing</returns>
            public static Value SaveProfileNamespace()
            {
                return new Value(GameValueMethods.SaveProfileNamespace());
            }

            /// <summary>
            /// Saves object's properties to Objects.sav file in campaign directory as entry name.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value bool</returns>
            public static Value SaveStatus(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SaveStatus(leftInstance, rightInstance));
            }

            /// <summary>
            /// Save variable value into the campaign space. This variable is available to all following missions in the campaign.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SaveVar(Value rightInstance)
            {
                return new Value(GameValueMethods.SaveVar(rightInstance));
            }

            /// <summary>
            /// Check if saving the game is enabled. If saving is disabled by Eden Editor mission attribute, this command will still return true.
            /// </summary>
            /// <returns>Value bool</returns>
            public static Value SavingEnabled()
            {
                return new Value(GameValueMethods.SavingEnabled());
            }

            /// <summary>
            /// Make unit say given sound. The sound is defined in CfgSounds. If the unit is a person, it will also perform the corresponding lipsync effect provided an appropriate .lip file has been created for this sound. A dead or non-existent unit obviously cannot say anything. If the camera is not within given range, title is not shown and the sound will not be heard. See also playSound in order to play a sound wherever the camera/player is. say will mimic either say2D or say3D depending on whether it is executed in a cutscene or in a game scene.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value Say(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.Say(leftInstance, rightInstance));
            }

            /// <summary>
            /// Plays given sound in 2D.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value Say2D(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.Say2D(leftInstance, rightInstance));
            }

            /// <summary>
            /// Lets an object say given sound in 3D space. This allows broadcasting of positional music or sound from a source, without having to script a fade sound or music command. Compare this with say2D which will always play a sound at the location of the player after he has been in the vicinity of a broadcasting sound. Sound is defined in "CfgSounds" of the Description.ext or main config. an object can only "say" one sound at a time in order to stop a say3D sound: delete the returned sound source with deleteVehicle, or kill the sound source with e.g setDamage. Prior to 2.00, the sound source object was not returned by the command, so the from object had to be deleted instead (see Examples 2 and 3).
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value object</returns>
            public static Value Say3D(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.Say3D(leftInstance, rightInstance));
            }

            /// <summary>
            /// Defines name of current scope. Name is visible in debugger, and name is also used as reference in some commands like breakOut and breakTo. Scope name should be defined only once per scope. Trying to set a different name on the scope that has already defined scope name will result in error.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value ScopeName(Value rightInstance)
            {
                return new Value(GameValueMethods.ScopeName(rightInstance));
            }

            /// <summary>
            /// Returns the person's score in MP.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value scalar</returns>
            public static Value Score(Value rightInstance)
            {
                return new Value(GameValueMethods.Score(rightInstance));
            }

            /// <summary>
            /// Returns score for the given side. MP Only.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value scalar</returns>
            public static Value ScoreSide(Value rightInstance)
            {
                return new Value(GameValueMethods.ScoreSide(rightInstance));
            }

            /// <summary>
            /// Captures a screenshot and stores it to given filename. PNG is the only available format and the file must have .png extension. The file is saved into Screenshots folder in the Profile directory. The folder is by default limited to 250 MB to prevent abuse. To increase the limit, add the following line at the end of the profile file: maxScreenShotFolderSizeMB = 2000; // 2 GB
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value bool</returns>
            public static Value Screenshot(Value rightInstance)
            {
                return new Value(GameValueMethods.Screenshot(rightInstance));
            }

            /// <summary>
            /// Returns the position on landscape (PositionAGL) corresponding to the given point on screen (in UI coordinates).
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value ScreenToWorld(Value rightInstance)
            {
                return new Value(GameValueMethods.ScreenToWorld(rightInstance));
            }

            /// <summary>
            /// Check if a script is finished running using the Script Handle returned by execVM or spawn.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value bool</returns>
            public static Value ScriptDone(Value rightInstance)
            {
                return new Value(GameValueMethods.ScriptDone(rightInstance));
            }

            /// <summary>
            /// Assign a user friendly name to the VM script this command is executed from. ⚠Once a name is assigned, it cannot be changed.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value ScriptName(Value rightInstance)
            {
                return new Value(GameValueMethods.ScriptName(rightInstance));
            }

            /// <summary>
            /// A non-existing or completed Script Handle. To compare non-existent scripts use isNull or isEqualTo: scriptNull == scriptNull;			// ERROR! == cannot be used with script object isNull scriptNull;					// true scriptNull isEqualTo scriptNull;	// true
            /// </summary>
            /// <returns>Value script</returns>
            public static Value ScriptNull()
            {
                return new Value(GameValueMethods.ScriptNull());
            }

            /// <summary>
            /// Return the current state of given Scud launcher.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value scalar</returns>
            public static Value ScudState(Value rightInstance)
            {
                return new Value(GameValueMethods.ScudState(rightInstance));
            }

            /// <summary>
            /// Returns the name of a unit's secondary weapon (launcher). To detect the weapon which is currently being used by the unit use currentWeapon.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value string</returns>
            public static Value SecondaryWeapon(Value rightInstance)
            {
                return new Value(GameValueMethods.SecondaryWeapon(rightInstance));
            }

            /// <summary>
            /// Returns array with all items assigned to the secondaryWeapon except magazines. Use secondaryWeaponMagazine command for the latter. This command is used for infantry weapons only.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value SecondaryWeaponItems(Value rightInstance)
            {
                return new Value(GameValueMethods.SecondaryWeaponItems(rightInstance));
            }

            /// <summary>
            /// Collects all loaded magazines from all secondaryWeapon muzzles and returns them in Array, otherwise it returns []. This command is used for infantry weapons only.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value SecondaryWeaponMagazine(Value rightInstance)
            {
                return new Value(GameValueMethods.SecondaryWeaponMagazine(rightInstance));
            }

            /// <summary>
            /// Selects an element from an array, config entry from Config or substring from a string or a range from an array.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value string</returns>
            public static Value Select(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.Select(leftInstance, rightInstance));
            }

            /// <summary>
            /// Find the places with the maximum value of expression in the given area. Places can be on water. Results are sorted by value. Search pattern is randomised every command execution.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value SelectBestPlaces(Value rightInstance)
            {
                return new Value(GameValueMethods.SelectBestPlaces(rightInstance));
            }

            /// <summary>
            /// Selects a subject page in the diary. The subject page is selected but the command does not open the map by default, which could be opened with openMap if necessary.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value bool</returns>
            public static Value SelectDiarySubject(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SelectDiarySubject(leftInstance, rightInstance));
            }

            /// <summary>
            /// Returns a list of currently selected editor objects.  Some Old Editor Command
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SelectedEditorObjects(Value rightInstance)
            {
                return new Value(GameValueMethods.SelectedEditorObjects(rightInstance));
            }

            /// <summary>
            /// Select an editor object. Does not un-select previously selected objects.  Some Old Editor Command
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value any</returns>
            public static Value SelectEditorObject(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SelectEditorObject(leftInstance, rightInstance));
            }

            /// <summary>
            /// Returns the list of model selections. When using default syntax, the named selections are returned from the first LOD only (LOD index 0). Alternative syntax allows to select LOD by name or by LOD resolution. ⚠Sometimes internally "ViewGeometry" can be equal to "Geometry", and "FireGeometry" could be equal to "ViewGeometry". In order to pinpoint the actual LOD, use allLODs and LOD resolution as argument for selecting the LOD.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value SelectionNames(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SelectionNames(leftInstance, rightInstance));
            }

            /// <summary>
            /// Returns selection position in model space pertaining to the current animation in render time scope. When the default syntax is used, command searches first in Memory LOD, then in Geometry LOD, FireGeometry LOD, LandContact LOD, HitPoints LOD and finally in ViewGeometry LOD and returns the first matching find. The second syntax allows to specify which one of these LODs to search in instead. ⚠Sometimes internally "ViewGeometry" could be equal to "Geometry", and "FireGeometry" could be equal to "ViewGeometry". In order to pinpoint the actual LOD, use allLODs and LOD resolution as argument for selecting the LOD.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value SelectionPosition(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SelectionPosition(leftInstance, rightInstance));
            }

            /// <summary>
            /// Searches for selection in the object model's LOD level, and returns the Direction and Up vectors in model space.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value SelectionVectorDirAndUp(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SelectionVectorDirAndUp(leftInstance, rightInstance));
            }

            /// <summary>
            /// Select the group's leader. Group locality can be checked with local command and group ownership with groupOwner command. ⚠An invalid combination can be provided to this command, e.g unitName not being part of group. In that case: unitName will be leader of group, but will not be able to command them if unitName is deleted or killed, leader of group will be objNull and will not automatically be reassigned.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SelectLeader(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SelectLeader(leftInstance, rightInstance));
            }

            /// <summary>
            /// Returns the array element with maximum numerical value. Engine solution to BIS_fnc_greatestNum and BIS_fnc_findExtreme. Therefore it is expected that supplied array consists of Numbers only. Booleans however are also supported and will be evaluated as Numbers: true - 1, false - 0.  nil value treated as 0.  ⚠Other non Number elements (not recommended) will be evaluated as 0 and Bad conversion: scalar message will be logged into .rpt.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value any</returns>
            public static Value SelectMax(Value rightInstance)
            {
                return new Value(GameValueMethods.SelectMax(rightInstance));
            }

            /// <summary>
            /// Returns the array element with minimum numerical value. Engine solution to BIS_fnc_lowestNum and BIS_fnc_findExtreme. Therefore it is expected that supplied array consists of Numbers only.  Booleans however are also supported and will be evaluated as Numbers: true - 1, false - 0. nil value treated as 0.  ⚠Other non Number elements (not recommended) will be evaluated as 0 and Bad conversion: scalar message will be logged into .rpt.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value any</returns>
            public static Value SelectMin(Value rightInstance)
            {
                return new Value(GameValueMethods.SelectMin(rightInstance));
            }

            /// <summary>
            /// Switches player to no unit, makes player return objNull.
            /// </summary>
            /// <returns>Value nothing</returns>
            public static Value SelectNoPlayer()
            {
                return new Value(GameValueMethods.SelectNoPlayer());
            }

            /// <summary>
            /// Move player into given unit. Some usage advices: Avoid using selectPlayer on editor-placed units in multiplayer, as it may, on occasion, lead to some undefined behaviour. If you need to selectPlayer into another unit, consider creating a unit dynamically.Before Arma 3 it was possible to selectPlayer another player-controlled unit, leading to control issues. ⚠Creating and immediately selecting player into newly created unit could cause all sort of problems due to possible delay in unit initialisation. Give the unit some time to propagate properly on the network before using this command on it.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SelectPlayer(Value rightInstance)
            {
                return new Value(GameValueMethods.SelectPlayer(rightInstance));
            }

            /// <summary>
            /// Returns a random element from the given array. Engine solution to BIS_fnc_selectRandom
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value any</returns>
            public static Value SelectRandom(Value rightInstance)
            {
                return new Value(GameValueMethods.SelectRandom(rightInstance));
            }

            /// <summary>
            /// Returns a random element from the given array according to assigned weights. Engine solution to BIS_fnc_selectRandomWeighted. A few notes: Negative weights are not supported If an item's weight is 0, the item is ignored The weights don't have to total to 1 If numbers of items and weights do not match, the shortest array is used A single array Syntax is slightly faster than Alt Syntax
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value any</returns>
            public static Value SelectRandomWeighted(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SelectRandomWeighted(leftInstance, rightInstance));
            }

            /// <summary>
            /// Selects the given weapon.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value bool_nothing</returns>
            public static Value SelectWeapon(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SelectWeapon(leftInstance, rightInstance));
            }

            /// <summary>
            /// Selects the given weapon on the specified turret. Use turret path [-1] for the driver's turret.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SelectWeaponTurret(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SelectWeaponTurret(leftInstance, rightInstance));
            }

            /// <summary>
            /// Send the command to the list of clients.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SendAUMessage(Value rightInstance)
            {
                return new Value(GameValueMethods.SendAUMessage(rightInstance));
            }

            /// <summary>
            /// Sends a simple command to the vehicle's driver / gunner (air vehicles ignore it). See also vehicleMoveInfo.⚠Doesn't seem to work if AI driver is alone, needs another unit in the vehicle (could be another AI or player) that is set as setEffectiveCommander. If driver is effectiveCommander it will refuse any drive commands. Due to some sort of a bug when vehicle is ordered turning ("LEFT" or "RIGHT"), it locks the vehicle ability to respond to any other commands properly. Always use "STOPTURNING" to cancel turning before issuing other move commands Gunner commands Driver Move commands Driver Turn commands "FIRE" "CEASE FIRE" "MANUAL FIRE" "CANCEL MANUAL FIRE" "KEY FIRE" "FORWARD" - move forward "FAST" - move forward, fast "SLOW" - move forward, slow "STOP" - stop moving forward or backward "BACK" - move backward "KEY UP" "KEY DOWN" "KEY FAST" "KEY SLOW" "LEFT" - turn left, while moving or not "RIGHT" - turn right, while moving or not 1.78 "STOPTURNING" cancel turning (special case, normally would be called by the engine when LEFT or RIGHT turn key is released by the player)
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SendSimpleCommand(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SendSimpleCommand(leftInstance, rightInstance));
            }

            /// <summary>
            /// Create a new AI task (subtask of parentTask). Type is name of registered task type.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value task</returns>
            public static Value SendTask(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SendTask(leftInstance, rightInstance));
            }

            /// <summary>
            /// Send a result of the task to the task sender.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SendTaskResult(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SendTaskResult(leftInstance, rightInstance));
            }

            /// <summary>
            /// Send message to given address using UDP protocol. Returns false if the message has not been delivered  ⚠Not implemented (see the talk page for more info).
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value bool</returns>
            public static Value SendUDPMessage(Value rightInstance)
            {
                return new Value(GameValueMethods.SendUDPMessage(rightInstance));
            }

            /// <summary>
            /// A getter for enableSentences.
            /// </summary>
            /// <returns>Value bool</returns>
            public static Value SentencesEnabled()
            {
                return new Value(GameValueMethods.SentencesEnabled());
            }

            /// <summary>
            /// Executes the given server command. Available commands for execution can be found with serverCommandAvailable Commands that can be executed can be found with serverCommandExecutable ⚠If serverCommand is executed on a client, it must be executed from UI context, such as "onButtonDown" or similar events (see User Interface Event Handlers).
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value bool</returns>
            public static Value ServerCommand(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.ServerCommand(leftInstance, rightInstance));
            }

            /// <summary>
            /// Returns true if given serverCommand is available on current machine, false if not. Arma 3 Multiplayer Server Commands Available to Client Voted Admin Logged Admin Server Host #login, #userlist,  #beclient,  #vote #kick, #debug #lock, #unlock, #maxping, #maxdesync, #maxpacketloss #logout, #restart, #mission, #missions, #reassign, #monitor, #init #shutdown, #restartserver, #exec, #beserver, #monitords, #logentities, #exportjipqueue Specific builds only: #captureframe, #enabletest, #disabletest To check if a server command can be executed in the current environment, use serverCommandExecutable. The table above does not apply to the command's password variant on a dedicated server as everything is available to it.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value bool</returns>
            public static Value ServerCommandAvailable(Value rightInstance)
            {
                return new Value(GameValueMethods.ServerCommandAvailable(rightInstance));
            }

            /// <summary>
            /// Returns true if the serverCommand can be performed on the machine and in this exact environment, otherwise false. serverCommand can be executed only from User Interface Event Handlers, and this command also checks if that's the case.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value bool</returns>
            public static Value ServerCommandExecutable(Value rightInstance)
            {
                return new Value(GameValueMethods.ServerCommandExecutable(rightInstance));
            }

            /// <summary>
            /// Returns name of the hosting server in MP, "" in SP.
            /// </summary>
            /// <returns>Value string</returns>
            public static Value ServerName()
            {
                return new Value(GameValueMethods.ServerName());
            }

            /// <summary>
            /// Returns server's namespace. This namespace is only available on the server for the server's uptime duration (same as uiNamespace). Server event handlers, which are available in server config, all use this namespace.
            /// </summary>
            /// <returns>Value namespace</returns>
            public static Value ServerNamespace()
            {
                return new Value(GameValueMethods.ServerNamespace());
            }

            /// <summary>
            /// Returns the time since last server restart, synced to all clients in MP. The syncing is happening every 5 minutes, but you can force the next sync earlier by executing estimatedTimeLeft command. The time returned is also different to the time returned by time and diag_tickTime commands on server. Returns 0 in SP. Known issues before Arma 3 v1.86:  Both server and clients showed the same value when synced. The only time it was not synced was on the server, right after server restart and only for the first 300 seconds. Client side was synced from the start
            /// </summary>
            /// <returns>Value scalar</returns>
            public static Value ServerTime()
            {
                return new Value(GameValueMethods.ServerTime());
            }

            /// <summary>
            /// Changes the element at the given zero-based index of the array.  If the index is out of bounds, the array will resize to incorporate the index as its last value, padding with nil as necessary (see Example 4).
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value bool</returns>
            public static Value Set(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.Set(leftInstance, rightInstance));
            }

            /// <summary>
            /// Sets one of entity attributes. For the list of all attributes with their properties see Setting Attributes. ⚠Attributes are available only within the Eden Editor workspace. You cannot access them in scenario preview or exported scenario!
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value bool</returns>
            public static Value Set3DENAttribute(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.Set3DENAttribute(leftInstance, rightInstance));
            }

            /// <summary>
            /// Set entity attributes. An attribute is identified by its property (data when it is engine-drive attribute) value in config. For the list of all attributes with their properties, see Setting Attributes. ⚠Attributes are available only within the Eden Editor workspace and cannot be accessed in scenario preview or exported scenario!
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value bool</returns>
            public static Value Set3DENAttributes(Value rightInstance)
            {
                return new Value(GameValueMethods.Set3DENAttributes(rightInstance));
            }

            /// <summary>
            /// Sets the grid increment for the given transformation type.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value Set3DENGrid(Value rightInstance)
            {
                return new Value(GameValueMethods.Set3DENGrid(rightInstance));
            }

            /// <summary>
            /// Toggle visibility of Eden Editor icons.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value Set3DENIconsVisible(Value rightInstance)
            {
                return new Value(GameValueMethods.Set3DENIconsVisible(rightInstance));
            }

            /// <summary>
            /// Set layer for Eden Entity.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value bool</returns>
            public static Value Set3DENLayer(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.Set3DENLayer(leftInstance, rightInstance));
            }

            /// <summary>
            /// Toggle visibility of Eden Editor lines.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value Set3DENLinesVisible(Value rightInstance)
            {
                return new Value(GameValueMethods.Set3DENLinesVisible(rightInstance));
            }

            /// <summary>
            /// Sets the new type of Logic object(s). For other objects use set3DENObjectType.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value Set3DENLogicType(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.Set3DENLogicType(leftInstance, rightInstance));
            }

            /// <summary>
            /// Set scenario attribute. An attribute is identified by its property (data when it is engine-drive attribute) value in config. For the list of all attributes with their properties, see Setting Attributes. ⚠Attributes are available only within the Eden Editor workspace. They cannot be accessed in scenario preview or exported scenario!
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value Set3DENMissionAttribute(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.Set3DENMissionAttribute(leftInstance, rightInstance));
            }

            /// <summary>
            /// Set scenario attributes. An attribute is identified by its property (data when it is an engine-driven attribute) value in config. For the list of all attributes with their properties, see Mission Attributes. ⚠Attributes are available only within the Eden Editor workspace. You cannot access them in scenario preview or exported scenario!
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value Set3DENMissionAttributes(Value rightInstance)
            {
                return new Value(GameValueMethods.Set3DENMissionAttributes(rightInstance));
            }

            /// <summary>
            /// Enables or disables trigger area visibility.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value Set3DENModelsVisible(Value rightInstance)
            {
                return new Value(GameValueMethods.Set3DENModelsVisible(rightInstance));
            }

            /// <summary>
            /// Sets the classname of one or more given Eden Editor objects. For Logic objects use set3DENLogicType.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value Set3DENObjectType(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.Set3DENObjectType(leftInstance, rightInstance));
            }

            /// <summary>
            /// 
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value Set3DENSelected(Value rightInstance)
            {
                return new Value(GameValueMethods.Set3DENSelected(rightInstance));
            }

            /// <summary>
            /// Set simulation acceleration coefficient. May also be used to slow time in cutscenes.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SetAccTime(Value rightInstance)
            {
                return new Value(GameValueMethods.SetAccTime(rightInstance));
            }

            /// <summary>
            /// Sets the collective pitch control to a specific position, regardless of input devices (until those are changed). 0: collective fully down ~0.7: approximate stable hover position 1: collective fully up For this command to have any effect, the Advanced Flight Model (AFM) has to be enabled. AFM status can be checked with difficultyEnabledRTD.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SetActualCollectiveRTD(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SetActualCollectiveRTD(leftInstance, rightInstance));
            }

            /// <summary>
            /// Sets a wanted throttle position - works only on player's vehicle.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SetAirplaneThrottle(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SetAirplaneThrottle(leftInstance, rightInstance));
            }

            /// <summary>
            /// Set owning side of the airport. ID is the number to identify which airport on the island you want to check.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SetAirportSide(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SetAirportSide(leftInstance, rightInstance));
            }

            /// <summary>
            /// Sets custom ammo count in the currently loaded magazine of the specified weapon or muzzle.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SetAmmo(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SetAmmo(leftInstance, rightInstance));
            }

            /// <summary>
            /// Set amount of ammo resources in cargo space of a rearm vehicle. Ammo resource is used to resupply vehicles that take ammo. Soldiers use individual magazines instead. Amount: 1 is full cargo. The actual quantity to work with is determined by the model's class in CfgVehicles
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SetAmmoCargo(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SetAmmoCargo(leftInstance, rightInstance));
            }

            /// <summary>
            /// Set count of ammo in magazine on pylon (supports pylon name since Arma 3 v1.94)
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SetAmmoOnPylon(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SetAmmoOnPylon(leftInstance, rightInstance));
            }

            /// <summary>
            /// Sets a coefficient for animation speed (0.5 will play animations half the speed, 2 twice the speed). Doesn't affect upper body animations (reloading, etc.)
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SetAnimSpeedCoef(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SetAnimSpeedCoef(leftInstance, rightInstance));
            }

            /// <summary>
            /// Sets custom eye accommodation camera aperture. If HDR is enabled, when setAperture value is used it also forces setApertureNew to the following values: [value, value, value, 1]. Execute setApertureNew after setAperture to override this default mechanic. ⚠The aperture is set to default by the engine at the mission start. If you set it before the mission started it will reset like it never happened. Make sure you set it at the right time (see Example 2).
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SetAperture(Value rightInstance)
            {
                return new Value(GameValueMethods.SetAperture(rightInstance));
            }

            /// <summary>
            /// Sets custom camera aperture when HDR is enabled ([-1] to do it automatically). Provided values should be set such as minimum <= standard <= maximum. This command has to be executed after mission start: be sure to use e.g sleep 0.1; for it to take effect. If HDR is enabled (it is enabled by default), when setAperture value is used it also forces setApertureNew to the following values: [value, value, value, 1]. Execute setApertureNew after setAperture to override this default mechanic.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SetApertureNew(Value rightInstance)
            {
                return new Value(GameValueMethods.SetApertureNew(rightInstance));
            }

            /// <summary>
            /// Stores passed number into [USERNAME].ArmaXProfile file, where it assigns it as a value to armoryPoints entry. If entry doesn't exist, it is created.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SetArmoryPoints(Value rightInstance)
            {
                return new Value(GameValueMethods.SetArmoryPoints(rightInstance));
            }

            /// <summary>
            /// Returns a Structured Text created from the given structured text and sets  attributes to the given values. ⚠Even though command accepts plain String too, the argument should be Structured Text in order for the set attributes to have an effect. Additionally the result of the command should be fed to composeText (See Example 1) or formatText.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value text</returns>
            public static Value SetAttributes(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SetAttributes(leftInstance, rightInstance));
            }

            /// <summary>
            /// Sets UAV autonomous mode.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value bool</returns>
            public static Value SetAutonomous(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SetAutonomous(leftInstance, rightInstance));
            }

            /// <summary>
            /// Sets individual unit behaviour on every unit in a group. ⚠This command doesn't set AI Group behaviour, see setCombatBehaviour or setBehaviourStrong for this. See AI Behaviour for details of the effect of this command on AI units. Comparison of Behaviour commands Command Applies To setBehaviour Every unit in the group, but not the group itself setBehaviourStrong Every unit in the group, and the group itself setCombatBehaviour If argument is Object, only that unit, and if argument is Group, the group itself (not its units)
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SetBehaviour(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SetBehaviour(leftInstance, rightInstance));
            }

            /// <summary>
            /// Sets individual unit behaviour on every unit in a group and additionally tries to force this behaviour to the unit's group. Alternatively see setCombatBehaviour. See AI Behaviour for details of the effect of this command on AI units. Comparison of Behaviour commands Command Applies To setBehaviour Every unit in the group, but not the group itself setBehaviourStrong Every unit in the group, and the group itself setCombatBehaviour If argument is Object, only that unit, and if argument is Group, the group itself (not its units)
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SetBehaviourStrong(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SetBehaviourStrong(leftInstance, rightInstance));
            }

            /// <summary>
            /// Sets for how many seconds injured unit leaves blood trail. The unit damage must be >= 0.1 for this command to have an effect, otherwise, the getBleedingRemaining will return 0 and no blood trail is left behind.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SetBleedingRemaining(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SetBleedingRemaining(leftInstance, rightInstance));
            }

            /// <summary>
            /// Enable landing gear wheel brakes for a helicopter. value 0: brakes off value 1: brakes on index 1: left wheels index 2: right wheels index 3: both sides For this command to have any effect, the Advanced Flight Model (AFM) has to be enabled. AFM status can be checked with difficultyEnabledRTD. This command is implemented, but not fully supported.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SetBrakesRTD(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SetBrakesRTD(leftInstance, rightInstance));
            }

            /// <summary>
            /// Set camera interest for given entity. Camera interest is by default 0. Any unit which is speaking has its camera interest raised to 50. Camera interest is used to focus camera to control depth of field in cutscenes. Combination of camera interest, unit position of the screen, unit movement, unit type, and some other properties is used to determine which unit to focus at. Higher camera interest increases the chance of the unit being focused.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SetCameraInterest(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SetCameraInterest(leftInstance, rightInstance));
            }

            /// <summary>
            /// Sets camera shake default parameters.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SetCamShakeDefParams(Value rightInstance)
            {
                return new Value(GameValueMethods.SetCamShakeDefParams(rightInstance));
            }

            /// <summary>
            /// Sets camera shake parameters. Will not have any effect until shake is started via addCamShake.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SetCamShakeParams(Value rightInstance)
            {
                return new Value(GameValueMethods.SetCamShakeParams(rightInstance));
            }

            /// <summary>
            /// 
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SetCamUseTI(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SetCamUseTI(leftInstance, rightInstance));
            }

            /// <summary>
            /// Mark a unit as captive. If unit is a vehicle, commander is marked. A captive unit: is seen as belonging to the civilian Side will not be fired upon will still shoot at its real side's enemies will make its killer earn/lose score/rating as usual will not get its weapons removed (see removeAllWeapons) will not trigger "detected by" conditions for its original Side. The number used as status can be retrieved by captiveNum to keep track of the captivity status at a finer resolution (e.g. handcuffed, grouped, etc).
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SetCaptive(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SetCaptive(leftInstance, rightInstance));
            }

            /// <summary>
            /// Changes the center of mass of an object smoothly during the given time (in seconds). A time of zero (or using the alternative syntax) means an immediate change.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SetCenterOfMass(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SetCenterOfMass(leftInstance, rightInstance));
            }

            /// <summary>
            /// Switches collision lights of a vehicle on/off.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SetCollisionLight(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SetCollisionLight(leftInstance, rightInstance));
            }

            /// <summary>
            /// Sets an individual unit entity behaviour (main syntax) or a group entity behaviour (alternative syntax). The group in this case is a Group entity and not a simple collection of units. To retrieve unit or group behaviour see combatBehaviour. The behaviour is one of:  "CARELESS" "SAFE" "AWARE" "COMBAT" "STEALTH" See AI Behaviour for details of the effect of this command on AI units. Group behaviour usually is "CARELESS" or "SAFE" Comparison of Behaviour commands Command Applies To setBehaviour Every unit in the group, but not the group itself setBehaviourStrong Every unit in the group, and the group itself setCombatBehaviour If argument is Object, only that unit, and if argument is Group, the group itself (not its units)
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SetCombatBehaviour(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SetCombatBehaviour(leftInstance, rightInstance));
            }

            /// <summary>
            /// Sets AI  group combat mode (engagement rules). For individual unit's combat mode see setUnitCombatMode. Mode may be one of the following:  "BLUE" : Never fire, keep formation "GREEN" : Hold fire, keep formation "WHITE" : Hold fire, engage at will/loose formation "YELLOW" : Fire at will, keep formation "RED" : Fire at will, engage at will/loose formation See Combat Modes for more information on combat modes.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SetCombatMode(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SetCombatMode(leftInstance, rightInstance));
            }

            /// <summary>
            /// This command sets random heading on the player's compass (both in map and in 3D view) with given frequency, which is also randomised.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SetCompassOscillation(Value rightInstance)
            {
                return new Value(GameValueMethods.SetCompassOscillation(rightInstance));
            }

            /// <summary>
            /// Sets the distance to keep to the vehicle which is in front. This command has to be applied to all vehicles in a convoy in order to have a separation of, for example, 50 m. Vehicles in a convoy can also have different distances. It's recommended that small values (<10m) should only be used for slowly moving convoys, otherwise AI driven vehicles will leave the road frequently to avoid collisions
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SetConvoySeparation(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SetConvoySeparation(leftInstance, rightInstance));
            }

            /// <summary>
            /// Limits or sets local player-controlled vehicle's speed through cruise control. this command only works on CarX, TankX, ShipX simulation vehicles this command is implemented using a PID controller overwriting the vehicle's thrust/brakes input Speed Limiter Cruise Control the vehicle does not accelerate by itself manually accelerating is required to move forward accelerating beyond set speed limit is restricted by the PID controller applying brakes does not disable Speed Limiter behaviour: if the speed is over 120% the set limit, the vehicle will apply 100% of braking and limit acceleration to 0% if the speed is below 80% the set limit, the acceleration and braking are untouched between 80 and 120%, the PID controller limits the acceleration and applies brakes if required the vehicle accelerates by itself manually accelerating is possible accelerating above set speed limit is possible applying brakes disables Cruise Control behaviour: if the speed is over 120% the set limit, the vehicle will apply 100% of braking if the speed is below 80% the set limit, the vehicle will apply 100% of acceleration between 80 and 120%, the PID controller manages the speed ⚠This command should only be called to change values and not be called every frame, as it resets the PID controller.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SetCruiseControl(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SetCruiseControl(leftInstance, rightInstance));
            }

            /// <summary>
            /// Sets maximal (ATL) height to which curator camera can move.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SetCuratorCameraAreaCeiling(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SetCuratorCameraAreaCeiling(leftInstance, rightInstance));
            }

            /// <summary>
            /// Sets coef for some action (coef have to be bigger than -1 000 000, anything lower is considered as disabled action).
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SetCuratorCoef(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SetCuratorCoef(leftInstance, rightInstance));
            }

            /// <summary>
            /// Set whether curator can edit in all editing areas (true) or outside of them (false).
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SetCuratorEditingAreaType(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SetCuratorEditingAreaType(leftInstance, rightInstance));
            }

            /// <summary>
            /// Sets cost of waypoints (used for placing, editing and deleting).
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SetCuratorWaypointCost(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SetCuratorWaypointCost(leftInstance, rightInstance));
            }

            /// <summary>
            /// Sets given channel as current chat channel. Scripted way of selecting desired channel on the UI. The given channel may be disabled (see enableChannel), this is why this command returns boolean, true on success or false on failure.  Channel ID number correspondence Default Channels Custom Channels Global Side Command Group Vehicle Direct CC 1 CC 2 CC 3 CC 4 CC 5 CC 6 CC 7 CC 8 CC 9 CC 10 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 For Custom Radio (see radioChannelCreate)
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value bool</returns>
            public static Value SetCurrentChannel(Value rightInstance)
            {
                return new Value(GameValueMethods.SetCurrentChannel(rightInstance));
            }

            /// <summary>
            /// Set the task as a current task of the person.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SetCurrentTask(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SetCurrentTask(leftInstance, rightInstance));
            }

            /// <summary>
            /// Sets the currently active waypoint for a group.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SetCurrentWaypoint(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SetCurrentWaypoint(leftInstance, rightInstance));
            }

            /// <summary>
            /// Set custom aim precision coefficient for weapon sway
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SetCustomAimCoef(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SetCustomAimCoef(leftInstance, rightInstance));
            }

            /// <summary>
            /// 
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SetCustomMissionData(Value rightInstance)
            {
                return new Value(GameValueMethods.SetCustomMissionData(rightInstance));
            }

            /// <summary>
            /// Sets value of the specified custom sound controller to be used in simple expressions in config. Returns true if value was set to the controller, false if command fails, for example if vehicle is not a transport or controller name is not recognised. ⚠Custom sound controller name is case sensitive and of the following format: format ["CustomSoundController/// </summary>", _number]; Where _number is a number from 1 to getCustomSoundControllerCount (currently 32)
            /// <param name="rightInstance"></param>
            /// <returns>Value bool</returns>
            public static Value SetCustomSoundController(Value rightInstance)
            {
                return new Value(GameValueMethods.SetCustomSoundController(rightInstance));
            }

            /// <summary>
            /// Add virtual custom weight to a helicopter's center of gravity. This can be used to simulate added internal payload for specific scenarios, and affects the flight model. For this command to have any effect, the Advanced Flight Model (AFM) has to be enabled. AFM status can be checked with difficultyEnabledRTD.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SetCustomWeightRTD(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SetCustomWeightRTD(leftInstance, rightInstance));
            }

            /// <summary>
            /// Event Handler Triggered Hit HandleDamage Killed MPKilled Sets the damage (or lack thereof) of an object/unit. The alternative syntax allows to skip destruction effects for vehicles and buildings. Since Arma 3 v2.12 it is possible to influence trees, poles and walls fall direction by supplying the killer entity param - the fall direction will then be away from killer's position. In multiplayer, the killer argument is ignored if the command is not executed on the server unless it targets trees, walls or poles - see Syntax 2 and Example 3.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SetDamage(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SetDamage(leftInstance, rightInstance));
            }

            /// <summary>
            /// Damages/hurts or repairs/heals object/unit. Damage 0 means fully functional, damage 1 means completely destroyed / dead. ⚠Do not use this command. Use setDamage instead!
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SetDammage(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SetDammage(leftInstance, rightInstance));
            }

            /// <summary>
            /// Sets mission date and time. Players joining after mission start will get the current server date including the year.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SetDate(Value rightInstance)
            {
                return new Value(GameValueMethods.SetDate(rightInstance));
            }

            /// <summary>
            /// Sets debriefing title, text, subtitle, picture and background for a mission ending. The end type could be the engine-defined ("CONTINUE", "KILLED", "LOSER", "END1", "END2", "END3", "END4", "END5", "END6"), config-defined (see CfgDebriefing) or, with an alternative syntax of this command, any String. Given texts will be used to replace the corresponding texts on the debriefing screen.  ⚠In order to benefit from alternative syntax functionality, there will have to be at least 3 arguments passed to the command. 2 arguments will trigger the old behaviour.  
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SetDebriefingText(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SetDebriefingText(leftInstance, rightInstance));
            }

            /// <summary>
            /// Sets the position and direction for the camera used after camera is set on no object (log out view when leaving MP game for example)
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SetDefaultCamera(Value rightInstance)
            {
                return new Value(GameValueMethods.SetDefaultCamera(rightInstance));
            }

            /// <summary>
            /// Set the destination for path planning of the pilot. Possible values for planningMode are: "DoNotPlan" - used when not moving "DoNotPlanFormation" - used in formation when simple path testing is used "LEADER PLANNED" - used for formation leader (full path finding used) "LEADER DIRECT" - used for DirectGo (like getin, supply) "FORMATION PLANNED" - used in formation when full path finding is used "VEHICLE PLANNED" - used for vehicle driver Works best when used on agents. Using "LEADER PLANNED" will trigger "PathCalculated"  Event Handler
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SetDestination(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SetDestination(leftInstance, rightInstance));
            }

            /// <summary>
            /// Sets the detail texture map blend pars. Allows for smooth transition between detailed and undetailed terrain texture at distance. If noDetail > fullDetail, the texture detail will incur smooth transition in the area between the thresholds. If noDetail <= fullDetail, there will be obvious visible edge between texture detail changes at fullDetail distance.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SetDetailMapBlendPars(Value rightInstance)
            {
                return new Value(GameValueMethods.SetDetailMapBlendPars(rightInstance));
            }

            /// <summary>
            /// Set text of a log record.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SetDiaryRecordText(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SetDiaryRecordText(leftInstance, rightInstance));
            }

            /// <summary>
            /// Sets a picture to be displayed on the right of the Diary subject. The picture can also be set during custom Diary subject  creation, but this command also allows to change icon for the fixed subjects, like "Tasks", "Diary", "Units", "Players" and "Statistics".
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SetDiarySubjectPicture(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SetDiarySubjectPicture(leftInstance, rightInstance));
            }

            /// <summary>
            /// Sets object heading. Angles are measured in degrees clockwise from north; the regular range goes from 0 to 360 (0° = N, 90° = E, 180° = S, 270° = W). Negative angles represent counter-clockwise angles. ⚠This command resets the object's velocity and vectorUp! In some earlier titles (Operation Flashpoint?), this command was LELocal.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SetDir(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SetDir(leftInstance, rightInstance));
            }

            /// <summary>
            /// Sets the orientation of a location. The location's area and map icon (if its type uses an icon) will be rotated to this orientation.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SetDirection(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SetDirection(leftInstance, rightInstance));
            }

            /// <summary>
            /// Set the icon to be shown in 2D editor for the specified editor object. If maintain size is false,icon will not scale depending on the scale,of the map. If maintain size is a number,the icon will maintain size,if map scale is below that number. is3D,show line and priority are,optional. Some Old Editor Command
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SetDrawIcon(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SetDrawIcon(leftInstance, rightInstance));
            }

            /// <summary>
            /// Sets the path to follow for AI driver. Note that unitReady will return true even if AI is still driving through the points. Using any other move command (e.g _vehicle move getPosATL _vehicle) or doStop will stop the effect of this command. ⚠This command does not work on air vehicles and boats. Only land vehicles are compatible. (cars, tanks, APCs, etc.) For the command to work properly, the unit must either be an agent, or in the case of normal AI, have been stopped using doStop.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SetDriveOnPath(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SetDriveOnPath(leftInstance, rightInstance));
            }

            /// <summary>
            /// Set interval of emitting particles from particle source. In Arma 3 hardcoded limit of how many particles can exist at the same time is 18000. Correspondence between CfgCloudlets class param name and command param: particleSource setDropInterval interval;
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SetDropInterval(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SetDropInterval(leftInstance, rightInstance));
            }

            /// <summary>
            /// Sets activation distance of Arma 3: Dynamic Simulation for given category.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SetDynamicSimulationDistance(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SetDynamicSimulationDistance(leftInstance, rightInstance));
            }

            /// <summary>
            /// Sets activation distance multiplier of Arma 3: Dynamic Simulation for the given class
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SetDynamicSimulationDistanceCoef(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SetDynamicSimulationDistanceCoef(leftInstance, rightInstance));
            }

            /// <summary>
            /// Sets map mode to MAP,3D or PREVIEW.  Some Old Editor Command
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SetEditorMode(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SetEditorMode(leftInstance, rightInstance));
            }

            /// <summary>
            /// This command defines the level of access a user has to editor objects. "objects" is an array of either Editor Objects (eg ["_unit_0"]) or actual Game Objects (eg [player]). If the array is empty then the command will automatically parse all editor objects. "editorType" is the editor type to effect (eg "unit", "vehicle", "center") or "" for all types. "condition" is an executable string that must evaluate to true or false. If true, the scope of the evaluated editor object will be modified. "_x" can be used in the string as reference to the ingame representation of the currently processed array member. "scope" is one of "HIDE", "VIEW", "SELECT", "LINKTO", "LINKFROM", "ALLNODRAG", "ALLNOTREE", "ALLNOCOPY", "ALLNOSELECT" or "ALL". "subordinatesAlso" is a boolean value. If true then subordinates in the editor will be assigned the same scope as the parent. Some Old Editor Command
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SetEditorObjectScope(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SetEditorObjectScope(leftInstance, rightInstance));
            }

            /// <summary>
            /// The statement is executed when the trigger or waypoint is activated and the effects are launched depending on the result. If the result is a boolean and true, the effect is launched. If the result is an object, the effect is launched if the result is the player or the player vehicle. If the result is an array, the effect is launched if the result contains the player or the player vehicle.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SetEffectCondition(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SetEffectCondition(leftInstance, rightInstance));
            }

            /// <summary>
            /// Sets effectiveCommander of the given vehicle. Effective commander is the person who commands the vehicle, i.e. gives commands to the driver. Every time a person gets in or out of a vehicle, effective commander eligibility is recalculated by the engine based on the current crew. Use this command to force desired effective commander.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SetEffectiveCommander(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SetEffectiveCommander(leftInstance, rightInstance));
            }

            /// <summary>
            /// Sets the RPM of given engines. For this command to have any effect, the Advanced Flight Model (AFM) has to be enabled. AFM status can be checked with difficultyEnabledRTD.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SetEngineRpmRTD(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SetEngineRpmRTD(leftInstance, rightInstance));
            }

            /// <summary>
            /// Set person's face. For a list of available faces, check CfgIdentities. Operation Flashpoint faces Armed Assault faces Arma 2 faces Arma 3 faces Take On Helicopters faces
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SetFace(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SetFace(leftInstance, rightInstance));
            }

            /// <summary>
            /// 
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SetFaceAnimation(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SetFaceAnimation(leftInstance, rightInstance));
            }

            /// <summary>
            /// Sets the person's fatigue, from 0 to 1.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SetFatigue(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SetFatigue(leftInstance, rightInstance));
            }

            /// <summary>
            /// Enable/disable object as a feature/landmark. Possible feature types: 0 - Feature disabled 1 - Object is always visible within object view distance 2 - Object is always visible within terrain view distance The limit is 500 map/static objects and 200 dynamic objects including config features and auto features (flying helicopters, airplanes). When limit is reached, function returns false.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value bool</returns>
            public static Value SetFeatureType(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SetFeatureType(leftInstance, rightInstance));
            }

            /// <summary>
            /// Sets flag position on the flag pole. To animate flag use BIS_fnc_animateFlag.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SetFlagAnimationPhase(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SetFlagAnimationPhase(leftInstance, rightInstance));
            }

            /// <summary>
            /// Sets flag owner. When owner is set to objNull or any object other than a unit of class man or logic, flag is returned to the flagpole. A flag owned by a logic has no visual representation.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SetFlagOwner(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SetFlagOwner(leftInstance, rightInstance));
            }

            /// <summary>
            /// Sets flag Side. A flag may be taken by any unit that is enemy to the side that owns the flag. Just like with setFlagTexture, if the command executed where unit is local effect of the command will be global and JIP compatible.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SetFlagSide(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SetFlagSide(leftInstance, rightInstance));
            }

            /// <summary>
            /// Sets flag texture.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SetFlagTexture(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SetFlagTexture(leftInstance, rightInstance));
            }

            /// <summary>
            /// Smoothly change the fog over given time (in seconds). See also fogParams. This command is MP synchronised, if executed on server, the changes will propagate globally. If executed on client effect is temporary as it will soon change to the server setting.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SetFog(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SetFog(leftInstance, rightInstance));
            }

            /// <summary>
            /// This article is a Stub. You can help BI Community Wiki by expanding it. For this command to have any effect, the Advanced Flight Model (AFM) has to be enabled. AFM status can be checked with difficultyEnabledRTD.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SetForceGeneratorRTD(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SetForceGeneratorRTD(leftInstance, rightInstance));
            }

            /// <summary>
            /// Set group formation.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SetFormation(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SetFormation(leftInstance, rightInstance));
            }

            /// <summary>
            /// Set the current task of the formation member. This command is not available in Arma 2.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SetFormationTask(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SetFormationTask(leftInstance, rightInstance));
            }

            /// <summary>
            /// Sets group formation heading. Accepted heading range is 0 to 360. Formation is facing this direction unless enemy is seen. When group is moving, this value is overridden by movement direction. If the new direction is noticeably different from the old direction (approx +/- 15 degrees), units will change positions changing formationDirection.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SetFormDir(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SetFormDir(leftInstance, rightInstance));
            }

            /// <summary>
            /// Sets how friendly a side is with another. The friendliness is set for one side, not for the other.  See also Side Relations. Since Arma 3 this command can be used mid-mission. Before that it was intended to be used on mission start only, as changing value during mission could cause unexpected errors in AI behaviour (especially for groups already knowing about "switched to enemy" groups).
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SetFriend(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SetFriend(leftInstance, rightInstance));
            }

            /// <summary>
            /// Set if given team member was inserted directly from editor.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SetFromEditor(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SetFromEditor(leftInstance, rightInstance));
            }

            /// <summary>
            /// Set variable to given value in the variable space of given FSM. The FSM handle is the number returned by the execFSM command.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SetFSMVariable(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SetFSMVariable(leftInstance, rightInstance));
            }

            /// <summary>
            /// Sets fuel level.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SetFuel(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SetFuel(leftInstance, rightInstance));
            }

            /// <summary>
            /// Sets fuel amount in cargo space of refuel vehicles. Note that the carrying capacity of each side's refuel trucks differ.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SetFuelCargo(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SetFuelCargo(leftInstance, rightInstance));
            }

            /// <summary>
            /// Sets group icon properties.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SetGroupIcon(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SetGroupIcon(leftInstance, rightInstance));
            }

            /// <summary>
            /// Set group icons parameters.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SetGroupIconParams(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SetGroupIconParams(leftInstance, rightInstance));
            }

            /// <summary>
            /// Sets if group icons raise onGroupIconClick, onGroupIconOverEnter and onGroupIconOverLeave events.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SetGroupIconsSelectable(Value rightInstance)
            {
                return new Value(GameValueMethods.SetGroupIconsSelectable(rightInstance));
            }

            /// <summary>
            /// Sets if group icons added with addGroupIcon are visible on map and in the HUD.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SetGroupIconsVisible(Value rightInstance)
            {
                return new Value(GameValueMethods.SetGroupIconsVisible(rightInstance));
            }

            /// <summary>
            /// 
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SetGroupId(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SetGroupId(leftInstance, rightInstance));
            }

            /// <summary>
            /// A global equivalent of  setGroupId.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SetGroupIdGlobal(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SetGroupIdGlobal(leftInstance, rightInstance));
            }

            /// <summary>
            /// Changes the ownership of a group (and all its units) to a given client. The group leader must not be a player. This command only works when called from the server. Returns true if locality was changed. For agents use setOwner command.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value bool</returns>
            public static Value SetGroupOwner(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SetGroupOwner(leftInstance, rightInstance));
            }

            /// <summary>
            /// Changes the gusts value smoothly during the given time (in seconds). A time of zero means there will be an immediate change. Value is 0 to 1.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SetGusts(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SetGusts(leftInstance, rightInstance));
            }

            /// <summary>
            /// Sets the data for hiding. objectWhereHide can be taken using findCover. hidePosition can be taken using getHideFrom. Command is not functional in Arma 2. ⚠This command is not implemented!
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SetHideBehind(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SetHideBehind(leftInstance, rightInstance));
            }

            /// <summary>
            /// Event Handler Triggered Hit HandleDamage Killed MPKilled Set damage on a part of an object. Some part names are in Czech; see the translation table.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SetHit(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SetHit(leftInstance, rightInstance));
            }

            /// <summary>
            /// Sets the current level of damage for a specific Hit Point. All hit points can be obtained with getAllHitPointsDamage command.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SetHitIndex(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SetHitIndex(leftInstance, rightInstance));
            }

            /// <summary>
            /// Event Handler Triggered Hit HandleDamage Killed MPKilled Set the current level of damage for a specific Hit Point (specified by its config class). This command has no effect when allowDamage is set to false. See also BIS_fnc_setHitPointDamage for setting hit with dependency.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SetHitPointDamage(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SetHitPointDamage(leftInstance, rightInstance));
            }

            /// <summary>
            /// Sets coef used to shift horizon position based on camera height (use 0 to disable shifting).
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SetHorizonParallaxCoef(Value rightInstance)
            {
                return new Value(GameValueMethods.SetHorizonParallaxCoef(rightInstance));
            }

            /// <summary>
            /// Set min/max movement borders displayed in HUD gauges. Use -1 to skip some value.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SetHUDMovementLevels(Value rightInstance)
            {
                return new Value(GameValueMethods.SetHUDMovementLevels(rightInstance));
            }

            /// <summary>
            /// Sets surface humidity. Affects how footsteps sound (dry / wet). humidity is increasing when raining and decreasing when not raining. Exception is if the rain is set with 'snow' flag, then humidity is not updated.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SetHumidity(Value rightInstance)
            {
                return new Value(GameValueMethods.SetHumidity(rightInstance));
            }

            /// <summary>
            /// Sets identity of a person. The identities could be defined in a custom config in Description.ext or in the main config. For a list of available main config values see CfgIdentities.   This command is an aggregate of the following commands: setName, setFace, setSpeaker, setNameSound, setPitch, only the values are loaded from the given config. It also includes value for glasses for which currently there is no direct command, instead there is an inventory command addGoggles.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SetIdentity(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SetIdentity(leftInstance, rightInstance));
            }

            /// <summary>
            /// Sets the importance value of location.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SetImportance(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SetImportance(leftInstance, rightInstance));
            }

            /// <summary>
            /// Opens given component or first component of given component type on specified info panel.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value bool</returns>
            public static Value SetInfoPanel(Value rightInstance)
            {
                return new Value(GameValueMethods.SetInfoPanel(rightInstance));
            }

            /// <summary>
            /// ⚠To set a Group leader, see selectLeader. Set the leader of the given Team. Effect is local, unless both leader unit and team are local to PC on which command is executed, then effect is global.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SetLeader(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SetLeader(leftInstance, rightInstance));
            }

            /// <summary>
            /// Set ambient color of light. This includes surfaces that face away from the light, unlike setLightColor.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SetLightAmbient(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SetLightAmbient(leftInstance, rightInstance));
            }

            /// <summary>
            /// Sets attenuation of light. Standard method of attenuation (1 / (constant + linear*dist + quadratic*dist*dist)). start param represents distance where the attenuation starts to take effects (dist = distance - start).
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SetLightAttenuation(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SetLightAttenuation(leftInstance, rightInstance));
            }

            /// <summary>
            /// Set brightness of light. This command is outdated. Use setLightIntensity instead.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SetLightBrightness(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SetLightBrightness(leftInstance, rightInstance));
            }

            /// <summary>
            /// Set diffuse color of light. Illuminates surfaces that are facing the light.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SetLightColor(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SetLightColor(leftInstance, rightInstance));
            }

            /// <summary>
            /// Sets the lightpoint (directional light #lightreflector)'s cone params.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SetLightConePars(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SetLightConePars(leftInstance, rightInstance));
            }

            /// <summary>
            /// Sets if light can be used during the day.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SetLightDayLight(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SetLightDayLight(leftInstance, rightInstance));
            }

            /// <summary>
            /// Sets max distance where the flare is visible.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SetLightFlareMaxDistance(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SetLightFlareMaxDistance(leftInstance, rightInstance));
            }

            /// <summary>
            /// Sets relative size of the flare for the light.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SetLightFlareSize(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SetLightFlareSize(leftInstance, rightInstance));
            }

            /// <summary>
            /// Sets intensity of light.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SetLightIntensity(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SetLightIntensity(leftInstance, rightInstance));
            }

            /// <summary>
            /// Sets lightpoint in infrared range.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SetLightIR(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SetLightIR(leftInstance, rightInstance));
            }

            /// <summary>
            /// Changes the lightnings value smoothly during the given time (in seconds). A time of zero means there will be an immediate change. NOTE: This command will have no effect (even though the value of lightnings changes) unless Manual Override option is selected in the editor in the Intel, which is normally off.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SetLightnings(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SetLightnings(leftInstance, rightInstance));
            }

            /// <summary>
            /// Sets if light has flare.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SetLightUseFlare(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SetLightUseFlare(leftInstance, rightInstance));
            }

            /// <summary>
            /// Sets the lightpoint (directional light #lightreflector)'s volume shape.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SetLightVolumeShape(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SetLightVolumeShape(leftInstance, rightInstance));
            }

            /// <summary>
            /// Sets parameters for helicopter rotor wash. It affects the visual effect of a rotor's downwash, such as blown particles, vegetation wind effect and area size.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SetLocalWindParams(Value rightInstance)
            {
                return new Value(GameValueMethods.SetLocalWindParams(rightInstance));
            }

            /// <summary>
            /// Sets ammo count to given amount for given turret. ⚠Broken when vehicle has multiple magazines of the same type.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SetMagazineTurretAmmo(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SetMagazineTurretAmmo(leftInstance, rightInstance));
            }

            /// <summary>
            /// Sets the marker alpha. The marker is modified on all computers in a network session. When alpha equals 1, the marker is visible, but if alpha equals 0, then the marker is invisible. Alpha can be numbers and fractions. Multiplayer optimisation: Global marker commands always broadcast the entire marker state over the network. As such, the number of network messages exchanged when creating or editing a marker can be reduced by performing all but the last operation using local marker commands, then using a global marker command for the last change (and subsequent global broadcast of all changes applied to the marker).
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SetMarkerAlpha(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SetMarkerAlpha(leftInstance, rightInstance));
            }

            /// <summary>
            /// Sets the marker alpha.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SetMarkerAlphaLocal(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SetMarkerAlphaLocal(leftInstance, rightInstance));
            }

            /// <summary>
            /// Selects the fill texture for the marker ("RECTANGLE" or "ELLIPSE"). Brush is the name of the subclass in CfgMarkerBrushes. brush can be: "Solid" "SolidFull" (A3 only) "Horizontal" "Vertical" "Grid" "FDiagonal" "BDiagonal" "DiagGrid" "Cross" "Border"  (Not present in A1) "SolidBorder"  (Not present in A1) Multiplayer optimisation: Global marker commands always broadcast the entire marker state over the network. As such, the number of network messages exchanged when creating or editing a marker can be reduced by performing all but the last operation using local marker commands, then using a global marker command for the last change (and subsequent global broadcast of all changes applied to the marker).
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SetMarkerBrush(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SetMarkerBrush(leftInstance, rightInstance));
            }

            /// <summary>
            /// Selects the fill texture for the marker ("RECTANGLE" or "ELLIPSE"). Brush is the name of the subclass in CfgMarkerBrushes. brush can be: "Solid" "SolidFull" (A3 only) "Horizontal" "Vertical" "Grid" "FDiagonal" "BDiagonal" "DiagGrid" "Cross" "Border" (A2/A3 only) "SolidBorder" (OA/A3 only)
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SetMarkerBrushLocal(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SetMarkerBrushLocal(leftInstance, rightInstance));
            }

            /// <summary>
            /// Sets marker color. Marker color names and their corresponding RGBA values for Arma 3 could be found here: Arma 3: CfgMarkerColors Multiplayer optimisation: Global marker commands always broadcast the entire marker state over the network. As such, the number of network messages exchanged when creating or editing a marker can be reduced by performing all but the last operation using local marker commands, then using a global marker command for the last change (and subsequent global broadcast of all changes applied to the marker).
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SetMarkerColor(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SetMarkerColor(leftInstance, rightInstance));
            }

            /// <summary>
            /// Sets marker color for the given marker locally. Marker color names and their corresponding RGBA values for Arma 3 could be found in here: Arma 3: CfgMarkerColors
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SetMarkerColorLocal(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SetMarkerColorLocal(leftInstance, rightInstance));
            }

            /// <summary>
            /// Sets the orientation of the marker. Angle is in degrees. Multiplayer optimisation: Global marker commands always broadcast the entire marker state over the network. As such, the number of network messages exchanged when creating or editing a marker can be reduced by performing all but the last operation using local marker commands, then using a global marker command for the last change (and subsequent global broadcast of all changes applied to the marker).
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SetMarkerDir(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SetMarkerDir(leftInstance, rightInstance));
            }

            /// <summary>
            /// Sets the orientation of the marker.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SetMarkerDirLocal(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SetMarkerDirLocal(leftInstance, rightInstance));
            }

            /// <summary>
            /// Sets a polyline marker's path. Multiplayer optimisation: Global marker commands always broadcast the entire marker state over the network. As such, the number of network messages exchanged when creating or editing a marker can be reduced by performing all but the last operation using local marker commands, then using a global marker command for the last change (and subsequent global broadcast of all changes applied to the marker).
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SetMarkerPolyline(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SetMarkerPolyline(leftInstance, rightInstance));
            }

            /// <summary>
            /// Sets a polyline marker's path. Works only on the computer that executes this command.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SetMarkerPolylineLocal(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SetMarkerPolylineLocal(leftInstance, rightInstance));
            }

            /// <summary>
            /// Moves the marker. If position is given in 3D format, z coordinate is stored with the marker and will be used when marker is passed to commands like createVehicle, createUnit, createAgent, createMine, setVehiclePosition for example. When Object is used for position, its getPosWorld is used. Multiplayer optimisation: Global marker commands always broadcast the entire marker state over the network. As such, the number of network messages exchanged when creating or editing a marker can be reduced by performing all but the last operation using local marker commands, then using a global marker command for the last change (and subsequent global broadcast of all changes applied to the marker).
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SetMarkerPos(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SetMarkerPos(leftInstance, rightInstance));
            }

            /// <summary>
            /// Moves the marker. If position is given in 3D format, z coordinate is stored with the marker and will be used when marker is passed to commands like createVehicle, createUnit, createAgent, createMine, setVehiclePosition for example. When Object is used for position, its getPosWorld is used.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SetMarkerPosLocal(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SetMarkerPosLocal(leftInstance, rightInstance));
            }

            /// <summary>
            /// Sets the shadow property of given marker.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SetMarkerShadow(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SetMarkerShadow(leftInstance, rightInstance));
            }

            /// <summary>
            /// Sets the shadow property of given marker.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SetMarkerShadowLocal(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SetMarkerShadowLocal(leftInstance, rightInstance));
            }

            /// <summary>
            /// Selects shape (actual type) of the marker.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SetMarkerShape(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SetMarkerShape(leftInstance, rightInstance));
            }

            /// <summary>
            /// Selects shape (actual type) of the local marker.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SetMarkerShapeLocal(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SetMarkerShapeLocal(leftInstance, rightInstance));
            }

            /// <summary>
            /// Sets the marker's size. Multiplayer optimisation: Global marker commands always broadcast the entire marker state over the network. As such, the number of network messages exchanged when creating or editing a marker can be reduced by performing all but the last operation using local marker commands, then using a global marker command for the last change (and subsequent global broadcast of all changes applied to the marker).
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SetMarkerSize(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SetMarkerSize(leftInstance, rightInstance));
            }

            /// <summary>
            /// Set marker size.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SetMarkerSizeLocal(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SetMarkerSizeLocal(leftInstance, rightInstance));
            }

            /// <summary>
            /// Sets the text label of an existing marker. Multiplayer optimisation: Global marker commands always broadcast the entire marker state over the network. As such, the number of network messages exchanged when creating or editing a marker can be reduced by performing all but the last operation using local marker commands, then using a global marker command for the last change (and subsequent global broadcast of all changes applied to the marker).
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SetMarkerText(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SetMarkerText(leftInstance, rightInstance));
            }

            /// <summary>
            /// Sets the text label of an existing marker.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SetMarkerTextLocal(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SetMarkerTextLocal(leftInstance, rightInstance));
            }

            /// <summary>
            /// Sets marker type. Marker type is a class name from CfgMarkers. Multiplayer optimisation: Global marker commands always broadcast the entire marker state over the network. As such, the number of network messages exchanged when creating or editing a marker can be reduced by performing all but the last operation using local marker commands, then using a global marker command for the last change (and subsequent global broadcast of all changes applied to the marker).
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SetMarkerType(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SetMarkerType(leftInstance, rightInstance));
            }

            /// <summary>
            /// Sets marker type locally. Marker type is a class name in CfgMarkers.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SetMarkerTypeLocal(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SetMarkerTypeLocal(leftInstance, rightInstance));
            }

            /// <summary>
            /// Changes the mass of a PhysX object. When using the alternative syntax the mass change is gradual during the given time. A time of zero means immediate change.⚠When main syntax is used on local vehicle, the change is global. When alternative syntax is used with time transition on local vehicle, the gradual mass change doesn't happen on remote clients, only final mass is applied after the given time. If you need gradual change on remote clients too,  remote execute setMass globally.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SetMass(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SetMass(leftInstance, rightInstance));
            }

            /// <summary>
            /// Sets maximum load limit for a uniform/vest/backpack containers, vehicle cargo, supply boxes and weapon holders. In MP this command should be executed on the server and will persist on given container for JIP. Cannot be set on a unit, as unit max load value is static config type
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SetMaxLoad(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SetMaxLoad(leftInstance, rightInstance));
            }

            /// <summary>
            /// Sets person's facial expression. To set it back to default, use "". Prior to Arma 3 v2.01.146630 Mimics must be written in all lower case letters.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SetMimic(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SetMimic(leftInstance, rightInstance));
            }

            /// <summary>
            /// Sets a guided missile target. Does not work for all types of missiles. If the target is dead, it is ignored. The target has to be inside the missile's configured targeting cone for the command to work.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value bool</returns>
            public static Value SetMissileTarget(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SetMissileTarget(leftInstance, rightInstance));
            }

            /// <summary>
            /// Sets a guided munition target position. The munition must have manualControl config entry to use this command. The target position has to be inside the missile's configured targeting cone for the command to work.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SetMissileTargetPos(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SetMissileTargetPos(leftInstance, rightInstance));
            }

            /// <summary>
            /// Moves mouse pointer to specified position on the screen. x and y could be any number, but will be clipped so mouse never leaves the screen area.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SetMousePosition(Value rightInstance)
            {
                return new Value(GameValueMethods.SetMousePosition(rightInstance));
            }

            /// <summary>
            /// Defines a music track played on activation. If another track is playing already, this will stop it and start the new track. Track is a subclass name of CfgMusic. In addition, "$STOP$" (stops the current music track) or use playMusic "". When used in a trigger, the track starts on activation but does not automatically stop on deactivation.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SetMusicEffect(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SetMusicEffect(leftInstance, rightInstance));
            }

            /// <summary>
            /// Sets given music track event handler. Will overwrite other music event handlers. 🕖The following information is obsolete. Reason: Use addMusicEventHandler instead as it can stack music event handlers.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SetMusicEventHandler(Value rightInstance)
            {
                return new Value(GameValueMethods.SetMusicEventHandler(rightInstance));
            }

            /// <summary>
            /// Sets the name of a location or a person (person only in single player).
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SetName(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SetName(leftInstance, rightInstance));
            }

            /// <summary>
            /// Sets the nameSound of a person. By default, when giving orders, the units are addressed by their number. When nameSound is set, it will be used instead to address the unit. For example: "Two, hold fire!", one can have: "Miller, hold fire!". See CfgIdentities - NameSounds for common values. Note that any word from configfile >> "RadioProtocolENG" >> "Words" is accepted (e.g "veh_infantry_Sniper_s").
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SetNameSound(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SetNameSound(leftInstance, rightInstance));
            }

            /// <summary>
            /// Set object arguments in mission editor. Some Old Editor Command
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value any</returns>
            public static Value SetObjectArguments(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SetObjectArguments(leftInstance, rightInstance));
            }

            /// <summary>
            /// Sets material of object selection. The selection number is defined through the hiddenselection[] = {} array in the vehicle's config (starting with 0).
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SetObjectMaterial(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SetObjectMaterial(leftInstance, rightInstance));
            }

            /// <summary>
            /// Set the material of the given selection on all computers in a network session.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SetObjectMaterialGlobal(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SetObjectMaterialGlobal(leftInstance, rightInstance));
            }

            /// <summary>
            /// Set the proxy object associated with the given editor object. Some Old Editor Command
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value any</returns>
            public static Value SetObjectProxy(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SetObjectProxy(leftInstance, rightInstance));
            }

            /// <summary>
            /// Scales an attached object or a Simple Object's model - see Example 3 for various configurations' examples.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SetObjectScale(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SetObjectScale(leftInstance, rightInstance));
            }

            /// <summary>
            /// Applies given texture to object's selection. See also Procedural Textures and Retexturing with setObjectTexture. Not all objects can be textured this way. To find out, run getObjectTextures command on an object. Empty array [] usually indicates it cannot be textured. All textures must have a resolution of 2a × 2b (e.g. 16×16, 16×32, 64×256, 512×512, ...). The largest texture size supported by the RV engine is 4096×4096. Supported formats: .pac, .paa, .jpg, .jpeg, .ogg, .ogv
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SetObjectTexture(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SetObjectTexture(leftInstance, rightInstance));
            }

            /// <summary>
            /// Set the texture of the given selection on all computers in a network session. Not all objects can be textured this way. To find out, run getObjectTextures command on an object. Empty array [] usually indicates it cannot be textured. All textures must have a resolution of 2a × 2b (e.g. 16×16, 16×32, 64×256, 512×512, ...). The largest texture size supported by the RV engine is 4096×4096. Supported formats: .pac, .paa, .jpg, .jpeg, .ogg, .ogv
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SetObjectTextureGlobal(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SetObjectTextureGlobal(leftInstance, rightInstance));
            }

            /// <summary>
            /// Sets the rendering distance of objects and shadows.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SetObjectViewDistance(Value rightInstance)
            {
                return new Value(GameValueMethods.SetObjectViewDistance(rightInstance));
            }

            /// <summary>
            /// Sets the optic mode of the current weapon to the given class name or the index.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SetOpticsMode(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SetOpticsMode(leftInstance, rightInstance));
            }

            /// <summary>
            /// Set overcast to given value smoothly during given time (in seconds). Zero time means immediate change. An overcast setting of zero means clear (sunny) weather, and one means storms and rain are very likely. Higher overcast values also result in higher wind speeds.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SetOvercast(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SetOvercast(leftInstance, rightInstance));
            }

            /// <summary>
            /// From server machine, change the ownership of an object to a given client. Using command in an unintended way will log a message to .rpt file. To transfer ownership of all AI units in a group properly, use setGroupOwner instead.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value bool</returns>
            public static Value SetOwner(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SetOwner(leftInstance, rightInstance));
            }

            /// <summary>
            /// Sets oxygen remaining. It has no effect when soldier is not diving. Oxygen remaining is a number between 0 and 1.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SetOxygenRemaining(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SetOxygenRemaining(leftInstance, rightInstance));
            }

            /// <summary>
            /// Updates particle source, creates particles in circle with given radius. Velocity is transformed and added to total velocity.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SetParticleCircle(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SetParticleCircle(leftInstance, rightInstance));
            }

            /// <summary>
            /// Sets particle source parameters using existing particle config from CfgCloudlets class. Use setParticleParams subsequently if you need to overwrite some values. ⚠If CfgCloudlets class contains  simple expressions, they will not be evaluated by this command, which might make the whole class unusable in script.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SetParticleClass(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SetParticleClass(leftInstance, rightInstance));
            }

            /// <summary>
            /// Set fire parameters to particle effect. Note: You need to create emitter at first. Basic parameters of particle effect must be defined too. You can use script commands setParticleClass or setParticleParams to do so (see example). Correspondence between CfgCloudlets class param names and command array of params: particleSource setParticleFire [ coreIntensity, 	coreDistance, 	damageTime ];
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SetParticleFire(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SetParticleFire(leftInstance, rightInstance));
            }

            /// <summary>
            /// Set parameters to particle source. Array is in format ParticleArray.  Since Arma 3 version 1.11.114706 you can use this command to overwrite many values set by setParticleClass, particularity those defined in ParticleArray. Correspondence between CfgCloudlets class param names and command array of params: particleSource setParticleParams [ /* 		String or Array - If string then the name of the particleShape. And following default values are used: 			particleFSNtieth = 1 			particleFSIndex = 0 			particleFSFrameCount = 1 			particleFSLoop = 1 	*/ [ particleShape,			/* String */ particleFSNtieth,		/* Number */ particleFSIndex,		/* Number */ particleFSFrameCount,	/* Number */ particleFSLoop /* Optional - Number. Default: 1 */ ], 	animationName,				/* String */ particleType,				/* String - Enum: Billboard, SpaceObject */ timerPeriod,				/* Number */ lifeTime,					/* Number */ pos3D,						/* 3D Array of numbers as relative position to particleSource or (if object at index 18 is set) object. 									Or (if object at index 18 is set) String as memoryPoint of object. */ moveVelocity,				/* 3D Array of numbers. */ rotationVelocity,			/* Number */ weight,						/* Number */ volume,						/* Number */ rubbing,					/* Number */ sizeOverLifetime,			/* Array of Numbers */ color,						/* Array of Array of RGBA Numbers */ animationSpeed,				/* Array of Number */ randomDirectionPeriod,		/* Number */ randomDirectionIntensity,	/* Number */ onTimerScript,				/* String */ beforeDestroyScript,		/* String */ obj,						/* Object */ angle,						/* Optional Number - Default: 0 */ onSurface,					/* Optional Boolean */ bounceOnSurface,			/* Optional Number */ emissiveColor,				/* Optional Array of Array of RGBA Numbers */ vectorDirOrVectorDirAndUp /* Optional vector dir or [vectorDir, vectorUp] 		Since Arma 3 v1.92 it is possible to set the initial direction of the SpaceObject 		Since Arma 3 v2.12 it is possible to use a [vectorDir, vectorUp] array */ ];
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SetParticleParams(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SetParticleParams(leftInstance, rightInstance));
            }

            /// <summary>
            /// Sets randomization of particle source parameters. Correspondence between CfgCloudlets class param names and command array of params: particleSource setParticleRandom [ lifeTimeVar, 	positionVar, 	moveVelocityVar, 	rotationVelocityVar, 	sizeVar, 	colorVar, 	randomDirectionPeriodVar, 	randomDirectionIntensityVar, 	angleVar, 	bounceOnSurfaceVar ];
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SetParticleRandom(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SetParticleRandom(leftInstance, rightInstance));
            }

            /// <summary>
            /// Sets the direction of object airplane or helicopter pilotCamera (vector in model space).
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SetPilotCameraDirection(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SetPilotCameraDirection(leftInstance, rightInstance));
            }

            /// <summary>
            /// Sets rotation (relative to the centered camera position) of the object airplane or helicopter pilotCamera .
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SetPilotCameraRotation(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SetPilotCameraRotation(leftInstance, rightInstance));
            }

            /// <summary>
            /// Sets an area or target to be tracked by the object airplane or helicopter pilotCamera.  To track an object the vehicle has to have appropriate sensors (scanners) that can detect the given target type. Using objNull will unlock the camera
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value bool</returns>
            public static Value SetPilotCameraTarget(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SetPilotCameraTarget(leftInstance, rightInstance));
            }

            /// <summary>
            /// Switches headlights of a vehicle on/off. Note that the vehicle has to be local, for global variant use Arma 3 Actions "LightOn"/"LightOff"
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SetPilotLight(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SetPilotLight(leftInstance, rightInstance));
            }

            /// <summary>
            /// Sets Render Target's visual effect (Picture-in-Picture). Mode Description Parameters 0 Normal [0] 1 Night Vision [1] 2 Thermal Imaging [2] 3 Color Correction [3, enabled, brightness, contrast, offset, blend [r,g,b,a], lerp [r,g,b,a], rgb [r,g,b,a]] 7 Alt. Thermal Imaging 1 (Inverted) [7] 8 Alt. Thermal Imaging 2 (Green) [8] 9..70 2.10 Alt. Thermal Imaging 3..64 [n]
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SetPiPEffect(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SetPiPEffect(leftInstance, rightInstance));
            }

            /// <summary>
            /// Set the PiP (Picture-in-Picture) view distance. This has no impact if PiP is disabled (see isPiPEnabled).
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SetPiPViewDistance(Value rightInstance)
            {
                return new Value(GameValueMethods.SetPiPViewDistance(rightInstance));
            }

            /// <summary>
            /// Sets the pitch of a persons voice.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SetPitch(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SetPitch(leftInstance, rightInstance));
            }

            /// <summary>
            /// Change the license plates on any vehicle which has plates configured. Max 15 characters are allowed!
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SetPlateNumber(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SetPlateNumber(leftInstance, rightInstance));
            }

            /// <summary>
            /// Create a multiplayer role for the unit. The roles created this way are used for Join In Progress and Team Switch.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SetPlayable(Value rightInstance)
            {
                return new Value(GameValueMethods.SetPlayable(rightInstance));
            }

            /// <summary>
            /// Sets the time interval (in seconds) that the player must wait before respawn. It resets to mission default on mission start. In Single Player or when respawn type is GROUP or SIDE in Multiplayer, setting player respawn time has no effect, and playerRespawnTime will always return -1.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SetPlayerRespawnTime(Value rightInstance)
            {
                return new Value(GameValueMethods.SetPlayerRespawnTime(rightInstance));
            }

            /// <summary>
            /// Sets provided player's Voice over Network (VoN) volume.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SetPlayerVoNVolume(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SetPlayerVoNVolume(leftInstance, rightInstance));
            }

            /// <summary>
            /// Sets object position to format PositionAGLS (over surface). The Z value is used to calculate the nearest surface below the provided position. If the surface is close, it uses the Z position of the surface. Otherwise, Z value becomes the offset from that surface. ⚠It is recommended to avoid this command when placing objects above other objects, due to the unpredictable behavior described above.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SetPos(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SetPos(leftInstance, rightInstance));
            }

            /// <summary>
            /// Sets the object position above sea level. Given position must be in PositionASL format.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SetPosASL(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SetPosASL(leftInstance, rightInstance));
            }

            /// <summary>
            /// Sets the object position. The pos array uses the PositionASL format. The version of the command does not offset based on object center.  ⚠This command was deactivated and has no effect. Use setPosWorld instead.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SetPosASL2(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SetPosASL2(leftInstance, rightInstance));
            }

            /// <summary>
            /// Sets the object position above sea surface. The pos array uses the PositionASLW format.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SetPosASLW(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SetPosASLW(leftInstance, rightInstance));
            }

            /// <summary>
            /// Sets the position of an object relative to the terrain.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SetPosATL(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SetPosATL(leftInstance, rightInstance));
            }

            /// <summary>
            /// Sets the position of a location.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SetPosition(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SetPosition(leftInstance, rightInstance));
            }

            /// <summary>
            /// Sets position of an object based on the model's centre position (see getPosWorld).
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SetPosWorld(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SetPosWorld(leftInstance, rightInstance));
            }

            /// <summary>
            /// Adds/overrides loadout to a vehicle pylon. TransportPylonsComponent in vehicle config and pylonWeapon in the magazine config are required to run.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value bool</returns>
            public static Value SetPylonLoadout(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SetPylonLoadout(leftInstance, rightInstance));
            }

            /// <summary>
            /// Overrides default pylons priorities.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SetPylonsPriority(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SetPylonsPriority(leftInstance, rightInstance));
            }

            /// <summary>
            /// Sets radio trigger menu title text (0 -> 0 -> map radio). Use "NULL" to disable radio slot. Use "" to restore default title
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SetRadioMsg(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SetRadioMsg(leftInstance, rightInstance));
            }

            /// <summary>
            /// Sets rain density smoothly over the given transition time. A transition time of zero means an immediate change. A rain density of zero is no rain, one is maximum rain. Rain is not possible when overcast is less than 0.7. Since Arma 3 this command is multiplayer synchronised: if executed on the server, the changes will propagate globally. if executed on a client, the effect is local, temporary and will soon change to the server setting. Minimum overcast needed for rain in Arma 3 is 0.5. ⚠Alternative syntaxes (Syntax 2 and Syntax 3): set rain particle params. Rain particles params are client-side params and are ignored on dedicated server. Use helper function BIS_fnc_setRain if sync is needed in Multiplayer have a local LELocal effect
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SetRain(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SetRain(leftInstance, rightInstance));
            }

            /// <summary>
            /// Changes the rainbow value smoothly during the given time (in seconds). A time of zero means there will be an immediate change.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SetRainbow(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SetRainbow(leftInstance, rightInstance));
            }

            /// <summary>
            /// Enables/Disables random lip. When enabled, the unit continuously moves its lips as if it is talking.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SetRandomLip(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SetRandomLip(leftInstance, rightInstance));
            }

            /// <summary>
            /// Sets rank of given unit. Before Arma 3 v1.68 and in previous titles, this command was GAGlobal LELocal.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SetRank(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SetRank(leftInstance, rightInstance));
            }

            /// <summary>
            /// Set the shape of a location to be either rectangular or elliptical. Locations default shape is elliptical.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SetRectangular(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SetRectangular(leftInstance, rightInstance));
            }

            /// <summary>
            /// Set amount of repair resources in cargo space of repair vehicle. Amount 1 is full cargo.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SetRepairCargo(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SetRepairCargo(leftInstance, rightInstance));
            }

            /// <summary>
            /// Toggles a helicopter's rotor brake. For this command to have any effect, the Advanced Flight Model (AFM) has to be enabled. AFM status can be checked with difficultyEnabledRTD.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SetRotorBrakeRTD(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SetRotorBrakeRTD(leftInstance, rightInstance));
            }

            /// <summary>
            /// Sets the shadows rendering distance.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SetShadowDistance(Value rightInstance)
            {
                return new Value(GameValueMethods.SetShadowDistance(rightInstance));
            }

            /// <summary>
            /// Sets vehicle and instigator pair for the given projectile.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SetShotParents(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SetShotParents(leftInstance, rightInstance));
            }

            /// <summary>
            /// Sets a location's side. The default side is Unknown. ⚠To change a unit's side, see Notes.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SetSide(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SetSide(leftInstance, rightInstance));
            }

            /// <summary>
            /// Sets task's visibility.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SetSimpleTaskAlwaysVisible(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SetSimpleTaskAlwaysVisible(leftInstance, rightInstance));
            }

            /// <summary>
            /// Set custom data for the task. Tooltip will be drawn in task list on the right side. Description will be drawn in task description panel on the bottom.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SetSimpleTaskCustomData(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SetSimpleTaskCustomData(leftInstance, rightInstance));
            }

            /// <summary>
            /// Attach descriptions to the simple task.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SetSimpleTaskDescription(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SetSimpleTaskDescription(leftInstance, rightInstance));
            }

            /// <summary>
            /// Attach a destination to the simple task.Overrides setSimpleTaskTarget
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SetSimpleTaskDestination(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SetSimpleTaskDestination(leftInstance, rightInstance));
            }

            /// <summary>
            /// Attach a target to the simple task.Overrides setSimpleTaskDestination.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SetSimpleTaskTarget(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SetSimpleTaskTarget(leftInstance, rightInstance));
            }

            /// <summary>
            /// Attach type to the simple task. See Default Task Types.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SetSimpleTaskType(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SetSimpleTaskType(leftInstance, rightInstance));
            }

            /// <summary>
            /// Sets number of simul weather layers, affects quality of simul weather clouds.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SetSimulWeatherLayers(Value rightInstance)
            {
                return new Value(GameValueMethods.SetSimulWeatherLayers(rightInstance));
            }

            /// <summary>
            /// Sets the size (radius)  of a location. The width  is 2 * x, the height is 2 * y.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SetSize(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SetSize(leftInstance, rightInstance));
            }

            /// <summary>
            /// Sets the skill level of given unit. The value of a sub-skill is interpolated into a range defined in CfgAISkill.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SetSkill(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SetSkill(leftInstance, rightInstance));
            }

            /// <summary>
            /// Creates a sling loading from a helicopter to an entity if possible. To unload cargo, pass objNull as second param. FROM object has to be a helicoper, alive with  rope attachment enabled, TO object has to be an entity, alive with  rope attachment enabled.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value bool</returns>
            public static Value SetSlingLoad(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SetSlingLoad(leftInstance, rightInstance));
            }

            /// <summary>
            /// Defines the different sound effects for a trigger or a waypoint. To stop any sound, deactivate the trigger (might take up to 0.5 seconds to stop) or delete the trigger/waypoint (immediate).
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SetSoundEffect(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SetSoundEffect(leftInstance, rightInstance));
            }

            /// <summary>
            /// Sets the speaker of a person.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SetSpeaker(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SetSpeaker(leftInstance, rightInstance));
            }

            /// <summary>
            /// Add speech to location.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SetSpeech(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SetSpeech(leftInstance, rightInstance));
            }

            /// <summary>
            /// Sets group speed mode. If unit is passed as param, unit's group is used. Mode may be one of:  "UNCHANGED" (unchanged) "LIMITED" (half speed) "NORMAL" (full speed, maintain formation) "FULL" (do not wait for any other units in formation)
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SetSpeedMode(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SetSpeedMode(leftInstance, rightInstance));
            }

            /// <summary>
            /// Set units' stamina (seconds until depletion)
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SetStamina(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SetStamina(leftInstance, rightInstance));
            }

            /// <summary>
            /// Sets the scheme used for the Stamina system.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SetStaminaScheme(Value rightInstance)
            {
                return new Value(GameValueMethods.SetStaminaScheme(rightInstance));
            }

            /// <summary>
            /// Sets a value to a given stat.  A list of possible StatNames can be found here: Arma 3: Stat Names Its important to note that most Stats are restricted to scripts and missions in certain paths. For example "ExpWarlockDown" is restricted to scripts in any subdirectory of "a3\Missions_F_Exp\Campaign\Missions\"
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value bool</returns>
            public static Value SetStatValue(Value rightInstance)
            {
                return new Value(GameValueMethods.SetStatValue(rightInstance));
            }

            /// <summary>
            /// Sets the given suppression value for the given unit.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SetSuppression(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SetSuppression(leftInstance, rightInstance));
            }

            /// <summary>
            /// Set system of units. This will only impact gauges from advanced flight model. ⚠This command is buggy: any value other than 0 (metric) will display both units at the same time.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SetSystemOfUnits(Value rightInstance)
            {
                return new Value(GameValueMethods.SetSystemOfUnits(rightInstance));
            }

            /// <summary>
            /// Sets how the target is known to the other centers. They behave like the target was seen age seconds ago. Possible age values are: "ACTUAL", "5 MIN", "10 MIN", "15 MIN", "30 MIN", "60 MIN", "120 MIN" or "UNKNOWN".
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SetTargetAge(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SetTargetAge(leftInstance, rightInstance));
            }

            /// <summary>
            /// Sets the task marker position in model space.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SetTaskMarkerOffset(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SetTaskMarkerOffset(leftInstance, rightInstance));
            }

            /// <summary>
            /// Set a result of the task.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SetTaskResult(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SetTaskResult(leftInstance, rightInstance));
            }

            /// <summary>
            /// Set the state of a given task.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SetTaskState(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SetTaskState(leftInstance, rightInstance));
            }

            /// <summary>
            /// Sets the desired  terrain resolution in meters.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SetTerrainGrid(Value rightInstance)
            {
                return new Value(GameValueMethods.SetTerrainGrid(rightInstance));
            }

            /// <summary>
            /// Set the current terrain's altitude on provided location(s). ⚠ Heightmap changes: are internally converted (rounded) to heightmap coordinates are stored in the JIP queue are not removed from the JIP queue if the values are set back to terrain's default value are updated in the JIP queue for updated positions if the same group of positions are edited (order does not matter, but amount does);editing positions by terrain sections is good for multiplayer optimisation (see Example 2) are not updated and sent twice (old one then new one) if position edits are not exactly the same (see point above and Example 2). Edited terrain heights are not saved inside savegames, they need to be restored manually on savegame load. Known issues: Terrain sections can become invisible if the change is too extreme Walking on the edge of extreme height changes can catapult the player away
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SetTerrainHeight(Value rightInstance)
            {
                return new Value(GameValueMethods.SetTerrainHeight(rightInstance));
            }

            /// <summary>
            /// Sets the text associated with a location. This text will be displayed on the game map at the location's position.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SetText(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SetText(leftInstance, rightInstance));
            }

            /// <summary>
            /// Sets a time multiplier for in-game time. The command range is capped at 0.1 - 120 to avoid performance problems.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SetTimeMultiplier(Value rightInstance)
            {
                return new Value(GameValueMethods.SetTimeMultiplier(rightInstance));
            }

            /// <summary>
            /// 
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SetTIParameter(Value rightInstance)
            {
                return new Value(GameValueMethods.SetTIParameter(rightInstance));
            }

            /// <summary>
            /// Defines the title effect to show on activation via [Type, Effect, Text] where 'Type'  The title effect does not disappear on deactivation, this should be done manually if required.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SetTitleEffect(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SetTitleEffect(leftInstance, rightInstance));
            }

            /// <summary>
            /// Simulation Towable Can Tow CarX TankX AirplaneX BoatX Allows a vehicle to be towed by another. This loosens the towed vehicle's brakes and turns its steering wheels toward the towing vehicle. Supposed to be used together with a rope connecting both vehicles.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SetTowParent(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SetTowParent(leftInstance, rightInstance));
            }

            /// <summary>
            /// Set the density of ambient cars in a rectangle (in cars per kilometer). This command does nothing in Arma 3.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SetTrafficDensity(Value rightInstance)
            {
                return new Value(GameValueMethods.SetTrafficDensity(rightInstance));
            }

            /// <summary>
            /// Set maximum ambient traffic draw distance (in 2D). This command does nothing in Arma 3.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SetTrafficDistance(Value rightInstance)
            {
                return new Value(GameValueMethods.SetTrafficDistance(rightInstance));
            }

            /// <summary>
            /// Set the average gap between ambient cars in a rectangle (in meters). This command does nothing in Arma 3.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SetTrafficGap(Value rightInstance)
            {
                return new Value(GameValueMethods.SetTrafficGap(rightInstance));
            }

            /// <summary>
            /// Set ambient traffic speed in a rectangle (in kilometers per hour). This command does nothing in Arma 3.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SetTrafficSpeed(Value rightInstance)
            {
                return new Value(GameValueMethods.SetTrafficSpeed(rightInstance));
            }

            /// <summary>
            /// Defines the trigger activation type.  See ArmA:Mission Editor - Triggers for a thorough overview of triggers and its fields for activation, effects, etc.   Since Arma 3 v1.67, "ANYPLAYER" activation can be used to detect any player.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SetTriggerActivation(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SetTriggerActivation(leftInstance, rightInstance));
            }

            /// <summary>
            ///  Trigger axis a, b and c (half of their x, y and z dimensions) Defines the area monitored by the given trigger. The area could be either rectangular or elliptical. Just like with a and b dimensions, c dimension will alter area in opposite directions from the trigger position along z axis. Therefore if the trigger position is on the surface, half of the trigger area will be above the surface and half below. To place the whole area above the surface, adjust trigger position (move it up c meters). If c is not specified or <= 0, the trigger's height is considered infinite like 2D triggers.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SetTriggerArea(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SetTriggerArea(leftInstance, rightInstance));
            }

            /// <summary>
            /// Sets the interval in seconds for trigger condition check. Triggers are configured to check condition approx. every 0.5 second by default. This command allows either to slow down or to speed up default check interval per trigger. Setting interval to 0 will make the trigger check its condition every frame. However, when trigger is attached to some object, the trigger will inherit the simulation frequency of the object it is  attached to. This command cannot change the interval of the attached trigger. The trigger can also be "frozen" with enableSimulation command.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SetTriggerInterval(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SetTriggerInterval(leftInstance, rightInstance));
            }

            /// <summary>
            /// Defines trigger condition, activation and deactivation statements. Trigger condition has to return Boolean. true will activate the trigger, false will deactivate it (only if activation is set to repeat). thisList returns the same result as list command, which includes all entities in the trigger area that are capable of activating the trigger. Dead entities are excluded as well as crew in vehicles, vehicles themselves are included.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SetTriggerStatements(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SetTriggerStatements(leftInstance, rightInstance));
            }

            /// <summary>
            /// Sets the text label attached to the trigger object. This is used for example as a radio slot label for radio activated triggers.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SetTriggerText(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SetTriggerText(leftInstance, rightInstance));
            }

            /// <summary>
            /// Defines the time between condition satisfaction and trigger activation (randomly from min to max, with an average value mid). If the last argument is true, the condition must be fullfilled all the time.  For a normal trigger, min, mid and max are used to generate random duration according to Gaussian Distribution[1]. For a "Seized" type of trigger, the duration value is generated using side ruling power
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SetTriggerTimeout(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SetTriggerTimeout(leftInstance, rightInstance));
            }

            /// <summary>
            /// Sets the type of action processed by the trigger after activation (no action, a waypoints switch or an end of mission): "NONE" "EAST G" - Guarded by OPFOR - (It is better to use createGuardedPoint instead) "WEST G" - Guarded by BLUFOR - (It is better to use createGuardedPoint instead) "GUER G" - Guarded by Independent - (It is better to use createGuardedPoint instead) "SWITCH" - Switch waypoints/break loop (see Triggers) "END1" - End #1 "END2" - End #2 "END3" - End #3 "END4" - End #4 "END5" - End #5 "END6" - End #6 "LOOSE" - (Meant to say LOSE but is misspelt in the game engine). "WIN" - (Not in editor. Valid enum name but when set, defaults to "END1")
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SetTriggerType(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SetTriggerType(leftInstance, rightInstance));
            }

            /// <summary>
            /// Sets the rotation and elevation limits for the given turret. The limits can only be set within the limits defined in config and cannot exceed them. To reset to config defaults pass the turret argument only (Example 2).
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SetTurretLimits(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SetTurretLimits(leftInstance, rightInstance));
            }

            /// <summary>
            /// Set the current optics mode of the optics in the turret occupied by the specified unit. Alt syntax allows a vehicle and turret path to be specified instead of a unit.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SetTurretOpticsMode(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SetTurretOpticsMode(leftInstance, rightInstance));
            }

            /// <summary>
            /// Changes a location to the specified class. Location classes are defined in CfgLocationTypes.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SetType(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SetType(leftInstance, rightInstance));
            }

            /// <summary>
            /// In Arma 2 and since Arma 3 v1.64, this command sets unit into incapacitated state. lifeState results: Arma 2: "UNCONSCIOUS" Arma 3: "INCAPACITATED" The unit goes in ragdoll mode and animation played while incapacitated depends on the injuries received.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SetUnconscious(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SetUnconscious(leftInstance, rightInstance));
            }

            /// <summary>
            /// Sets skill of given unit. Unlike setSkill, setUnitAbility can set values > 1. Even though the skill command will correctly return set value, the actual unit ability will be capped to max available.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SetUnitAbility(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SetUnitAbility(leftInstance, rightInstance));
            }

            /// <summary>
            /// Sets unit's combat mode (engagement rules). For AI group combat mode see setCombatMode. Mode may be one of the following:  "BLUE" : Never fire, keep formation "GREEN" : Hold fire, keep formation "WHITE" : Hold fire, engage at will/loose formation "YELLOW" : Fire at will, keep formation "RED" : Fire at will, engage at will/loose formation See Combat Modes for more information on combat modes.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SetUnitCombatMode(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SetUnitCombatMode(leftInstance, rightInstance));
            }

            /// <summary>
            /// Sets minimum freefall height AGL per unit, at which the unit assumes HALO pose. Engine default is 100m. Use -1 to reset the height to default.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SetUnitFreefallHeight(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SetUnitFreefallHeight(leftInstance, rightInstance));
            }

            /// <summary>
            /// Creates a loadout from given inventory structure and applies it to a unit. When String for class name is supplied, the command will search CfgVehicles for the given class in order to extract the loadout from config. If Config is given, it will search given config (including  mission config) for the loadout information. In either case, the config should contain the following entries, which is standard for any unit class, for example: class MyLoadout { 	uniformClass = "U_B_CombatUniform_mcam"; 	backpack = "B_AssaultPack_mcamo"; 	linkedItems[] = {"V_PlateCarrier1_rgr","H_HelmetB","ItemCompass","ItemWatch","ItemRadio","NVGoggles"}; 	weapons[] = {"arifle_MX_ACO_pointer_F","hgun_P07_F"}; 	items[] = {"FirstAidKit","FirstAidKit","FirstAidKit"}; 	magazines[] = {"30Rnd_65x39_caseless_mag","16Rnd_9x21_Mag","SmokeShell","HandGrenade","HandGrenade","HandGrenade","HandGrenade","HandGrenade","HandGrenade","HandGrenade","HandGrenade","HandGrenade","HandGrenade","HandGrenade","HandGrenade","HandGrenade","HandGrenade","HandGrenade","HandGrenade","HandGrenade","HandGrenade","HandGrenade","HandGrenade","HandGrenade","HandGrenade","HandGrenade","HandGrenade"}; };
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SetUnitLoadout(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SetUnitLoadout(leftInstance, rightInstance));
            }

            /// <summary>
            /// Set unit position rules. This command will not change the stance of the human player, even though it will change the output of unitPos command. To change player stance use playAction or playActionNow: player playAction "PlayerProne"; // DOWN player playAction "PlayerStand"; // UP player playAction "PlayerCrouch"; // MIDDLE
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SetUnitPos(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SetUnitPos(leftInstance, rightInstance));
            }

            /// <summary>
            /// Set unit position rules. This command is the lowest level of priority for setting unit position and to be used in scripted	 FSM's. Priorities are: Unit pos commanded (from the commanding menu, higher priority). Unit pos scripted (from setUnitPos scripting command, medium priority). Unit pos FSM / setUnitPosWeak (used in the formation FSM, lowest priority).
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SetUnitPosWeak(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SetUnitPosWeak(leftInstance, rightInstance));
            }

            /// <summary>
            /// Sets rank of given unit. Possible rank values, and the associated rating that is set (not added, the value replaces previous rating) with it: Ranks PRIVATE CORPORAL SERGEANT LIEUTENANT CAPTAIN MAJOR COLONEL Ratings ArmA Arma 2 Arma 2:OA TKOH 0 500 1500 2500 3500 5000 7500 Arma 3 (ca 2015) 0 50 150 250 350 500 750 Arma 3 0 0 0 0 0 0 0 Before Arma 3 v1.68 and in previous titles, this command was GAGlobal LELocal.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SetUnitRank(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SetUnitRank(leftInstance, rightInstance));
            }

            /// <summary>
            /// Proportionaly increase/decrease unit's recoil. Drives muzzle up with every shot when supplied positive number and down when negative. 0 cancels recoil.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SetUnitRecoilCoefficient(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SetUnitRecoilCoefficient(leftInstance, rightInstance));
            }

            /// <summary>
            /// Enables or disables a trait or alters a trait of the given unit. Custom trait can only be a bool. Default traits are: Number audibleCoef - A lower value means the unit is harder to hear Number camouflageCoef - A lower value means the unit is harder to spot Number loadCoef - Equipment weight multiplier affecting fatigue and stamina Boolean engineer - Ability to partially repair vehicles with toolkit, equivalent to engineer = 1; in CfgVehicles Boolean explosiveSpecialist - Ability to defuse mines with toolkit, equivalent to canDeactivateMines = 1; in CfgVehicles Boolean medic - Ability to treat self and others with medikit, equivalent to attendant = 1; in CfgVehicles Boolean UAVHacker - Ability to hack drones, equivalent to uavHacker = 1; in CfgVehicles
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SetUnitTrait(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SetUnitTrait(leftInstance, rightInstance));
            }

            /// <summary>
            /// Sets whether or not cargo or turret units should get out of vehicle when in combat. If true, vehicle will stop and units will dismount. Vehicle must be local. The command resets last time unit had reacted to an enemy as well as forcing orderGetIn false if canUnloadInCombat is permitted by config
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SetUnloadInCombat(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SetUnloadInCombat(leftInstance, rightInstance));
            }

            /// <summary>
            ///  Changes user added action (see addAction) menu item text. 
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SetUserActionText(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SetUserActionText(leftInstance, rightInstance));
            }

            /// <summary>
            /// Stored user text value in MFD, limit is 50, user0...user49
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SetUserMFDText(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SetUserMFDText(leftInstance, rightInstance));
            }

            /// <summary>
            /// When MFD is using user controllers, this command can set values on them. For example, MFD config for Blackfoot has an entry // ... class Draw { 	alpha = "user3"; 	color[] = {"user0","user1","user2"}; // ... which could control color of the MFD. See Example 2-3-4 on how to set different colors of the Blackfoot MFD
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SetUserMFDValue(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SetUserMFDValue(leftInstance, rightInstance));
            }

            /// <summary>
            /// Set variable to given value in the variable space of given element. Can be used to broadcast variables over the network. To remove a variable, set it to nil (see Example 5) - note that this does not work on Object and scripted Location namespaces (the variable will be set to nil but will remain listed by allVariables). ⚠missionNamespace, uiNamespace, parsingNamespace and profileNamespace variables cannot be named as commands - e.g missionNamespace setVariable ["west", 123]; conflicts with the west command and will result in a Reserved variable in expression error, west being a scripting command (other namespaces do not have such limitation). See also all available script commands.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SetVariable(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SetVariable(leftInstance, rightInstance));
            }

            /// <summary>
            /// Set object's direction vector. Up vector will remain unchanged.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SetVectorDir(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SetVectorDir(leftInstance, rightInstance));
            }

            /// <summary>
            ///  Sets orientation of an object. The command takes 2 vector arrays, one for vectorDir and one for vectorUp. Default object orientation will always have vectorDir pointing forward (North) along Y axis and vectorUp pointing up along Z axis - [[0,1,0],[0,0,1]], as shown on the diagram below (see also BIS_fnc_transformVectorDirAndUp). When attaching object to an object the axes are relative to the object that gets the attachment. If it is player object for example, then X goes from left to right, Y goes from back to front, and Z goes from down up. The setDir command is incompatible with setVectorDirAndUp and should not be used together on the same object. Using setVectorDirAndUp alone should be sufficient for any orientation.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SetVectorDirAndUp(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SetVectorDirAndUp(leftInstance, rightInstance));
            }

            /// <summary>
            /// Set object's up vector. Direction of the object remain unchanged. Default object's vectorUp is [0,0,1].
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SetVectorUp(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SetVectorUp(leftInstance, rightInstance));
            }

            /// <summary>
            /// Sets how much ammunition (compared to a full state defined by the vehicle type) the vehicle has. Note that the ammo will be added only to local turrets. To check locality of turret use turretLocal. The value ranges from 0 to 1.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SetVehicleAmmo(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SetVehicleAmmo(leftInstance, rightInstance));
            }

            /// <summary>
            /// Sets how much ammunition (compared to the configuration of magazines defined in the vehicle's class) the vehicle has. Note that the ammo will only be added to local turrets. To check the locality of turret use turretLocal.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SetVehicleAmmoDef(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SetVehicleAmmoDef(leftInstance, rightInstance));
            }

            /// <summary>
            /// Sets the armor (or health for men) state of the vehicle (a value from 0 to 1).  Works like setDamage, but the other way around: 1 is full health - see Example 2.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SetVehicleArmor(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SetVehicleArmor(leftInstance, rightInstance));
            }

            /// <summary>
            /// Load cargo vehicle inside vehicle if possible, returns bool based on whether the vehicle was able to be loaded.  Can also be used to unload a specific loaded vehicle or all loaded vehicles.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value bool</returns>
            public static Value SetVehicleCargo(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SetVehicleCargo(leftInstance, rightInstance));
            }

            /// <summary>
            /// Sets ID to vehicle. By this ID vehicle is referenced by triggers and waypoints. ⚠This command is not to be used.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SetVehicleId(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SetVehicleId(leftInstance, rightInstance));
            }

            /// <summary>
            /// Sets vehicle lock. Possible values: "UNLOCKED" "DEFAULT" "LOCKED" "LOCKEDPLAYER"
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SetVehicleLock(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SetVehicleLock(leftInstance, rightInstance));
            }

            /// <summary>
            /// Moves the object to a given position (same as createVehicle placement algorithm). Uses either the position that's defined by the position param, or one of the marker positions from the markers array. The object is placed inside a circle with position as its center and placement as its radius. The type of placement could also be controlled with special. If position is in water and the vehicle can float, it is placed on water surface, otherwise it is placed on the ground, even if the ground is under water. If roof surfaces support walking, units will be placed on roofs if such position is given.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value bool</returns>
            public static Value SetVehiclePosition(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SetVehiclePosition(leftInstance, rightInstance));
            }

            /// <summary>
            /// Sets the AI rule of Radar usage (Emission Control). Automatic means Radar switched on only when in Combat. The command doesn't affect player-controlled vehicles.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SetVehicleRadar(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SetVehicleRadar(leftInstance, rightInstance));
            }

            /// <summary>
            /// Sets that the vehicle will be able to receive targets acquired by someone else via datalink from the Side center.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SetVehicleReceiveRemoteTargets(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SetVehicleReceiveRemoteTargets(leftInstance, rightInstance));
            }

            /// <summary>
            /// Sets that the vehicle will share its own position via datalink to the Side center.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SetVehicleReportOwnPosition(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SetVehicleReportOwnPosition(leftInstance, rightInstance));
            }

            /// <summary>
            /// Sets that the vehicle will share targets that were acquired by its own sensors via datalink to the Side center.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SetVehicleReportRemoteTargets(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SetVehicleReportRemoteTargets(leftInstance, rightInstance));
            }

            /// <summary>
            /// 
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SetVehicleTIPars(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SetVehicleTIPars(leftInstance, rightInstance));
            }

            /// <summary>
            /// Sets string representation of an object to a custom string. When a vehicle is created and named in the editor, the name becomes both the variable containing the vehicle object and the string representation of the vehicle object. In scripts an extra step is needed to achieve the same effect - see Example 1. This does not work with Simple Objects.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SetVehicleVarName(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SetVehicleVarName(leftInstance, rightInstance));
            }

            /// <summary>
            /// Sets velocity vector of an object in m/s. ⚠Since Arma 3 v2.06 each velocity component is limited to the range +-5000 m/s.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SetVelocity(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SetVelocity(leftInstance, rightInstance));
            }

            /// <summary>
            /// Sets the velocity (speed vector) of the given vehicle relative to its model. ⚠Since Arma 3 v2.06 each velocity component is limited to the range +-5000 m/s.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SetVelocityModelSpace(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SetVelocityModelSpace(leftInstance, rightInstance));
            }

            /// <summary>
            ///   Interpolates and applies PositionASL, velocity, vectorDir and vectorUp to the given object based on the interval value. When interval is 0 the "fromXXX" values are used for the beginning of the interpolation. When interval is 1, the "toXXX" values are used for the end of interpolation. When interval value is in between, interpolated values are used (see diagram below). The interpolation is linear and along straight line between "from" and "to" positions. If curve is needed, then it should be constructed from multiple straight sections or by dynamically changing value of position params during the interpolation cycle, similar to Quadratic Curve animation (see Example 3). The velocity param does not do much in SP, but in MP, provided the velocity component is set correctly, it helps the engine to figure out what the next position of the moving object should be on other clients. The actual approximate interpolation formula for this command is: _vecCurrent = _vecFrom vectorAdd (_vecTo vectorDiff _vecFrom vectorMultiply _interval); For continuous movement this command should be executed each frame while changing the interval value. For example to apply interpolation for 10 seconds one could use the following command to translate 10 seconds into 0..1 interval: t1 = time; t2 = time + 10; Later inside some on frame event... _interval = linearConversion [t1, t2, time, 0, 1];
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SetVelocityTransformation(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SetVelocityTransformation(leftInstance, rightInstance));
            }

            /// <summary>
            /// Set rendering distance. Setting view distance to >= 0 resets the value to the client's options (set in Options → Video → General → Visibility → Overall). In previous versions, client's max view distance was limited by the server's view distance. ⚠View distance also defines the maximum distance between a unit and any other unit they can know about. Higher view distance will involve more AI simulation cycles for every unit, which causes low performance. See Arma 3: Performance Optimisation. Game min. scripted min. UI default max. UI max. scripted Arma 3 200 500 1600 12000 40000 Arma 2: Operation Arrowhead 200 500 2500 10000 15000 Arma 2 200 500 3000 10000 15000 Armed Assault 200 500 1200 10000 15000 Operation Flashpoint 500 500 900 5000 5000
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SetViewDistance(Value rightInstance)
            {
                return new Value(GameValueMethods.SetViewDistance(rightInstance));
            }

            /// <summary>
            /// Sets whether or not the object is visible even if the tree is collapsed. Some Old Editor Command
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SetVisibleIfTreeCollapsed(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SetVisibleIfTreeCollapsed(leftInstance, rightInstance));
            }

            /// <summary>
            /// Tell the helicopter engine RPMs to reach the given value within a period of time. The simulation will try to reach the RPMs, but it does not guarantee it will reach the precise value! engine index 0: engine #1 engine index 1: engine #2 engine index 2: engine #3 engine index -1: all engines For this command to have any effect, the Advanced Flight Model (AFM) has to be enabled. AFM status can be checked with difficultyEnabledRTD.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SetWantedRPMRTD(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SetWantedRPMRTD(leftInstance, rightInstance));
            }

            /// <summary>
            /// Changes the waves value smoothly during the given time (in seconds). A time of zero means there will be an immediate change. NOTE: This command will have no effect (even though the value of waves changes) unless Manual Override option is selected in the editor in the Intel, which is normally off.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SetWaves(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SetWaves(leftInstance, rightInstance));
            }

            /// <summary>
            /// Switches the unit behaviour when the waypoint becomes active. Possible values are: "UNCHANGED" "CARELESS" "SAFE" "AWARE" "COMBAT" "STEALTH" See the AIBehaviour page for details of the effect of this command on AI units.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SetWaypointBehaviour(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SetWaypointBehaviour(leftInstance, rightInstance));
            }

            /// <summary>
            /// Changes a group's combat mode when the waypoint becomes active.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SetWaypointCombatMode(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SetWaypointCombatMode(leftInstance, rightInstance));
            }

            /// <summary>
            /// The completion radius allows units to call the waypoint completed once they are inside of the given circle. If the given radius is less than unit’s or vehicle’s configured 'precision' then the latter is used. For example tank precision is 10m, if the given radius is 5m, the final radius will be 10m. For units in player’s group there is an additional multiplier x5 to the configured precision. Units that are fleeing and are not in player's Group will ignore the completion radius and would not be able to complete by proximity until they stop fleeing.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SetWaypointCompletionRadius(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SetWaypointCompletionRadius(leftInstance, rightInstance));
            }

            /// <summary>
            /// Sets the description shown in the HUD while the waypoint is active.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SetWaypointDescription(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SetWaypointDescription(leftInstance, rightInstance));
            }

            /// <summary>
            /// Forces the behavior of waypoint, disables AUTOCOMBAT.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SetWaypointForceBehaviour(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SetWaypointForceBehaviour(leftInstance, rightInstance));
            }

            /// <summary>
            /// Switches the group formation when the waypoint becomes active. Possible values are:  "NO CHANGE" "COLUMN" "STAG COLUMN" "WEDGE" "ECH LEFT" "ECH RIGHT" "VEE" "LINE" "FILE" "DIAMOND"
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SetWaypointFormation(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SetWaypointFormation(leftInstance, rightInstance));
            }

            /// <summary>
            /// For waypoints attached to a house, this defines the target buildingPos index.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SetWaypointHousePosition(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SetWaypointHousePosition(leftInstance, rightInstance));
            }

            /// <summary>
            /// Assigns loiter altitude to the provided waypoint.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SetWaypointLoiterAltitude(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SetWaypointLoiterAltitude(leftInstance, rightInstance));
            }

            /// <summary>
            /// Assignes loiter radius to waypoint
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SetWaypointLoiterRadius(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SetWaypointLoiterRadius(leftInstance, rightInstance));
            }

            /// <summary>
            /// Sets the waypoint loiter type.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SetWaypointLoiterType(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SetWaypointLoiterType(leftInstance, rightInstance));
            }

            /// <summary>
            /// Changes the waypoint name.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SetWaypointName(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SetWaypointName(leftInstance, rightInstance));
            }

            /// <summary>
            /// Attempts to move given waypoint to a random position inside a circle with the given center and radius.  The waypoint will be placed similar to "NONE" attribute in setVehiclePosition, even if the radius is 0, which means it could still be off center. In order to force waypoint to the exact position, similar to "CAN_COLLIDE" attribute, use a negative radius (see Example 2).
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SetWaypointPosition(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SetWaypointPosition(leftInstance, rightInstance));
            }

            /// <summary>
            /// Attaches a script to a scripted waypoint. In early versions of Arma, command consisted of a script name and additional script arguments and the script had to use SQS Syntax. The script receives the following arguments in _this variable: [group, position, target] + [the optional passed arguments]. The optional arguments are appended to the end of the arguments array. In Arma 3, command argument can be a reference to .sqf script (it will have to explicitly end with .sqf) or a reference to .sqs script.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SetWaypointScript(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SetWaypointScript(leftInstance, rightInstance));
            }

            /// <summary>
            /// Switches the group speed mode when the waypoint becomes active. Possible values are: "UNCHANGED" "LIMITED" "NORMAL" "FULL"
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SetWaypointSpeed(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SetWaypointSpeed(leftInstance, rightInstance));
            }

            /// <summary>
            /// The waypoint is done only when the condition is fulfilled. When the waypoint is done, the statement expression is executed. Within the Condition & Statement code string: this refers to the group leader thisList refers to the group's units ⚠The Condition code is evaluated on the group owner's machine. When condition returns true, for some strange reason, the condition is evaluated one more time. The OnActivation code is executed globally, a.k.a on every client! See Waypoints.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SetWaypointStatements(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SetWaypointStatements(leftInstance, rightInstance));
            }

            /// <summary>
            /// Defines the time between condition satisfaction and waypoint finish (randomly from min to max, with an average value mid).
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SetWaypointTimeout(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SetWaypointTimeout(leftInstance, rightInstance));
            }

            /// <summary>
            /// Sets the waypoint type of given waypoint.  More details at Waypoints.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SetWaypointType(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SetWaypointType(leftInstance, rightInstance));
            }

            /// <summary>
            /// Sets the visibility of the given waypoint in 3D HUD view (for map visibility see showWaypoint).
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SetWaypointVisible(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SetWaypointVisible(leftInstance, rightInstance));
            }

            /// <summary>
            /// Sets reloading phase on the given weapon's current ammo round. ⚠This command does not change a weapon's (e.g soldier's rifle) magazine reloading time but changes the ammo reloading state before the next round is shot.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value bool</returns>
            public static Value SetWeaponReloadingTime(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SetWeaponReloadingTime(leftInstance, rightInstance));
            }

            /// <summary>
            /// Sets zeroing of given weapon and muzzle for given unit or vehicle.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value bool</returns>
            public static Value SetWeaponZeroing(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SetWeaponZeroing(leftInstance, rightInstance));
            }

            /// <summary>
            /// Set current or permanent wind vector. ⚠The effect is global only if it is executed on the server. Wind set locally will sync back to server value in a while.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SetWind(Value rightInstance)
            {
                return new Value(GameValueMethods.SetWind(rightInstance));
            }

            /// <summary>
            /// Changes the wind direction smoothly.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SetWindDir(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SetWindDir(leftInstance, rightInstance));
            }

            /// <summary>
            /// Set max. wind overall wind changes in time. A time of zero means there will be an immediate change. A wind level of zero is minimal changes and a wind level of one means that wind can change rapidly.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SetWindForce(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SetWindForce(leftInstance, rightInstance));
            }

            /// <summary>
            /// Changes the wind strength smoothly during the given time (in seconds). A time of zero means there will be an immediate change.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SetWindStr(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SetWindStr(leftInstance, rightInstance));
            }

            /// <summary>
            /// Set effectivity of wings. For this command to have any effect, the Advanced Flight Model (AFM) has to be enabled. AFM status can be checked with difficultyEnabledRTD.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SetWingForceScaleRTD(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SetWingForceScaleRTD(leftInstance, rightInstance));
            }

            /// <summary>
            /// Sets waypoint position  This command is identical to setWaypointPosition [pos, -1] (see command description for more info)
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SetWPPos(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SetWPPos(leftInstance, rightInstance));
            }

            /// <summary>
            /// Toggle the drawing of 3D icons. Some Old Editor Command
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value Show3DIcons(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.Show3DIcons(leftInstance, rightInstance));
            }

            /// <summary>
            /// Shows/hides the whole chat window.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value ShowChat(Value rightInstance)
            {
                return new Value(GameValueMethods.ShowChat(rightInstance));
            }

            /// <summary>
            /// Forces drawing of cinema borders when using custom camera camCreate. This is normally used in cutscenes to indicate player has no control.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value ShowCinemaBorder(Value rightInstance)
            {
                return new Value(GameValueMethods.ShowCinemaBorder(rightInstance));
            }

            /// <summary>
            /// Create the commanding menu described by the given config class or menu name. When the name is empty, the current menu is hidden. If commanding menu has "expression" set up, the expression will receive the following arguments when user activated the menu item: Local variable  _target: Object - Target under the cursor. This works in both 3D and 2D (when cursor is over the unit icon on the map). Local variable _pos: Array - Cursor position. Local variable _is3D: Boolean - false if cursor is over the map, otherwise true.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value ShowCommandingMenu(Value rightInstance)
            {
                return new Value(GameValueMethods.ShowCommandingMenu(rightInstance));
            }

            /// <summary>
            /// Shows or hides the compass on the map screen, if enabled for the mission and you possess the item. (default true)
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value ShowCompass(Value rightInstance)
            {
                return new Value(GameValueMethods.ShowCompass(rightInstance));
            }

            /// <summary>
            /// Hides or shows compass in curator interface.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value ShowCuratorCompass(Value rightInstance)
            {
                return new Value(GameValueMethods.ShowCuratorCompass(rightInstance));
            }

            /// <summary>
            /// 
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value ShowGPS(Value rightInstance)
            {
                return new Value(GameValueMethods.ShowGPS(rightInstance));
            }

            /// <summary>
            /// Enable / disable showing of HUD. Defines visibility of weapon crosshair and any informational tags that appear when pointing the weapon at an object as well as availability of the default action menu. Unfortunately, it also hides icons drawn with drawIcon3D. Since Arma 3 v1.50 there is a Description.ext's showHUD[] array param that is identical in format to the extended showHUD command. When present, it will disable showHUD command entirely, allowing mission makers to permanently alter visibility of some HUD elements. Since Arma 3 v2.04 it is possible to force drawing of drawIcon3D icons when HUD is hidden. The icons will also show when custom camera is created and the view is switched to it via switchCamera or cameraEffect provided cameraEffectEnableHUD is enabled. For more information see drawIcon3D.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value ShowHUD(Value rightInstance)
            {
                return new Value(GameValueMethods.ShowHUD(rightInstance));
            }

            /// <summary>
            /// Show/hide map legend.  Some Old Editor Command
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value ShowLegend(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.ShowLegend(leftInstance, rightInstance));
            }

            /// <summary>
            /// Enable Map (default true)
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value ShowMap(Value rightInstance)
            {
                return new Value(GameValueMethods.ShowMap(rightInstance));
            }

            /// <summary>
            /// Checks whether the player has the artillery computer currently open.
            /// </summary>
            /// <returns>Value bool</returns>
            public static Value ShownArtilleryComputer()
            {
                return new Value(GameValueMethods.ShownArtilleryComputer());
            }

            /// <summary>
            /// Returns true if chat window is enabled. Chat window can be disabled with showChat command.
            /// </summary>
            /// <returns>Value bool</returns>
            public static Value ShownChat()
            {
                return new Value(GameValueMethods.ShownChat());
            }

            /// <summary>
            /// Checks if client has Compass enabled in description.ext (showCompass param) or force enabled with showCompass command.
            /// </summary>
            /// <returns>Value bool</returns>
            public static Value ShownCompass()
            {
                return new Value(GameValueMethods.ShownCompass());
            }

            /// <summary>
            /// Returns true if compass is shown.
            /// </summary>
            /// <returns>Value bool</returns>
            public static Value ShownCuratorCompass()
            {
                return new Value(GameValueMethods.ShownCuratorCompass());
            }

            /// <summary>
            /// Show the add editor object dialog,type is editor object type,class is,class definition to automatically select,side filters by a certain,side,pos is position to create the object.   Some Old Editor Command
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value any</returns>
            public static Value ShowNewEditorObject(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.ShowNewEditorObject(leftInstance, rightInstance));
            }

            /// <summary>
            /// 
            /// </summary>
            /// <returns>Value bool</returns>
            public static Value ShownGPS()
            {
                return new Value(GameValueMethods.ShownGPS());
            }

            /// <summary>
            /// Returns array of Booleans corresponding to the visibility of various HUD elements (see extended showHUD).
            /// </summary>
            /// <returns>Value array</returns>
            public static Value ShownHUD()
            {
                return new Value(GameValueMethods.ShownHUD());
            }

            /// <summary>
            /// Checks if client has Map enabled in description.ext (showMap param) or force enabled with showMap command.
            /// </summary>
            /// <returns>Value bool</returns>
            public static Value ShownMap()
            {
                return new Value(GameValueMethods.ShownMap());
            }

            /// <summary>
            /// Checks if client has Notepad enabled.
            /// </summary>
            /// <returns>Value bool</returns>
            public static Value ShownPad()
            {
                return new Value(GameValueMethods.ShownPad());
            }

            /// <summary>
            /// Check if player has Radio enabled. This command exists in Arma 3 but doesn't do much
            /// </summary>
            /// <returns>Value bool</returns>
            public static Value ShownRadio()
            {
                return new Value(GameValueMethods.ShownRadio());
            }

            /// <summary>
            /// Returns the state of the score table set with showScoretable command.  ⚠Since Arma 3 v1.64, the previous functionality of this command (score table visibility check) is moved to visibleScoretable command. Please update your scripts and sorry for any inconvinience.
            /// </summary>
            /// <returns>Value scalar</returns>
            public static Value ShownScoretable()
            {
                return new Value(GameValueMethods.ShownScoretable());
            }

            /// <summary>
            /// A getter for showSubtitles.
            /// </summary>
            /// <returns>Value bool</returns>
            public static Value ShownSubtitles()
            {
                return new Value(GameValueMethods.ShownSubtitles());
            }

            /// <summary>
            /// Returns true if video feed transmitted from UAV is shown. A getter for showUAVFeed.
            /// </summary>
            /// <returns>Value bool</returns>
            public static Value ShownUAVFeed()
            {
                return new Value(GameValueMethods.ShownUAVFeed());
            }

            /// <summary>
            /// Check if player has ID card enabled. Obsolete command.
            /// </summary>
            /// <returns>Value bool</returns>
            public static Value ShownWarrant()
            {
                return new Value(GameValueMethods.ShownWarrant());
            }

            /// <summary>
            /// Checks if client has Watch enabled in description.ext (showWatch param) or force enabled with showWatch command.
            /// </summary>
            /// <returns>Value bool</returns>
            public static Value ShownWatch()
            {
                return new Value(GameValueMethods.ShownWatch());
            }

            /// <summary>
            /// Shows or hides the notebook on the map screen, if enabled for the mission. (default true). It is no longer relevant to Arma 2.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value ShowPad(Value rightInstance)
            {
                return new Value(GameValueMethods.ShowPad(rightInstance));
            }

            /// <summary>
            /// Shows or hides the radio on the map screen, if enabled for the mission and you possess the item. (default true). This command does nothing in Arma 3.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value ShowRadio(Value rightInstance)
            {
                return new Value(GameValueMethods.ShowRadio(rightInstance));
            }

            /// <summary>
            /// Forces the score table to be shown, hidden or reset to default functionality. Forcing score table will make it show even in SP. When score table is forced opened it cannot be  closed manually, when it is force closed, it cannot be opened manually.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value ShowScoretable(Value rightInstance)
            {
                return new Value(GameValueMethods.ShowScoretable(rightInstance));
            }

            /// <summary>
            /// Enables / disables showing of subtitles in a chat. Only scripted/engine chatter is affected, player manual chat is unaffected. Returns the previous state.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value bool</returns>
            public static Value ShowSubtitles(Value rightInstance)
            {
                return new Value(GameValueMethods.ShowSubtitles(rightInstance));
            }

            /// <summary>
            /// Shows/hides video feed transmitted from UAV in its custom info panel.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value ShowUAVFeed(Value rightInstance)
            {
                return new Value(GameValueMethods.ShowUAVFeed(rightInstance));
            }

            /// <summary>
            /// Enable ID card. ⚠Obsolete command.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value ShowWarrant(Value rightInstance)
            {
                return new Value(GameValueMethods.ShowWarrant(rightInstance));
            }

            /// <summary>
            /// Shows or hides the watch on the map screen, if enabled for the mission and you possess the item. (default true)
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value ShowWatch(Value rightInstance)
            {
                return new Value(GameValueMethods.ShowWatch(rightInstance));
            }

            /// <summary>
            /// Defines how waypoints are shown to the player in map view. For 3D HUD visibility see setWaypointVisible.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value ShowWaypoint(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.ShowWaypoint(leftInstance, rightInstance));
            }

            /// <summary>
            /// Shows/Hides task HUD markers and waypoints that will fade out in time. Dependable on difficulty settings.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value ShowWaypoints(Value rightInstance)
            {
                return new Value(GameValueMethods.ShowWaypoints(rightInstance));
            }

            /// <summary>
            /// Returns the side of a unit, vehicle, object or location. side of a renegade soldier is sideEnemy side of an empty vehicle is civilian side of a crewed vehicle is, if present, commander's > gunner's > driver's or > cargo's side, in this order side of a captive or dead unit is civilian. Use side group _unit to get the underlying side (see Example 2) you can use playerSide to know the real player's side Converting a side to string will not always return the side command text: e.g str resistance; // returns "GUER". See Side page to see the return value of all side commands.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value side</returns>
            public static Value Side(Value rightInstance)
            {
                return new Value(GameValueMethods.Side(rightInstance));
            }

            /// <summary>
            /// Returns side of ambient life, for example ambient life placed in Eden Editor.
            /// </summary>
            /// <returns>Value side</returns>
            public static Value SideAmbientLife()
            {
                return new Value(GameValueMethods.SideAmbientLife());
            }

            /// <summary>
            /// Types text to the side radio channel by the specified unit.  ⚠The unit must have an assigned radio item (such as "ItemRadio") to see or transmit the messages. A radio item must have the property simulation = "ItemRadio";  in its CfgWeapons config.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SideChat(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SideChat(leftInstance, rightInstance));
            }

            /// <summary>
            /// Returns empty side, for example static buildings in Eden Editor.
            /// </summary>
            /// <returns>Value side</returns>
            public static Value SideEmpty()
            {
                return new Value(GameValueMethods.SideEmpty());
            }

            /// <summary>
            /// The enemy side which is used for renegades. Units of this side are hostile to everyone. To join sideEnemy, you can attack members of your own side or use addRating. When below a rating of -2000 units switch automatically to this side.
            /// </summary>
            /// <returns>Value side</returns>
            public static Value SideEnemy()
            {
                return new Value(GameValueMethods.SideEnemy());
            }

            /// <summary>
            /// The Friendly side - friendly to all, see Side Relations.
            /// </summary>
            /// <returns>Value side</returns>
            public static Value SideFriendly()
            {
                return new Value(GameValueMethods.SideFriendly());
            }

            /// <summary>
            /// The Logic side. Side of Game Logics and Modules.
            /// </summary>
            /// <returns>Value side</returns>
            public static Value SideLogic()
            {
                return new Value(GameValueMethods.SideLogic());
            }

            /// <summary>
            /// Sends the audio message to the side radio channel. The message is defined in CfgRadio in the description.ext file or config radio protocol. The transmission will play only on the PC where command was executed. If you need the transmission to play on all computers, you have to execute it globally (see remoteExec). ⚠The unit must have an assigned radio item (such as "ItemRadio") to see or transmit the messages. A radio item must have the property simulation = "ItemRadio"; in its CfgWeapons config. When transmitting unit gets killed, transmission will be interrupted. However when receiving unit gets killed, the transmission continues to play.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SideRadio(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SideRadio(leftInstance, rightInstance));
            }

            /// <summary>
            /// The unknown side. Used when the side of a unit is unknown, e.g. for spotted targets with insufficient information.
            /// </summary>
            /// <returns>Value side</returns>
            public static Value SideUnknown()
            {
                return new Value(GameValueMethods.SideUnknown());
            }

            /// <summary>
            /// Return all simple tasks assigned to given unit.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value SimpleTasks(Value rightInstance)
            {
                return new Value(GameValueMethods.SimpleTasks(rightInstance));
            }

            /// <summary>
            /// Check if the entity has enabled simulation.  ⚠The entity could be local or remote but the result returned by this command will be for the entity simulation set up locally on the client that executed the command. See enableSimulation for more info.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value bool</returns>
            public static Value SimulationEnabled(Value rightInstance)
            {
                return new Value(GameValueMethods.SimulationEnabled(rightInstance));
            }

            /// <summary>
            /// Returns density of clouds at given position.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value scalar</returns>
            public static Value SimulCloudDensity(Value rightInstance)
            {
                return new Value(GameValueMethods.SimulCloudDensity(rightInstance));
            }

            /// <summary>
            /// Returns clouds occlusion between two given points.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value scalar</returns>
            public static Value SimulCloudOcclusion(Value rightInstance)
            {
                return new Value(GameValueMethods.SimulCloudOcclusion(rightInstance));
            }

            /// <summary>
            /// Returns if given position is in clouds.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value bool</returns>
            public static Value SimulInClouds(Value rightInstance)
            {
                return new Value(GameValueMethods.SimulInClouds(rightInstance));
            }

            /// <summary>
            /// Synchronizes Simul Weather with Arma weather, generates all keyframes.
            /// </summary>
            /// <returns>Value nothing</returns>
            public static Value SimulWeatherSync()
            {
                return new Value(GameValueMethods.SimulWeatherSync());
            }

            /// <summary>
            /// Sine of x.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value scalar_nan</returns>
            public static Value Sin(Value rightInstance)
            {
                return new Value(GameValueMethods.Sin(rightInstance));
            }

            /// <summary>
            /// Returns a location's size.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value Size(Value rightInstance)
            {
                return new Value(GameValueMethods.Size(rightInstance));
            }

            /// <summary>
            /// Returns the diameter of bounding sphere of the object of given classname in meters. If you need to estimate the size of the object more precisely, use boundingBox or boundingBoxReal. ⚠At least one object of the given classname has to be present in the current mission otherwise zero will be returned.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value scalar</returns>
            public static Value SizeOf(Value rightInstance)
            {
                return new Value(GameValueMethods.SizeOf(rightInstance));
            }

            /// <summary>
            /// Returns current skill of a unit, in range between 0 to 1, 1 being the highest level of skill.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value scalar</returns>
            public static Value Skill(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.Skill(leftInstance, rightInstance));
            }

            /// <summary>
            /// Returns final, recalculated sub skill value of given unit. (with regard to AI Level coefficient (Difficulty settings)).
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value scalar</returns>
            public static Value SkillFinal(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SkillFinal(leftInstance, rightInstance));
            }

            /// <summary>
            /// Jumps the specified number of hours forward or backward.The time of day and tides are adjusted, but no changes are made to any units. If present, the lower level of clouds instantly jump to the position they would be in if time had passed normally.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SkipTime(Value rightInstance)
            {
                return new Value(GameValueMethods.SkipTime(rightInstance));
            }

            /// <summary>
            /// Suspends code execution for given time in seconds. The sleep precision is given by a framerate, the delay given is the minimal delay expected. Must be called inside of a context which is interruptible, i.e. a script executed by execVM or spawn. this command will suspend the code for at least the given amount of time, and can be way more if the script scheduler is busy. this command will suspend the script as the game gets paused in single player (and will resume with it). To avoid this, use uiSleep.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value Sleep(Value rightInstance)
            {
                return new Value(GameValueMethods.Sleep(rightInstance));
            }

            /// <summary>
            /// Returns current thumb position of CT_SLIDER or CT_XSLIDER with given idc of topmost user dialog.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value scalar</returns>
            public static Value SliderPosition(Value rightInstance)
            {
                return new Value(GameValueMethods.SliderPosition(rightInstance));
            }

            /// <summary>
            /// Returns limits of CT_SLIDER or CT_XSLIDER.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value SliderRange(Value rightInstance)
            {
                return new Value(GameValueMethods.SliderRange(rightInstance));
            }

            /// <summary>
            /// Sets current thumb position of CT_SLIDER or CT_XSLIDER.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SliderSetPosition(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SliderSetPosition(leftInstance, rightInstance));
            }

            /// <summary>
            /// Sets limits of CT_SLIDER or CT_XSLIDER.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SliderSetRange(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SliderSetRange(leftInstance, rightInstance));
            }

            /// <summary>
            /// Sets slider line step and page step delta amount as well as optional step amount of CT_SLIDER or CT_XSLIDER with given idc of topmost user dialog.  Click to arrow - move by line Click to scale outside thumb - move by page. CT_XSLIDER does not use `page` param, it acts as scrollbar when clicked on the bar. It also can only be horizontal.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SliderSetSpeed(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SliderSetSpeed(leftInstance, rightInstance));
            }

            /// <summary>
            /// Returns slider step value for line and page movement of CT_SLIDER or CT_XSLIDER.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value SliderSpeed(Value rightInstance)
            {
                return new Value(GameValueMethods.SliderSpeed(rightInstance));
            }

            /// <summary>
            /// Returns true if Sling Load Assistant is open.
            /// </summary>
            /// <returns>Value bool</returns>
            public static Value SlingLoadAssistantShown()
            {
                return new Value(GameValueMethods.SlingLoadAssistantShown());
            }

            /// <summary>
            /// Get array with all magazines of the given unit.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value SoldierMagazines(Value rightInstance)
            {
                return new Value(GameValueMethods.SoldierMagazines(rightInstance));
            }

            /// <summary>
            /// Check if unit has some ammo.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value bool</returns>
            public static Value SomeAmmo(Value rightInstance)
            {
                return new Value(GameValueMethods.SomeAmmo(rightInstance));
            }

            /// <summary>
            /// Attempts to sort given array either in ascending (true) or descending (false) order. ⚠This will modify the original array!
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value Sort(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.Sort(leftInstance, rightInstance));
            }

            /// <summary>
            /// Returns the current sound volume (set by fadeSound).
            /// </summary>
            /// <returns>Value scalar</returns>
            public static Value SoundVolume()
            {
                return new Value(GameValueMethods.SoundVolume());
            }

            /// <summary>
            /// Adds given set of compiled instructions to the scheduler. Exactly when the code will be executed is unknown, it depends on how busy is the engine and how filled up is the scheduler. Therefore spawn does not wait for the supplied code to finish, instead, spawn returns a Script handle to the scheduler task. scriptDone command can be used to check the code completion. Additional arguments are passed to the code in local variable _this. Since 1.56 the script handle also exists inside the code in _thisScript variable. To see what spawned scripts are currently in the scheduler, use diag_activeSQFScripts command. ⚠When multiple Code is spawned in an order, there is no guarantee that the spawned Code will execute in the same order (see Example 2). If the order is important, use BIS_fnc_spawnOrdered.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value script</returns>
            public static Value Spawn(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.Spawn(leftInstance, rightInstance));
            }

            /// <summary>
            /// Returns the speaker class name of a unit.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value string</returns>
            public static Value Speaker(Value rightInstance)
            {
                return new Value(GameValueMethods.Speaker(rightInstance));
            }

            /// <summary>
            /// Returns the current speech volume (set by fadeSpeech)
            /// </summary>
            /// <returns>Value scalar</returns>
            public static Value SpeechVolume()
            {
                return new Value(GameValueMethods.SpeechVolume());
            }

            /// <summary>
            /// Object speed (in km/h). Returns relative speed of given object along Y axis. An equivalent to: 3.6 * (velocityModelSpace _obj select 1)
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value scalar</returns>
            public static Value Speed(Value rightInstance)
            {
                return new Value(GameValueMethods.Speed(rightInstance));
            }

            /// <summary>
            /// Returns speed mode of the group, which can be any of the following:  "LIMITED" "NORMAL" "FULL"
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value string</returns>
            public static Value SpeedMode(Value rightInstance)
            {
                return new Value(GameValueMethods.SpeedMode(rightInstance));
            }

            /// <summary>
            /// Splits the provided ANSI string into an array of tokens according to given delimiters. For Unicode support, see forceUnicode.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value SplitString(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SplitString(leftInstance, rightInstance));
            }

            /// <summary>
            /// Returns square root of x.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value scalar_nan</returns>
            public static Value Sqrt(Value rightInstance)
            {
                return new Value(GameValueMethods.Sqrt(rightInstance));
            }

            /// <summary>
            /// Returns data about squad of given unit loaded from squad.xml as well as about unit itself. All items in returned array are String. Since Arma 2.05.147777 return array is extended to contain unique squad ID as well as Arma 3 units ID
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value SquadParams(Value rightInstance)
            {
                return new Value(GameValueMethods.SquadParams(rightInstance));
            }

            /// <summary>
            /// Returns the stance of the given unit.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value string</returns>
            public static Value Stance(Value rightInstance)
            {
                return new Value(GameValueMethods.Stance(rightInstance));
            }

            /// <summary>
            /// Shows loading screen with the given text, using the given resource. While loading screen is shown, simulation and scene drawing is disabled, user control is disabled, mouse cursor is hidden, scripts run at full speed (50ms per frame instead of 3ms per frame for Scheduled Scripts). By default, startLoadingScreen will use "RscDisplayNotFreeze" resource. A custom resource can be defined in Description.ext, and a full black background will be used by default - the following controls are supported by the engine: idc = 101 - text (type = 0) or picture (type = 48). The text will be set to the value provided by the command argument. idc = 103 - progress (type = 8) or animated texture (type = 45). This control indicates global hardcoded mission loading progress and is useless after the mission is loaded. idc = 104 - progress (type = 8). This control's progress is initially set to 0 and can be manipulated with progressLoadingScreen command. Resource can be defined in Description.ext; it must NOT be defined as RscTitles! See config example // basic defines - pre "import" keyword in v2.02 class RscText { 	type = 0; 	idc = -1; 	x = 0; 	y = 0; 	h = 0.037; 	w = 0.3; 	style = 0x100; 	font = Zeppelin32; 	SizeEx = 0.03921; 	colorText[] = { 1, 1, 1, 1 }; 	colorBackground[] = { 0, 0, 0, 0 }; 	linespacing = 1; }; class RscPicture { 	access = 0; 	type = 0; 	idc = -1; 	style = 48; 	colorBackground[] = { 0, 0, 0, 0 }; 	colorText[] = { 1, 1, 1, 1 }; 	font = "TahomaB"; 	sizeEx = 0; 	lineSpacing = 0; 	text = ""; }; class RscLoadingText : RscText { 	style = 2; 	x = 0.323532; 	y = 0.666672; 	w = 0.352944; 	h = 0.039216; 	sizeEx = 0.03921; 	colorText[] = { 0.543, 0.5742, 0.4102, 1.0 }; }; class RscProgress { 	x = 0.344; 	y = 0.619; 	w = 0.313726; 	h = 0.0261438; 	texture = "\ca\ui\data\loadscreen_progressbar_ca.paa"; 	colorFrame[] = { 0, 0, 0, 0 }; 	colorBar[] = { 1, 1, 1, 1 }; }; class RscProgressNotFreeze { 	idc = -1; 	type = 45; 	style = 0; 	x = 0.022059; 	y = 0.911772; 	w = 0.029412; 	h = 0.039216; 	texture = "#(argb,8,8,3)color(0,0,0,0)"; }; // end of basic defines class WIKI_loadingScreen {  	idd = -1; 	duration = 10e10; 	fadein = 0; 	fadeout = 0; 	name = "loading screen"; 	class controlsBackground 	{ 		class blueBackground : RscText // covers the black screen 		{ 			x = safezoneXAbs; 			y = safezoneY; 			w = safezoneWAbs; 			h = safezoneH; 			text = ""; 			colorText[] = { 0, 0, 0, 0 }; 			colorBackground[] = { 0, 0, 1, 1 }; 		}; 		class nicePic : RscPicture 		{ 			style = 48 + 0x800; // ST_PICTURE + ST_KEEP_ASPECT_RATIO 			x = safezoneX + safezoneW/2 - 0.25; 			y = safezoneY + safezoneH/2 - 0.2; 			w = 0.5; 			h = 0.4; 			text = "imgicePic.paa"; 		}; 	}; 	class controls 	{ 		class Title1 : RscLoadingText 		{ 			text = "$STR_LOADING"; // "Loading" text in the middle of the screen 		}; 		class CA_Progress : RscProgress // progress bar, has to have idc 104 		{ 			idc = 104; 			type = 8; // CT_PROGRESS 			style = 0; // ST_SINGLE 			texture = "\ca\ui\data\loadscreen_progressbar_ca.paa"; 		}; 		class CA_Progress2 : RscProgressNotFreeze // progress bar that will go reverse 		{ 			idc = 103; 		}; 		class Name2: RscText // the text on the top-left 		{ 			idc = 101; 			x = 0.05; 			y = 0.029412; 			w = 0.9; 			h = 0.04902; 			text = ""; 			sizeEx = 0.05; 			colorText[] = { 0.543, 0.5742, 0.4102, 1.0 }; 		}; 	}; }; ⚠ The loading screen does not end by itself and absolutely needs a call to endLoadingScreen command Game simulation is disabled during Loading Screen operation (at least in single player): do not use the sleep command between startLoadingScreen and endLoadingScreen as it may freeze the game - use uiSleep instead waitUntil can be used to wait for variable initialisation or script loading Use BIS_fnc_startLoadingScreen to prevent potential usage conflicts.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value StartLoadingScreen(Value rightInstance)
            {
                return new Value(GameValueMethods.StartLoadingScreen(rightInstance));
            }

            /// <summary>
            /// Optional step value. A countdown can be made with a negative value. If not set, the default step is 1.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value for</returns>
            public static Value Step(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.Step(leftInstance, rightInstance));
            }

            /// <summary>
            /// Stop an AI unit from turning or moving, preventing it to follow a watched object or engage an enemy properly - although if properly aligned, the unit -will- shoot the enemy. It may still change the stance if deemed appropriate (e.g. under fire). Use disableAI to disable specific AI capabilities.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value Stop(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.Stop(leftInstance, rightInstance));
            }

            /// <summary>
            /// Instant engines stop.  For this command to have any effect, the Advanced Flight Model (AFM) has to be enabled. AFM status can be checked with difficultyEnabledRTD.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value StopEngineRTD(Value rightInstance)
            {
                return new Value(GameValueMethods.StopEngineRTD(rightInstance));
            }

            /// <summary>
            /// Check if unit is stopped by stop command.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value bool</returns>
            public static Value Stopped(Value rightInstance)
            {
                return new Value(GameValueMethods.Stopped(rightInstance));
            }

            /// <summary>
            /// Converts any value into a string, depending on its type. If an Object has a vehicleVarName, it is returned (see Example 4).
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value string</returns>
            public static Value Str(Value rightInstance)
            {
                return new Value(GameValueMethods.Str(rightInstance));
            }

            /// <summary>
            /// Time sunOrMoon 12:00 1 (...) 1 18:39 0.911201 18:42 0.576303 18:45 0.240862 18:48 0 (...) 0 06:00 0.0695308 06:03 0.739519 06:09 1 (...) 1 Returns the moon to sun transition state in range 0..1. The return value is either 0 or 1 most of the time, the in-between values only returned during a few minutes in the morning and in the evening, depending on the date, and could be similar to shown here: Sunrise in Arma 3 VR Sunset in Arma 3 VR
            /// </summary>
            /// <returns>Value scalar</returns>
            public static Value SunOrMoon()
            {
                return new Value(GameValueMethods.SunOrMoon());
            }

            /// <summary>
            /// Creates a list of supported operators and type. Each field of array has the format: "x:name" Where x can be: 't' - type 'n' - nullar operator 'u' - unary operator 'b' - binary operator. 'name' is the operator or type name (in case operator, type of input operands is included).  mask parameter can be an empty string, or one of field. In this case, function returns empty array, if operator is not included in the list. Limited wildcard support is available. Type x may be replaced with *, meaning all types. For the mask partial match may be used, like abc*, meaning any operators starting with 'abc' are reported, for example:  "" - list all types and commands "t:*" - list all types "*:<command>*" - list all entries for script <command> 2.00 "i:<command>" - extended information about script <command>, Array of Array of Strings in format:[type, lowerCaseName, camelCaseName, description, example, result, resultType, leftArgType, rightArgType, 2.02 syntax] "i:*" is not a wildcard but returns information about the multiplication operator instead.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value SupportInfo(Value rightInstance)
            {
                return new Value(GameValueMethods.SupportInfo(rightInstance));
            }

            /// <summary>
            /// Force suppressive fire from the unit.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SuppressFor(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SuppressFor(leftInstance, rightInstance));
            }

            /// <summary>
            /// Returns whether there is water at given position. In Arma 3, it also detects pond objects, but only if they are loaded in memory (normally only true if the objects are within the object view distance)
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value bool</returns>
            public static Value SurfaceIsWater(Value rightInstance)
            {
                return new Value(GameValueMethods.SurfaceIsWater(rightInstance));
            }

            /// <summary>
            /// Returns terrain's surface normal on given position.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value SurfaceNormal(Value rightInstance)
            {
                return new Value(GameValueMethods.SurfaceNormal(rightInstance));
            }

            /// <summary>
            /// Same as surfaceType, but returns texture path to ground texture as string. The texture returned is of the ground, even if there is a road at that position. To get road texture use getRoadInfo command.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value string</returns>
            public static Value SurfaceTexture(Value rightInstance)
            {
                return new Value(GameValueMethods.SurfaceTexture(rightInstance));
            }

            /// <summary>
            /// Returns what surface type is at the given position. For surface texture see surfaceTexture command. The command returns surface type of the ground, even underneath objects such as buildings and roads Show surface types (Armed Assault) #GRASSSOUTH #GRASSGENERAL #SANDGENERAL Show surface types (Arma 2) #UTGRASS - for natural surfaces #UTCONCRETE - for urban surfaces Show surface types (Arma 3) BuildingRubble BuildingRubble_exp cardboard cardboard_exp carpet carpet_exp carpet_inside carpet_in_exp concrete concrete_exp concrete_hall concrete_hall_exp concrete_inside concrete_in_exp concrete_out Default dirtrunway floor floor_exp floor_inside floor_in_exp GdtAsphalt GdtBeach GdtCliff GdtConcrete GdtDead GdtDesert GdtDirt GdtField GdtForest GdtForestMalden GdtForestPine GdtGrassDry GdtGrassGreen GdtGrassLong GdtGrassShort GdtGrassTall GdtGrassWild GdtKLCobblestone GdtKLDirt GdtKlField GdtKLForestCon GdtKLForestDec GdtKLGrass1 GdtKLGrass2 GdtKlSoil GdtKlStubble GdtKlTarmac GdtKlWeatheredTarmac GdtMarsh GdtMud GdtRedDirt GdtRock GdtRubble GdtSeabed GdtSeabedExp GdtSoil GdtStony GdtStonyThistle GdtStratisBeach GdtStratisConcrete GdtStratisDirt GdtStratisDryGrass GdtStratisForestPine GdtStratisGreenGrass GdtStratisRocky GdtStratisSeabed GdtStratisSeabedCluttered GdtStratisThistles GdtThorn GdtVolcano GdtVolcanoBeach GdtVRsurface01 GdtWeed GdtWildField grid grid_exp lino lino_exp lino_in_exp mat_in_exp metalPlate metalPlatePressed_exp metalPlate_exp metalPlate_in_exp mud mud_exp parquet planks planks_exp planks_inside planks_in_exp road road_exp roof_tiles_exp rubble rubble_exp sand sand_exp softwood_in_exp steel steel_exp stones stones_exp straw_exp SurfIntConcrete SurfIntMetal SurfIntTiles SurfIntWood surfint_concrete surfint_metal surfint_tiles surfint_wood SurfMetal SurfRoadConcrete SurfRoadConcrete_exp SurfRoadDirt SurfRoadDirt_Enoch SurfRoadDirt_exp SurfRoadTarmac SurfRoadTarmac1_Enoch SurfRoadTarmac2_Enoch SurfRoadTarmac3_Enoch SurfRoadTarmac_exp SurfRoofTiles SurfRoofTin SurfTrailDirt_Enoch SurfTrailDirt_exp SurfWater SurfWood surf_metal surf_roadconcrete surf_roaddirt surf_roadtarmac surf_rooftiles surf_rooftin surf_wood TEST_SurfNormal tiling trash trash_exp Water wavyMetal wavyMetal_exp woodenFloor
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value string</returns>
            public static Value SurfaceType(Value rightInstance)
            {
                return new Value(GameValueMethods.SurfaceType(rightInstance));
            }

            /// <summary>
            /// Sets the target depth level for swimming soldier. Depth should be a negative number.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SwimInDepth(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SwimInDepth(leftInstance, rightInstance));
            }

            /// <summary>
            /// Checks if the given parameter matches any case. If so, the code block of that case will be executed. After that the switch ends so no further cases will be checked. If a case has no code block the code of the next case will automatically be executed, making it possible to formulate a logical "or" for cases which would otherwise contain the exact same code (see Example 2). The default block will be executed only if no case matches, no matter its position inside the code block. It is not a case, and will never be entered by fallthrough. String comparison is case-sensitive. Use toUpper, toLower, toLowerANSI or toUpperANSI to force all strings to the same case. if no default block is provided and no case is matched, the switch block returns the default value true, otherwise it returns what the valid case block returns.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value switch</returns>
            public static Value Switch(Value rightInstance)
            {
                return new Value(GameValueMethods.Switch(rightInstance));
            }

            /// <summary>
            /// Returns a list of playable units available for switching to Command is relative to the client on which it is executed and will only show playable units for the same side as player's group + player himself In singleplayer where playable units from all sides will be accessible via this command Dead and player-controlled units are automatically removed from the resulting array In order to get all playable units regardless of their side, see the playableUnits command
            /// </summary>
            /// <returns>Value array</returns>
            public static Value SwitchableUnits()
            {
                return new Value(GameValueMethods.SwitchableUnits());
            }

            /// <summary>
            /// When used on a person, the given action is started immediately (there is no transition). Use switchmove "" to switch back to the default movement if there is no transition back, otherwise the person may be stuck.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SwitchAction(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SwitchAction(leftInstance, rightInstance));
            }

            /// <summary>
            /// Switch camera to given vehicle / camera. Mode is one of: "INTERNAL": 1st person "GUNNER": optics / sights "EXTERNAL": 3rd person "GROUP": group "CARGO": same as "INTERNAL" If you switch to a unit in a vehicle, this command uses the correct turret. Control over the unit is not given to the player. Use selectPlayer or a combination of switchCamera and remoteControl to achieve this.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SwitchCamera(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SwitchCamera(leftInstance, rightInstance));
            }

            /// <summary>
            /// When used on a person,the given move is started immediately (without transition).
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SwitchGesture(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SwitchGesture(leftInstance, rightInstance));
            }

            /// <summary>
            /// Controls whether a lamp is lit or not. This command was originally designed to only work with CfgNonAIVehicles class "StreetLamp" only. Since Arma 3 v1.92 this command was extended to work with street lights and some prop lights, like portable construction light.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SwitchLight(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SwitchLight(leftInstance, rightInstance));
            }

            /// <summary>
            /// Immediately applies given animation to the unit. For a smooth transition from the current animation, use playMove. see Moves for respective games animations. This command first resets the unit's animation states (including aiming state, gesture state, etc.) then puts the unit in the first frame of the animation (therefore showing no transition). If an invalid animation is provided, the unit's animations will be reset but no new animation will be played (see Example 3). It is a good practice to always use playMoveNow after switchMove to make sure the animation plays correctly: _unit switchMove "myMove"; _unit playMoveNow "myMove";
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SwitchMove(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SwitchMove(leftInstance, rightInstance));
            }

            /// <summary>
            /// Return the list of objects synchronized with the given unit.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value SynchronizedObjects(Value rightInstance)
            {
                return new Value(GameValueMethods.SynchronizedObjects(rightInstance));
            }

            /// <summary>
            /// Returns the list of triggers synchronized with a given waypoint.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value SynchronizedTriggers(Value rightInstance)
            {
                return new Value(GameValueMethods.SynchronizedTriggers(rightInstance));
            }

            /// <summary>
            /// Returns the list of waypoints synchronized with a given trigger or waypoint.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value SynchronizedWaypoints(Value rightInstance)
            {
                return new Value(GameValueMethods.SynchronizedWaypoints(rightInstance));
            }

            /// <summary>
            /// Add given objects to the unit's list of synchronized objects.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SynchronizeObjectsAdd(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SynchronizeObjectsAdd(leftInstance, rightInstance));
            }

            /// <summary>
            /// Removes given objects from the unit's list of synchronized objects.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SynchronizeObjectsRemove(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SynchronizeObjectsRemove(leftInstance, rightInstance));
            }

            /// <summary>
            /// Synchronizes the trigger with zero or more waypoints.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SynchronizeTrigger(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SynchronizeTrigger(leftInstance, rightInstance));
            }

            /// <summary>
            /// Synchronizes the trigger or the waypoint with an array of waypoints.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SynchronizeWaypoint(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.SynchronizeWaypoint(leftInstance, rightInstance));
            }

            /// <summary>
            /// Types text to the system radio channel. The text will be visible only on the PC where command was executed. If you need the message to show on all computers, you have to execute it globally (see remoteExec).
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value SystemChat(Value rightInstance)
            {
                return new Value(GameValueMethods.SystemChat(rightInstance));
            }

            /// <summary>
            /// Returns the currently selected system of units. 0: Metric 1: Mixed (ground vehicles use Metric / air vehicles use Imperial) 2: Imperial
            /// </summary>
            /// <returns>Value scalar</returns>
            public static Value SystemOfUnits()
            {
                return new Value(GameValueMethods.SystemOfUnits());
            }

            /// <summary>
            /// Returns system time.
            /// </summary>
            /// <returns>Value array</returns>
            public static Value SystemTime()
            {
                return new Value(GameValueMethods.SystemTime());
            }

            /// <summary>
            /// Returns systemTime according to Universal Time Coordinated time scale.
            /// </summary>
            /// <returns>Value array</returns>
            public static Value SystemTimeUTC()
            {
                return new Value(GameValueMethods.SystemTimeUTC());
            }

            /// <summary>
            /// 
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value scalar_nan</returns>
            public static Value Tan(Value rightInstance)
            {
                return new Value(GameValueMethods.Tan(rightInstance));
            }

            /// <summary>
            /// Returns unit's knowledge about target.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value TargetKnowledge(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.TargetKnowledge(leftInstance, rightInstance));
            }

            /// <summary>
            /// Retrieves list of given unit targets matching specified filter. If the filter is not specified, all targets are returned. If a unit is provided, the unit itself will be excluded from results. If a group is provided, its units will be excluded (even if renegades).
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value Targets(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.Targets(leftInstance, rightInstance));
            }

            /// <summary>
            /// Aggregate candidates.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value TargetsAggregate(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.TargetsAggregate(leftInstance, rightInstance));
            }

            /// <summary>
            /// Returns sorted array of targets, known to the enquirer (including own troops), where the accuracy coefficient reflects how close the result matches the query. This command could be CPU intensive.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value TargetsQuery(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.TargetsQuery(leftInstance, rightInstance));
            }

            /// <summary>
            /// Returns true if the task is flagged to be always visible or false if not.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value bool</returns>
            public static Value TaskAlwaysVisible(Value rightInstance)
            {
                return new Value(GameValueMethods.TaskAlwaysVisible(rightInstance));
            }

            /// <summary>
            /// Return the child tasks of the specified task.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value TaskChildren(Value rightInstance)
            {
                return new Value(GameValueMethods.TaskChildren(rightInstance));
            }

            /// <summary>
            /// Return if task is completed. (state Succeeded, Failed or Canceled)
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value bool</returns>
            public static Value TaskCompleted(Value rightInstance)
            {
                return new Value(GameValueMethods.TaskCompleted(rightInstance));
            }

            /// <summary>
            /// Returns custom data attached to the local task or an empty array if there are no custom data attached.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value TaskCustomData(Value rightInstance)
            {
                return new Value(GameValueMethods.TaskCustomData(rightInstance));
            }

            /// <summary>
            /// Returns the sub-parts of the task description. The returned Array is in format [Task description, Task title, Task waypoint description].
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value TaskDescription(Value rightInstance)
            {
                return new Value(GameValueMethods.TaskDescription(rightInstance));
            }

            /// <summary>
            /// Returns the position of the task (as specified by destination parameter in config).
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value TaskDestination(Value rightInstance)
            {
                return new Value(GameValueMethods.TaskDestination(rightInstance));
            }

            /// <summary>
            /// Shows info about new, changed or failed task. The text can contain several lines.  is used to set a line return. It is recommended to use BIS_fnc_showNotification in order to maintain Arma 3's visual style.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value TaskHint(Value rightInstance)
            {
                return new Value(GameValueMethods.TaskHint(rightInstance));
            }

            /// <summary>
            /// Returns model space position for the task marker
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value TaskMarkerOffset(Value rightInstance)
            {
                return new Value(GameValueMethods.TaskMarkerOffset(rightInstance));
            }

            /// <summary>
            /// Returns the name of the given task.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value string</returns>
            public static Value TaskName(Value rightInstance)
            {
                return new Value(GameValueMethods.TaskName(rightInstance));
            }

            /// <summary>
            /// A non-existing Task. To compare non-existent tasks use isNull or isEqualTo: taskNull == taskNull;			// false isNull taskNull;				// true taskNull isEqualTo taskNull;	// true
            /// </summary>
            /// <returns>Value task</returns>
            public static Value TaskNull()
            {
                return new Value(GameValueMethods.TaskNull());
            }

            /// <summary>
            /// Returns the parent task of the specified task.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value task</returns>
            public static Value TaskParent(Value rightInstance)
            {
                return new Value(GameValueMethods.TaskParent(rightInstance));
            }

            /// <summary>
            /// Send a result of the task to the task sender.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value TaskResult(Value rightInstance)
            {
                return new Value(GameValueMethods.TaskResult(rightInstance));
            }

            /// <summary>
            /// Returns the current state of a task.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value string</returns>
            public static Value TaskState(Value rightInstance)
            {
                return new Value(GameValueMethods.TaskState(rightInstance));
            }

            /// <summary>
            /// Returns the type of the given task. A new task returns "Default" for the type.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value string</returns>
            public static Value TaskType(Value rightInstance)
            {
                return new Value(GameValueMethods.TaskType(rightInstance));
            }

            /// <summary>
            /// Return an agent for given person.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value team_member</returns>
            public static Value TeamMember(Value rightInstance)
            {
                return new Value(GameValueMethods.TeamMember(rightInstance));
            }

            /// <summary>
            /// A non-existent Team Member. To compare non-existent team members use isNull or isEqualTo: teamMemberNull == teamMemberNull;			// false isNull teamMemberNull;						// true teamMemberNull isEqualTo teamMemberNull;	// true
            /// </summary>
            /// <returns>Value team_member</returns>
            public static Value TeamMemberNull()
            {
                return new Value(GameValueMethods.TeamMemberNull());
            }

            /// <summary>
            /// Return a name of given team.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value string</returns>
            public static Value TeamName(Value rightInstance)
            {
                return new Value(GameValueMethods.TeamName(rightInstance));
            }

            /// <summary>
            /// Return a list of teams in the current mission.
            /// </summary>
            /// <returns>Value array</returns>
            public static Value Teams()
            {
                return new Value(GameValueMethods.Teams());
            }

            /// <summary>
            /// Invoke the Team Switch dialog (force it even when conditions are not met). There has to be at least one playable unit for team switch to work, and for this command to work in MP, respawn type in description.ext should be 5 (SIDE).When player switches and leaves behind AI unit, you need to enable "TeamSwitch" AI on it _unit enableAI "TeamSwitch" so that the unit continues with waypoints.
            /// </summary>
            /// <returns>Value nothing</returns>
            public static Value TeamSwitch()
            {
                return new Value(GameValueMethods.TeamSwitch());
            }

            /// <summary>
            /// Check if Team Switch is currently enabled. Team Switch is enabled by default.
            /// </summary>
            /// <returns>Value bool</returns>
            public static Value TeamSwitchEnabled()
            {
                return new Value(GameValueMethods.TeamSwitchEnabled());
            }

            /// <summary>
            /// Returns a type of given team.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value string</returns>
            public static Value TeamType(Value rightInstance)
            {
                return new Value(GameValueMethods.TeamType(rightInstance));
            }

            /// <summary>
            /// Terminates (aborts) spawned or execVMed script. ⚠The given script will not terminate immediately upon terminate command execution, it will do so the next time the script is processed by the scheduler
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value Terminate(Value rightInstance)
            {
                return new Value(GameValueMethods.Terminate(rightInstance));
            }

            /// <summary>
            /// Checks for intersection of terrain between two AGL positions. Returns true if intersects with terrain. For ASL variant see terrainIntersectASL.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value bool</returns>
            public static Value TerrainIntersect(Value rightInstance)
            {
                return new Value(GameValueMethods.TerrainIntersect(rightInstance));
            }

            /// <summary>
            /// Checks for intersection of terrain between two ASL positions. Returns true if intersects with terrain. For AGL variant, see terrainIntersect.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value bool</returns>
            public static Value TerrainIntersectASL(Value rightInstance)
            {
                return new Value(GameValueMethods.TerrainIntersectASL(rightInstance));
            }

            /// <summary>
            /// Checks for intersection of terrain between two ASL positions. Same as terrainIntersectASL but returns the intersection ASL position.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value TerrainIntersectAtASL(Value rightInstance)
            {
                return new Value(GameValueMethods.TerrainIntersectAtASL(rightInstance));
            }

            /// <summary>
            /// Creates a structured text containing the given plain text if argument is String. Use setAttributes to set additional  attributes on the text. If the argument is location, returns location's text value (see Alt Syntax).
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value string</returns>
            public static Value Text(Value rightInstance)
            {
                return new Value(GameValueMethods.Text(rightInstance));
            }

            /// <summary>
            /// Dump argument value to debugging output.  ⚠This command is non-functional in the retail version
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value TextLog(Value rightInstance)
            {
                return new Value(GameValueMethods.TextLog(rightInstance));
            }

            /// <summary>
            /// Debugging output.  ⚠This command is non-functional in the retail version
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value TextLogFormat(Value rightInstance)
            {
                return new Value(GameValueMethods.TextLogFormat(rightInstance));
            }

            /// <summary>
            /// Identical to tan
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value scalar_nan</returns>
            public static Value Tg(Value rightInstance)
            {
                return new Value(GameValueMethods.Tg(rightInstance));
            }

            /// <summary>
            /// Links an If Type with Code to be executed if said If Type's condition is true; otherwise, "else" code is executed if provided. The alternative syntax allows to set "then" code and "else" code in one array. Variables declared inside thenCode are private to that code block - see Variables - Local Variables Scope.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value any</returns>
            public static Value Then(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.Then(leftInstance, rightInstance));
            }

            /// <summary>
            /// Throws an exception. The exception is processed by first catch block. This command will terminate further execution of the code. ⚠Avoid using alternative shorthand syntax if you are planning on preparing your exception information dynamically, as it will have to be generated first regardless of the condition of the if statement before it, as shown in Example 3.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value Throw(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.Throw(leftInstance, rightInstance));
            }

            /// <summary>
            /// Returns time elapsed since mission started (in seconds). The value is different on each client. If you need unified time, use serverTime.
            /// </summary>
            /// <returns>Value scalar</returns>
            public static Value Time()
            {
                return new Value(GameValueMethods.Time());
            }

            /// <summary>
            /// Returns the value set with setTimeMultiplier.
            /// </summary>
            /// <returns>Value scalar</returns>
            public static Value TimeMultiplier()
            {
                return new Value(GameValueMethods.TimeMultiplier());
            }

            /// <summary>
            /// Displays text on screen. 🕖The following information is obsolete. Reason: cutText should be used instead.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value TitleCut(Value rightInstance)
            {
                return new Value(GameValueMethods.TitleCut(rightInstance));
            }

            /// <summary>
            /// Terminate the title effect and set duration of the fade out phase to the given time. Same as cutFadeOut but for the title layer.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value TitleFadeOut(Value rightInstance)
            {
                return new Value(GameValueMethods.TitleFadeOut(rightInstance));
            }

            /// <summary>
            /// Shows object defined in global config in CfgTitles
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value TitleObj(Value rightInstance)
            {
                return new Value(GameValueMethods.TitleObj(rightInstance));
            }

            /// <summary>
            /// Displays a resource defined in RscTitles. Also see cutRsc, with these two commands you can show two different resources at once. Multiple layers and map overlays are possible with cutRsc which provides more options and handles layers better.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value TitleRsc(Value rightInstance)
            {
                return new Value(GameValueMethods.TitleRsc(rightInstance));
            }

            /// <summary>
            /// Displays text across the screen. If used along with cutText two different texts (in different type styles) can be shown at once. The text can be displayed on multiple lines by using "" new line characters (see Example 3).
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value TitleText(Value rightInstance)
            {
                return new Value(GameValueMethods.TitleText(rightInstance));
            }

            /// <summary>
            /// Continue sequence of for construct. It sets the end value of the index variable.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value for</returns>
            public static Value To(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.To(leftInstance, rightInstance));
            }

            /// <summary>
            /// Converts the supplied String into an Array of Numbers. The numbers in the created array are the decimal Unicode representations of characters. Since v2.04 this command can also handle HashMaps. See alternative syntax.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value ToArray(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.ToArray(leftInstance, rightInstance));
            }

            /// <summary>
            /// Converts a number into a string, keeping the specified number of decimals. If the desired number of decimals is higher than the actual number, nulls are added to create the desired decimal length. This command is almost identical in behaviour to JavaScript toFixed() The alternative syntax acts as keyword and switches engine's Number to String global conversion into desired format, from the moment it is applied until the end of script. To reset output back to default at any time, use toFixed -1 - see Example 5. Converted number is never presented in scientific notation unlike with other number to string commands. Also Arma's default string conversion limits numbers to 6 significant figures, whereas with this command it is possible to preserve some extra precision - see Example 6.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value string</returns>
            public static Value ToFixed(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.ToFixed(leftInstance, rightInstance));
            }

            /// <summary>
            /// Converts the supplied Unicode string to all lowercase characters. If the string doesn't have characters with codes > 255, use toLowerANSI.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value string</returns>
            public static Value ToLower(Value rightInstance)
            {
                return new Value(GameValueMethods.ToLower(rightInstance));
            }

            /// <summary>
            ///  ISO-8859-1 Converts the supplied string to all lower case characters fast (could be 3× faster than toLower). ANSI in this case refers to ISO-8859-1 code page. The command is primary designed to convert characters with  codes 0...127 however it will also convert other characters in 128...255 range as long as they are present in ISO-8859-1 codepage. For Unicode alternative see toLower.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value string</returns>
            public static Value ToLowerANSI(Value rightInstance)
            {
                return new Value(GameValueMethods.ToLowerANSI(rightInstance));
            }

            /// <summary>
            /// Converts the supplied Array of Numbers into a String through Unicode characters representation conversion, or provided Code to compilable String.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value string</returns>
            public static Value ToString(Value rightInstance)
            {
                return new Value(GameValueMethods.ToString(rightInstance));
            }

            /// <summary>
            /// Converts the supplied Unicode string to all uppercase characters. If the string doesn't have characters with codes > 255, use toUpperANSI.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value string</returns>
            public static Value ToUpper(Value rightInstance)
            {
                return new Value(GameValueMethods.ToUpper(rightInstance));
            }

            /// <summary>
            ///  ISO-8859-1Converts the supplied string to all upper case characters fast (could be 3x faster than toUpper). ANSI in this case refers to ISO-8859-1 code page. The command is primary designed to convert characters with  codes 0...127 however will also convert other characters in 128...255 range as long as they are present in ISO-8859-1 codepage. For Unicode alternative see toUpper.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value string</returns>
            public static Value ToUpperANSI(Value rightInstance)
            {
                return new Value(GameValueMethods.ToUpperANSI(rightInstance));
            }

            /// <summary>
            /// Returns true if the trigger has been activated.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value bool</returns>
            public static Value TriggerActivated(Value rightInstance)
            {
                return new Value(GameValueMethods.TriggerActivated(rightInstance));
            }

            /// <summary>
            /// Returns trigger activation in the form [by, type, repeating].  ⚠The trigger could be local or remote but the result returned by this command will be for the trigger activation set up locally on the client that executed the command. See createTrigger for more info.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value TriggerActivation(Value rightInstance)
            {
                return new Value(GameValueMethods.TriggerActivation(rightInstance));
            }

            /// <summary>
            /// Triggers a munition such as shells, bullets, missiles, rockets, mines and bombs (shotSubmunition/shotShell/shotBullet/shotMissile/shotRocket) as if it did hit. If ammo uses submunition, then creation of submunition will be triggered.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value TriggerAmmo(Value rightInstance)
            {
                return new Value(GameValueMethods.TriggerAmmo(rightInstance));
            }

            /// <summary>
            /// Returns currently monitored trigger area. Since Arma 3 v1.60, the command returns 3rd dimension for the monitored area. If height is not set, the value for it would be -1. ⚠The trigger could be local or remote but the result returned by this command will be for the trigger area set up locally on the client that executed the command. See createTrigger for more info.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value TriggerArea(Value rightInstance)
            {
                return new Value(GameValueMethods.TriggerArea(rightInstance));
            }

            /// <summary>
            /// Returns vehicle attached to the trigger (for example using triggerAttachVehicle). ⚠The trigger could be local or remote but the result returned by this command will be for the vehicle attached locally on the client that executed the command. See createTrigger for more info.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value object</returns>
            public static Value TriggerAttachedVehicle(Value rightInstance)
            {
                return new Value(GameValueMethods.TriggerAttachedVehicle(rightInstance));
            }

            /// <summary>
            /// Assigns a static object to the trigger. The activation source is changed to "STATIC".
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value TriggerAttachObject(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.TriggerAttachObject(leftInstance, rightInstance));
            }

            /// <summary>
            /// Specifies the entity which will activate the selected trigger. If [] is given, the trigger is decoupled from the assigned vehicle (example 2). If the activation source is "VEHICLE", "GROUP", "LEADER" or "MEMBER", it is changed to "NONE". If [vehicle] is given, the trigger is coupled to the vehicle or its group. When the source is "GROUP", "LEADER" or "MEMBER", it is coupled to the group, otherwise it is coupled to the vehicle and the source is changed to "VEHICLE".
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value TriggerAttachVehicle(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.TriggerAttachVehicle(leftInstance, rightInstance));
            }

            /// <summary>
            /// Controls the ability of given unit to activate entities with disabled Arma 3: Dynamic Simulation. If false dynamically disabled entities will not be activated by this unit's presence. This command has the same effect as the Eden Editor attribute Wake-Up Dynamic Simulation.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value TriggerDynamicSimulation(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.TriggerDynamicSimulation(leftInstance, rightInstance));
            }

            /// <summary>
            /// Returns trigger condition check frequency in seconds.  ⚠The trigger could be local or remote but the result returned by this command will be for the trigger interval set up locally on the client that executed the command. See createTrigger for more info.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value scalar</returns>
            public static Value TriggerInterval(Value rightInstance)
            {
                return new Value(GameValueMethods.TriggerInterval(rightInstance));
            }

            /// <summary>
            /// Returns trigger statements.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value TriggerStatements(Value rightInstance)
            {
                return new Value(GameValueMethods.TriggerStatements(rightInstance));
            }

            /// <summary>
            /// Returns trigger text.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value string</returns>
            public static Value TriggerText(Value rightInstance)
            {
                return new Value(GameValueMethods.TriggerText(rightInstance));
            }

            /// <summary>
            /// Returns trigger timeout in the form [min, mid, max, interruptable]. ⚠The trigger could be local or remote but the result returned by this command will be for the trigger timeout set up locally on the client that executed the command. See createTrigger for more info.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value TriggerTimeout(Value rightInstance)
            {
                return new Value(GameValueMethods.TriggerTimeout(rightInstance));
            }

            /// <summary>
            /// Returns current timeout of the given trigger or -1 if countdown is not in progress.  ⚠The trigger could be local or remote but the result returned by this command will be for the current trigger timeout local to the client that executed the command. See createTrigger for more info.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value scalar</returns>
            public static Value TriggerTimeoutCurrent(Value rightInstance)
            {
                return new Value(GameValueMethods.TriggerTimeoutCurrent(rightInstance));
            }

            /// <summary>
            /// Returns the trigger type.  ⚠The trigger could be local or remote but the result returned by this command will be for the trigger type set up locally on the client that executed the command. See createTrigger for more info.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value string</returns>
            public static Value TriggerType(Value rightInstance)
            {
                return new Value(GameValueMethods.TriggerType(rightInstance));
            }

            /// <summary>
            /// Trims a string.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value string</returns>
            public static Value Trim(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.Trim(leftInstance, rightInstance));
            }

            /// <summary>
            /// Always true
            /// </summary>
            /// <returns>Value bool</returns>
            public static Value True()
            {
                return new Value(GameValueMethods.True());
            }

            /// <summary>
            /// Defines a try-catch structure. This sets up an exception handling block. Any thrown exception in a try block is caught in a catch block. The structured exception block has the following form: try { /* block that can throw exception */ } catch { /* block that processes the exception. Exception is described in the _exception variable */ };
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value exception</returns>
            public static Value Try(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.Try(leftInstance, rightInstance));
            }

            /// <summary>
            /// Checks if a turret is local.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value bool</returns>
            public static Value TurretLocal(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.TurretLocal(leftInstance, rightInstance));
            }

            /// <summary>
            /// Returns id of the turret's owner. Returns 0 on non-server and SP.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value scalar</returns>
            public static Value TurretOwner(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.TurretOwner(leftInstance, rightInstance));
            }

            /// <summary>
            /// Returns the unit in the vehicle turret. To find turret path of known unit, see unitTurret.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value object</returns>
            public static Value TurretUnit(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.TurretUnit(leftInstance, rightInstance));
            }

            /// <summary>
            /// Adds an item with given text to Tree View control. The position on Tree View where to add the item and the actual path to this item once added are different. If item is added to existing item, then parent item path is used. If no parent exists, empty array [] is used. See Tree View Path for more information.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value scalar</returns>
            public static Value TvAdd(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.TvAdd(leftInstance, rightInstance));
            }

            /// <summary>
            /// Removes all items from Tree View with given idc.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value TvClear(Value rightInstance)
            {
                return new Value(GameValueMethods.TvClear(rightInstance));
            }

            /// <summary>
            /// Collapses tree item pointed to by the path. IDC means id of parent Tree View.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value TvCollapse(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.TvCollapse(leftInstance, rightInstance));
            }

            /// <summary>
            /// Collapses all tree items for the given Tree View.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value TvCollapseAll(Value rightInstance)
            {
                return new Value(GameValueMethods.TvCollapseAll(rightInstance));
            }

            /// <summary>
            /// Returns children count on given path. IDC means id of parent Tree View.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value scalar</returns>
            public static Value TvCount(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.TvCount(leftInstance, rightInstance));
            }

            /// <summary>
            /// Returns path to currently selected item. IDC means id of parent Tree View.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value TvCurSel(Value rightInstance)
            {
                return new Value(GameValueMethods.TvCurSel(rightInstance));
            }

            /// <summary>
            /// Returns string data from item on given path. IDC means id of parent CT_TREE.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value string</returns>
            public static Value TvData(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.TvData(leftInstance, rightInstance));
            }

            /// <summary>
            /// Removes an item with given Tree View Path from Tree View. ⚠The paths of other items on the same branch after delete operation are updated accordingly; therefore, when deleting multiple entries, start with the one with the highest index and proceed in reverse order.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value TvDelete(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.TvDelete(leftInstance, rightInstance));
            }

            /// <summary>
            /// Expands tree item pointed to by the path. IDC means id of parent Tree View.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value TvExpand(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.TvExpand(leftInstance, rightInstance));
            }

            /// <summary>
            /// Expands all tree items for the given Tree View.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value TvExpandAll(Value rightInstance)
            {
                return new Value(GameValueMethods.TvExpandAll(rightInstance));
            }

            /// <summary>
            /// Returns true if given treeview item is selected.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value bool</returns>
            public static Value TvIsSelected(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.TvIsSelected(leftInstance, rightInstance));
            }

            /// <summary>
            /// Returns name of picture from item pointed to by path. IDC means id of parent Tree View.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value string</returns>
            public static Value TvPicture(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.TvPicture(leftInstance, rightInstance));
            }

            /// <summary>
            /// Returns the right picture of a CT_TREE on given path.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value string</returns>
            public static Value TvPictureRight(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.TvPictureRight(leftInstance, rightInstance));
            }

            /// <summary>
            /// Returns array of paths to selected items.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value TvSelection(Value rightInstance)
            {
                return new Value(GameValueMethods.TvSelection(rightInstance));
            }

            /// <summary>
            /// Sets text color on given Tree View Item
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value TvSetColor(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.TvSetColor(leftInstance, rightInstance));
            }

            /// <summary>
            /// Sets cursor to given item on given path. IDC means id of parent Tree View. To deselect all items use [-1] for the path param (available since Arma 3 v1.56)
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value TvSetCurSel(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.TvSetCurSel(leftInstance, rightInstance));
            }

            /// <summary>
            /// Sets string data to item on given path. IDC means id of parent Tree View.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value TvSetData(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.TvSetData(leftInstance, rightInstance));
            }

            /// <summary>
            /// Sets picture to item selected by path. IDC means id of parent Tree View. Name is picture name. The picture is searched in the mission directory.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value TvSetPicture(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.TvSetPicture(leftInstance, rightInstance));
            }

            /// <summary>
            /// Sets the colour of the picture (set via tvSetPicture) under the specified tree view path.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value TvSetPictureColor(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.TvSetPictureColor(leftInstance, rightInstance));
            }

            /// <summary>
            /// Sets the color of left picture of a tree item defined by path when that item is disabled.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value TvSetPictureColorDisabled(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.TvSetPictureColorDisabled(leftInstance, rightInstance));
            }

            /// <summary>
            /// Sets the color of the left picture of a tree item defined by path when item is selected
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value TvSetPictureColorSelected(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.TvSetPictureColorSelected(leftInstance, rightInstance));
            }

            /// <summary>
            /// Sets right picture on the tree view item defined by path.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value TvSetPictureRight(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.TvSetPictureRight(leftInstance, rightInstance));
            }

            /// <summary>
            /// Sets color of the right picture on the tree view item defined by path
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value TvSetPictureRightColor(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.TvSetPictureRightColor(leftInstance, rightInstance));
            }

            /// <summary>
            /// Sets the color of the right picture of a tree item defined by path when item is disabled
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value TvSetPictureRightColorDisabled(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.TvSetPictureRightColorDisabled(leftInstance, rightInstance));
            }

            /// <summary>
            /// Sets the color of the right picture of a tree item defined by path when item is selected
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value TvSetPictureRightColorSelected(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.TvSetPictureRightColorSelected(leftInstance, rightInstance));
            }

            /// <summary>
            /// Sets the select color of given path.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value TvSetSelectColor(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.TvSetSelectColor(leftInstance, rightInstance));
            }

            /// <summary>
            /// Sets the selection state of given treeview item in multi-select control.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value TvSetSelected(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.TvSetSelected(leftInstance, rightInstance));
            }

            /// <summary>
            /// Sets string text to item on given path. IDC means id of parent Tree View.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value TvSetText(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.TvSetText(leftInstance, rightInstance));
            }

            /// <summary>
            /// Sets the tooltip text associated with the specified tree view path.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value TvSetTooltip(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.TvSetTooltip(leftInstance, rightInstance));
            }

            /// <summary>
            /// Sets scalar data to item on given path. IDC means id of parent Tree View. If the given value is not integer, it will be converted to integer
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value TvSetValue(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.TvSetValue(leftInstance, rightInstance));
            }

            /// <summary>
            /// Sorts all children of given path. Text of Tree View entries is used for sorting.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value TvSort(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.TvSort(leftInstance, rightInstance));
            }

            /// <summary>
            /// Sorts all children, including trees deriving from given path. Text of Tree View entries is used for sorting.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value TvSortAll(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.TvSortAll(leftInstance, rightInstance));
            }

            /// <summary>
            /// Sorts all children of given path. Value of Tree View entries is used for sorting. tvSetValue can be used to set the value for a given path.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value TvSortByValue(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.TvSortByValue(leftInstance, rightInstance));
            }

            /// <summary>
            /// Sorts all children, including trees deriving from given path.  Value of Tree View entries is used for sorting.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value TvSortByValueAll(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.TvSortByValueAll(leftInstance, rightInstance));
            }

            /// <summary>
            /// Returns shown text in the item on given path. IDC means id of parent Tree View.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value string</returns>
            public static Value TvText(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.TvText(leftInstance, rightInstance));
            }

            /// <summary>
            /// Gets the tooltip text associated with the specified tree view path.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value string</returns>
            public static Value TvTooltip(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.TvTooltip(leftInstance, rightInstance));
            }

            /// <summary>
            /// Returns numeric (Integer) value set for given tree view path.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value scalar</returns>
            public static Value TvValue(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.TvValue(leftInstance, rightInstance));
            }

            /// <summary>
            /// Returns a string of a Location's class name or Task's name (same as taskName).
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value string</returns>
            public static Value Type(Value rightInstance)
            {
                return new Value(GameValueMethods.Type(rightInstance));
            }

            /// <summary>
            /// Returns the Data Type of an expression.  The type is returned as on of the following all-uppercase strings: "ARRAY" "BOOL" "CODE" "CONFIG" "CONTROL" "DISPLAY" "GROUP" "OBJECT" "SCALAR" "SCRIPT" "SIDE" "STRING" "TEXT" 1.08 "LOCATION" 1.00 "TEAM_MEMBER" 1.00 "NAMESPACE" 1.00 "DIARY_RECORD" 1.00 "TASK" 2.02 "HASHMAP" They represent the available Data Types in Arma. For type comparison, use isEqualType command instead.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value string</returns>
            public static Value TypeName(Value rightInstance)
            {
                return new Value(GameValueMethods.TypeName(rightInstance));
            }

            /// <summary>
            /// Returns the class name of a given object.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value string</returns>
            public static Value TypeOf(Value rightInstance)
            {
                return new Value(GameValueMethods.TypeOf(rightInstance));
            }

            /// <summary>
            /// Returns array with current operator of UAV and his vehicle role in UAV. If nobody is controlling the UAV, the command tries to find any person with connected terminal to this UAV, in which case the vehicle role is an empty string. If command cannot find anyone, output is [objNull, ""]. Since Arma 3 v1.96 this command returns both driver and gunner units if the UAV is controlled by 2 players. Here is the list of all expected outputs: [player1, "DRIVER"] - player1 is controlling the UAV and is the pilot [player2, "GUNNER"] - player2 is controlling the UAV and is the gunner [player1, "DRIVER", player2, "GUNNER"] - player1 is controlling the UAV and is the pilot, player2 is controlling UAV and is the gunner [player3, ""] - no one is controlling the UAV, player3 is connected to the UAV via terminal, but not controlling it yet [objNull, ""] - nobody is controlling or connected to the UAV This command works only for vehicles, to get a unit remote controlling a unit, see Example 3 on the remoteControl page.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value UAVControl(Value rightInstance)
            {
                return new Value(GameValueMethods.UAVControl(rightInstance));
            }

            /// <summary>
            /// Returns the global namespace attached to user interface.
            /// </summary>
            /// <returns>Value namespace</returns>
            public static Value UiNamespace()
            {
                return new Value(GameValueMethods.UiNamespace());
            }

            /// <summary>
            /// Suspend execution of script for given UI time. uiSleep is a sleep method to delay script execution where script time/simulation time is stopped. uiSleep is basically using the system time (uiTime more specifically) and not simulation time. So in the cases where sleep would get stuck indefinitely, uiSleep can still be used to effectively delay script execution for example in pause or in a mission briefing or an editor or when simulation is paused in general.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value UiSleep(Value rightInstance)
            {
                return new Value(GameValueMethods.UiSleep(rightInstance));
            }

            /// <summary>
            /// Unassign curator (will destroy both sides of connection).
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value UnassignCurator(Value rightInstance)
            {
                return new Value(GameValueMethods.UnassignCurator(rightInstance));
            }

            /// <summary>
            /// Unassigns existing item and tries to put it into inventory. If there is no space in inventory the item simply disappears. See also unlinkItem.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value UnassignItem(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.UnassignItem(leftInstance, rightInstance));
            }

            /// <summary>
            /// Unassigns the unit (in the case of a vehicle its commander unit) from his team. This is equal to unit assignTeam "MAIN".
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value UnassignTeam(Value rightInstance)
            {
                return new Value(GameValueMethods.UnassignTeam(rightInstance));
            }

            /// <summary>
            /// Unassigns individual unit from a vehicle, usually previously assigned with assignAsXXX command, i.e removes assignedVehicleRole of the unit. If the unit is currently in that vehicle, the group leader will issue an order to disembark. See AI Group Vehicle Management for more information.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value UnassignVehicle(Value rightInstance)
            {
                return new Value(GameValueMethods.UnassignVehicle(rightInstance));
            }

            /// <summary>
            /// Returns whether the object is fully underwater. This command works well with Arma 3 mini-submarines, which was most likely the primary design goal.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value bool</returns>
            public static Value Underwater(Value rightInstance)
            {
                return new Value(GameValueMethods.Underwater(rightInstance));
            }

            /// <summary>
            /// Returns name of uniform.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value string</returns>
            public static Value Uniform(Value rightInstance)
            {
                return new Value(GameValueMethods.Uniform(rightInstance));
            }

            /// <summary>
            /// Returns a cargo container of a unit's uniform.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value object</returns>
            public static Value UniformContainer(Value rightInstance)
            {
                return new Value(GameValueMethods.UniformContainer(rightInstance));
            }

            /// <summary>
            /// Get array with all items (of any kind, even weapons) from uniform.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value UniformItems(Value rightInstance)
            {
                return new Value(GameValueMethods.UniformItems(rightInstance));
            }

            /// <summary>
            /// Get array with all magazines from uniform of the given unit.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value UniformMagazines(Value rightInstance)
            {
                return new Value(GameValueMethods.UniformMagazines(rightInstance));
            }

            /// <summary>
            /// Returns hashmap of all items in units inventory as [classname, count] pairs. weaponItems, uniformItems, vestItems, backpackItems arguments use the following Number values: 0: do not return value 1: returns container only (weapon or container) 2: returns container and its content weapons/containers that are stored inside containers (e.g weapon in backpack) always return all contents if contents for the parent container are enabled.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value hashmap</returns>
            public static Value UniqueUnitItems(Value rightInstance)
            {
                return new Value(GameValueMethods.UniqueUnitItems(rightInstance));
            }

            /// <summary>
            /// Returns list with addons the unit belongs to.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value UnitAddons(Value rightInstance)
            {
                return new Value(GameValueMethods.UnitAddons(rightInstance));
            }

            /// <summary>
            /// Returns the position on the unit other units can aim at. Same as aimPos only returns position in PositionAGL format and has render scope alternative unitAimPositionVisual.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value UnitAimPosition(Value rightInstance)
            {
                return new Value(GameValueMethods.UnitAimPosition(rightInstance));
            }

            /// <summary>
            /// Returns the position on the unit other units can aim at in render scope. See also aimPos, unitAimPosition.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value UnitAimPositionVisual(Value rightInstance)
            {
                return new Value(GameValueMethods.UnitAimPositionVisual(rightInstance));
            }

            /// <summary>
            /// Returns unit's backpack
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value object</returns>
            public static Value UnitBackpack(Value rightInstance)
            {
                return new Value(GameValueMethods.UnitBackpack(rightInstance));
            }

            /// <summary>
            /// Gets individual unit's combat mode. For more information see setUnitCombatMode.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value string</returns>
            public static Value UnitCombatMode(Value rightInstance)
            {
                return new Value(GameValueMethods.UnitCombatMode(rightInstance));
            }

            /// <summary>
            /// Returns whether or not the given transport object is a drone (UAV, UGV), regardless of if it has a crew or if it is empty, corresponding to the isUAV transport parameter. 2.14 The command can be used to check if the provided unit is a UAV unit.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value bool</returns>
            public static Value UnitIsUAV(Value rightInstance)
            {
                return new Value(GameValueMethods.UnitIsUAV(rightInstance));
            }

            /// <summary>
            /// Return the unit position rules. The return value is always "Auto" unless the unit has gotten a setUnitPos command. In that case the value is the last stance the unit was ordered to. Available modes are listed at setUnitPos.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value string</returns>
            public static Value UnitPos(Value rightInstance)
            {
                return new Value(GameValueMethods.UnitPos(rightInstance));
            }

            /// <summary>
            /// Check if the unit is ready. Unit is busy when it is given some command like move, until the command is finished.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value bool</returns>
            public static Value UnitReady(Value rightInstance)
            {
                return new Value(GameValueMethods.UnitReady(rightInstance));
            }

            /// <summary>
            /// Returns recoil coefficient of a soldier.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value scalar</returns>
            public static Value UnitRecoilCoefficient(Value rightInstance)
            {
                return new Value(GameValueMethods.UnitRecoilCoefficient(rightInstance));
            }

            /// <summary>
            /// Returns an array with all the units in the group or unit's group, or all units belonging to a certain side.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value any</returns>
            public static Value Units(Value rightInstance)
            {
                return new Value(GameValueMethods.Units(rightInstance));
            }

            /// <summary>
            /// Returns units in group/array below given Above Terrain Level (ATL) altitude. an object's ATL altitude can be found with _altitude = (getPosATL _obj) select 2;.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value UnitsBelowHeight(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.UnitsBelowHeight(leftInstance, rightInstance));
            }

            /// <summary>
            /// Returns the turret path the given vehicle's gunner is in. To get the turret's unit see turretUnit.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value UnitTurret(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.UnitTurret(leftInstance, rightInstance));
            }

            /// <summary>
            /// Unassign and delete existing item from its assigned slot. If item does not exist or is not in the assigned slot, command simply fails. See also unassignItem.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value UnlinkItem(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.UnlinkItem(leftInstance, rightInstance));
            }

            /// <summary>
            /// Unlocks the given achievement. The achievements are listed in CfgAchievements, however none of the currently listed achievements is used in Arma 3, hence the command always returns false. ⚠This command is obsolete and was used in the experimental (unreleased) Arma 2 Xbox 360 version as stated here. To unlock a Steam Achievement for Arma 3, see setStatValue.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value bool</returns>
            public static Value UnlockAchievement(Value rightInstance)
            {
                return new Value(GameValueMethods.UnlockAchievement(rightInstance));
            }

            /// <summary>
            /// Unregisters a task type from given agent. The task type is the name given in CfgTasks classes in name property. Also available from registeredTasks array.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value bool</returns>
            public static Value UnregisterTask(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.UnregisterTask(leftInstance, rightInstance));
            }

            /// <summary>
            /// Updates the icon to be shown in 2D editor for the specified editor,object. If maintain size is false,icon will not scale depending on the,scale of the map. If maintain size is a number,the icon will maintain,size if map scale is below that number. Some Old Editor Command
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value UpdateDrawIcon(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.UpdateDrawIcon(leftInstance, rightInstance));
            }

            /// <summary>
            /// Sets the text and command for the menu item. index is index as returned from addMenuItem command. command is optional. Some Old Editor Command
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value UpdateMenuItem(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.UpdateMenuItem(leftInstance, rightInstance));
            }

            /// <summary>
            /// Update the editor object tree. Some Old Editor Command
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value UpdateObjectTree(Value rightInstance)
            {
                return new Value(GameValueMethods.UpdateObjectTree(rightInstance));
            }

            /// <summary>
            /// Toggle secondary obstruction test on road paths.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value UseAIOperMapObstructionTest(Value rightInstance)
            {
                return new Value(GameValueMethods.UseAIOperMapObstructionTest(rightInstance));
            }

            /// <summary>
            /// Enable the new AI driving, used to test the old and new AI driving.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value UseAISteeringComponent(Value rightInstance)
            {
                return new Value(GameValueMethods.UseAISteeringComponent(rightInstance));
            }

            /// <summary>
            /// Switch between elapsed game time and audio time being used as animation timer. Used for audio/animation synchronization.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value UseAudioTimeForMoves(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.UseAudioTimeForMoves(leftInstance, rightInstance));
            }

            /// <summary>
            /// Returns true if user input is disabled
            /// </summary>
            /// <returns>Value bool</returns>
            public static Value UserInputDisabled()
            {
                return new Value(GameValueMethods.UserInputDisabled());
            }

            /// <summary>
            /// Returns all values stored in the given HashMap. The order of the returned Array corresponds to the order of the Array returned by the keys command.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value Values(Value rightInstance)
            {
                return new Value(GameValueMethods.Values(rightInstance));
            }

            /// <summary>
            /// Adds two 3D vectors. Replaces BIS_fnc_vectorAdd.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value VectorAdd(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.VectorAdd(leftInstance, rightInstance));
            }

            /// <summary>
            /// Cosine of angle between two 3D vectors.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value scalar</returns>
            public static Value VectorCos(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.VectorCos(leftInstance, rightInstance));
            }

            /// <summary>
            /// Cross product of two 3D vectors.  In layman's terms, if you have a polygon (surface) defined by 3 points, you can find a normal to it (just like terrain surfaceNormal). To invert direction of the normal, swap arguments around.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value VectorCrossProduct(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.VectorCrossProduct(leftInstance, rightInstance));
            }

            /// <summary>
            /// Subtracts one 3D vector from another. (vector1 - vector2)
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value VectorDiff(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.VectorDiff(leftInstance, rightInstance));
            }

            /// <summary>
            /// Returns object direction vector in world space ([x,y,z]). ⚠The vector is not necessarily normalized. The magnitude of the vector will be the same as the object scale. A unit facing North would return [0,1,0] A unit facing East would return [1,0,0] A unit facing South would return [0,-1,0] A unit facing West would return [-1,0,0]
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value VectorDir(Value rightInstance)
            {
                return new Value(GameValueMethods.VectorDir(rightInstance));
            }

            /// <summary>
            /// Return object's normalized direction vector in world space ([x,y,z]) in render time scope.  A unit facing North would return [0,1,0] A unit facing East would return [1,0,0] A unit facing South would return [0,-1,0] A unit facing West would return [-1,0,0]
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value VectorDirVisual(Value rightInstance)
            {
                return new Value(GameValueMethods.VectorDirVisual(rightInstance));
            }

            /// <summary>
            /// Returns Euclidean distance between two points.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value scalar</returns>
            public static Value VectorDistance(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.VectorDistance(leftInstance, rightInstance));
            }

            /// <summary>
            /// Squared distance between two 3D vectors.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value scalar</returns>
            public static Value VectorDistanceSqr(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.VectorDistanceSqr(leftInstance, rightInstance));
            }

            /// <summary>
            /// Dot product of two 3D vectors.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value scalar</returns>
            public static Value VectorDotProduct(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.VectorDotProduct(leftInstance, rightInstance));
            }

            /// <summary>
            /// Unit vector, equal to direction from vector1 to vector2. In other words this command produces  normalised vector between given 2 points. To get a non-normalised vector, use vectorDiff.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value VectorFromTo(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.VectorFromTo(leftInstance, rightInstance));
            }

            /// <summary>
            /// Interpolates vector between the given vectorFrom and vectorTo value according to the given range value.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value VectorLinearConversion(Value rightInstance)
            {
                return new Value(GameValueMethods.VectorLinearConversion(rightInstance));
            }

            /// <summary>
            /// Magnitude of a 3D vector.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value scalar</returns>
            public static Value VectorMagnitude(Value rightInstance)
            {
                return new Value(GameValueMethods.VectorMagnitude(rightInstance));
            }

            /// <summary>
            /// Squared magnitude of a 3D vector.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value scalar</returns>
            public static Value VectorMagnitudeSqr(Value rightInstance)
            {
                return new Value(GameValueMethods.VectorMagnitudeSqr(rightInstance));
            }

            /// <summary>
            /// Converts vector direction from model to world space. ⚠For scaled objects, the resulting vector's magnitude will also be multiplied by the object scale.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value VectorModelToWorld(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.VectorModelToWorld(leftInstance, rightInstance));
            }

            /// <summary>
            /// Converts vector from model to world space in render time scope. ⚠For scaled objects, the resulting vector's magnitude will also be multiplied by the object scale.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value VectorModelToWorldVisual(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.VectorModelToWorldVisual(leftInstance, rightInstance));
            }

            /// <summary>
            /// Multiplies 3D vector by a scalar.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value VectorMultiply(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.VectorMultiply(leftInstance, rightInstance));
            }

            /// <summary>
            /// Returns normalized vector (unit vector, vectorMagnitude == 1) of given vector. If given vector is 0 result is a 0 vector as well.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value VectorNormalized(Value rightInstance)
            {
                return new Value(GameValueMethods.VectorNormalized(rightInstance));
            }

            /// <summary>
            /// Returns up vector of the given object in format Vector3D. ⚠The vector is not necessarily normalized. The magnitude of the vector will be the same as the object scale.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value VectorUp(Value rightInstance)
            {
                return new Value(GameValueMethods.VectorUp(rightInstance));
            }

            /// <summary>
            /// Return object's up vector in world Position coordinates ( [x, y, z] ) in render time scope.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value VectorUpVisual(Value rightInstance)
            {
                return new Value(GameValueMethods.VectorUpVisual(rightInstance));
            }

            /// <summary>
            /// Converts vector direction from world to model space. ⚠For scaled objects, the resulting vector's magnitude will be divided by the object scale.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value VectorWorldToModel(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.VectorWorldToModel(leftInstance, rightInstance));
            }

            /// <summary>
            /// Converts vector direction from world to model space in render time scope. ⚠For scaled objects, the resulting vector's magnitude will be divided by the object scale.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value VectorWorldToModelVisual(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.VectorWorldToModelVisual(leftInstance, rightInstance));
            }

            /// <summary>
            /// Vehicle in which given unit is mounted. If none, unit is returned. Alternatively, use objectParent ⚠While vehicle may return the vehicle the unit is in for alive units, for dead units which are groupless, this command returns the unit itself - use objectParent instead.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value object</returns>
            public static Value Vehicle(Value rightInstance)
            {
                return new Value(GameValueMethods.Vehicle(rightInstance));
            }

            /// <summary>
            /// Check if the vehicle has enabled transporting other vehicles or not.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value bool</returns>
            public static Value VehicleCargoEnabled(Value rightInstance)
            {
                return new Value(GameValueMethods.VehicleCargoEnabled(rightInstance));
            }

            /// <summary>
            /// Types text to the vehicle radio channel. The text will be visible only on the PC where command was executed. If you need the message to show on all computers, you have to execute it globally, see remoteExec. Object parameter must be a vehicle, not a player If you are in a crew seat (i.e. driver, gunner or commander), then it will include that role in the chat name output (Eg: Driver (you_name): "Message")
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value VehicleChat(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.VehicleChat(leftInstance, rightInstance));
            }

            /// <summary>
            /// Returns current vehicle move/turn info (a getter for sendSimpleCommand) in format [moveInfo, turnInfo]. Possible values: moveInfo turnInfo "FORMATION" - vehicle is stationary "FORWARD"  - vehicle is moving forward "FAST" - vehicle is fast moving forward "SLOW" - vehicle is slow moving forward "STOP" - vehicle is stationary "BACK" - vehicle is reversing "DirectByComander"sic - keyboard pilot is used, i.e. player is in the vehicle and is the effectiveCommander pressing any driving key (WASD or arrows). "LEFT" - vehicle is turning left (use  "STOPTURNING" to cancel) "RIGHT" - vehicle is turning right (use  "STOPTURNING" to cancel) "NONE" - vehicle is not turning (when script command is used) "ABS" - vehicle is not turning (when keyboard pilot is used)
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value VehicleMoveInfo(Value rightInstance)
            {
                return new Value(GameValueMethods.VehicleMoveInfo(rightInstance));
            }

            /// <summary>
            /// Sends the audio message to the vehicle radio channel. The message is defined in CfgRadio in the description.ext file or config radio protocol. The transmission will play only on the PC where command was executed. If you need the transmission to play on all computers, you have to execute it globally (see remoteExec). When transmitting unit gets killed, transmission will be interrupted. However when receiving unit gets killed, the transmission continues to play.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value VehicleRadio(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.VehicleRadio(leftInstance, rightInstance));
            }

            /// <summary>
            /// Gets whether the vehicle can acquire targets via datalink from the Side center.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value bool</returns>
            public static Value VehicleReceiveRemoteTargets(Value rightInstance)
            {
                return new Value(GameValueMethods.VehicleReceiveRemoteTargets(rightInstance));
            }

            /// <summary>
            /// Gets whether the vehicle shares its own position via datalink with the Side center.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value bool</returns>
            public static Value VehicleReportOwnPosition(Value rightInstance)
            {
                return new Value(GameValueMethods.VehicleReportOwnPosition(rightInstance));
            }

            /// <summary>
            /// Gets whether the vehicle shares acquired targets via datalink with the Side center.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value bool</returns>
            public static Value VehicleReportRemoteTargets(Value rightInstance)
            {
                return new Value(GameValueMethods.VehicleReportRemoteTargets(rightInstance));
            }

            /// <summary>
            /// Returns an array of all vehicles available to current client. This command returns both empty and crewed vehicles but not soldiers. It will also return "WeaponHolderSimulated" of dead bodies (weapon on the ground). Vehicles created with createVehicleLocal will only be returned on the client that created them.
            /// </summary>
            /// <returns>Value array</returns>
            public static Value Vehicles()
            {
                return new Value(GameValueMethods.Vehicles());
            }

            /// <summary>
            /// Returns the variable name that contains a primary editor reference to this object. This is the variable given in the Insert Unit dialog / name field in the editor. It can be changed using setVehicleVarName.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value string</returns>
            public static Value VehicleVarName(Value rightInstance)
            {
                return new Value(GameValueMethods.VehicleVarName(rightInstance));
            }

            /// <summary>
            /// Returns the velocity of the object as vector in m/s.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value Velocity(Value rightInstance)
            {
                return new Value(GameValueMethods.Velocity(rightInstance));
            }

            /// <summary>
            /// Returns the velocity (speed vector) of the vehicle as an array with format [x, y, z]. Vector is in model space.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value VelocityModelSpace(Value rightInstance)
            {
                return new Value(GameValueMethods.VelocityModelSpace(rightInstance));
            }

            /// <summary>
            /// Check if file is signed by any key present in game keys folders. On clients, it does not check against the keys accepted by server.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value bool</returns>
            public static Value VerifySignature(Value rightInstance)
            {
                return new Value(GameValueMethods.VerifySignature(rightInstance));
            }

            /// <summary>
            /// nameof vest.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value string</returns>
            public static Value Vest(Value rightInstance)
            {
                return new Value(GameValueMethods.Vest(rightInstance));
            }

            /// <summary>
            /// Returns a cargo container of a unit's vest.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value object</returns>
            public static Value VestContainer(Value rightInstance)
            {
                return new Value(GameValueMethods.VestContainer(rightInstance));
            }

            /// <summary>
            /// Get array with all items (of any kind, even weapons) from vest.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value VestItems(Value rightInstance)
            {
                return new Value(GameValueMethods.VestItems(rightInstance));
            }

            /// <summary>
            /// Get array with all magazines from vest of the given unit.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value VestMagazines(Value rightInstance)
            {
                return new Value(GameValueMethods.VestMagazines(rightInstance));
            }

            /// <summary>
            /// Returns the rendering distance.
            /// </summary>
            /// <returns>Value scalar</returns>
            public static Value ViewDistance()
            {
                return new Value(GameValueMethods.ViewDistance());
            }

            /// <summary>
            /// Checks if the player has compass opened and visible. Keep in mind that the GPS minimap in Arma 3 also shows the direction.
            /// </summary>
            /// <returns>Value bool</returns>
            public static Value VisibleCompass()
            {
                return new Value(GameValueMethods.VisibleCompass());
            }

            /// <summary>
            /// 
            /// </summary>
            /// <returns>Value bool</returns>
            public static Value VisibleGPS()
            {
                return new Value(GameValueMethods.VisibleGPS());
            }

            /// <summary>
            /// Return true if the main map is shown (active). In Arma 3 it also returns true if the respawn screen map is visible.
            /// </summary>
            /// <returns>Value bool</returns>
            public static Value VisibleMap()
            {
                return new Value(GameValueMethods.VisibleMap());
            }

            /// <summary>
            /// Returns an object's rendered position (z value above surface underneath) in render time scope. Same as getPosVisual. ⚠This command should not be used for actual 3D calculations. See getPos for more details.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value VisiblePosition(Value rightInstance)
            {
                return new Value(GameValueMethods.VisiblePosition(rightInstance));
            }

            /// <summary>
            /// Returns an object's rendered ASL position (z value above sea level) in render time scope.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value VisiblePositionASL(Value rightInstance)
            {
                return new Value(GameValueMethods.VisiblePositionASL(rightInstance));
            }

            /// <summary>
            /// Checks whether the score table is visible.
            /// </summary>
            /// <returns>Value bool</returns>
            public static Value VisibleScoretable()
            {
                return new Value(GameValueMethods.VisibleScoretable());
            }

            /// <summary>
            /// Checks if the player has watch opened and visible. Keep in mind that the GPS minimap in Arma 3 also shows the time.
            /// </summary>
            /// <returns>Value bool</returns>
            public static Value VisibleWatch()
            {
                return new Value(GameValueMethods.VisibleWatch());
            }

            /// <summary>
            /// Suspends execution of scheduled script until the given condition satisfied.  This command will loop and call the code inside {} mostly every frame, depends on complexity of the condition and the overall engine load, until the code returns true If the very first execution of the code returns true the command will exit immediately, therefore it will not produce any "Suspending not allowed in this context" error when used inside non-scheduled script. For all other uses it must be executed in environment that allows suspension (canSuspend), such as spawned or execVMed code Avoid doing waitUntil { time > 20 }; and use sleep 20; instead! If you can, add a sleep to the condition to save some cpu cycles waitUntil { sleep 1; !alive player }; Since Arma 3 v1.94, a condition returning anything other than true or false will result in an appropriate type error.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value WaitUntil(Value rightInstance)
            {
                return new Value(GameValueMethods.WaitUntil(rightInstance));
            }

            /// <summary>
            /// Return waves value.
            /// </summary>
            /// <returns>Value scalar</returns>
            public static Value Waves()
            {
                return new Value(GameValueMethods.Waves());
            }

            /// <summary>
            /// Gets the object attached to the waypoint.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value object</returns>
            public static Value WaypointAttachedObject(Value rightInstance)
            {
                return new Value(GameValueMethods.WaypointAttachedObject(rightInstance));
            }

            /// <summary>
            /// Gets the vehicle attached to the waypoint. A vehicle can be attached to a waypoint by creating the waypoint on top of the vehicle in the 2D Editor using waypointAttachVehicle
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value object</returns>
            public static Value WaypointAttachedVehicle(Value rightInstance)
            {
                return new Value(GameValueMethods.WaypointAttachedVehicle(rightInstance));
            }

            /// <summary>
            /// Attaches a static object via it is numeric ID to the given waypoint. ⚠ The main syntax doesn't work in Arma 3 anymore. The alternative syntax is (at least) available since Arma 2.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value WaypointAttachObject(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.WaypointAttachObject(leftInstance, rightInstance));
            }

            /// <summary>
            /// Attaches the Waypoint to the provided vehicle Object. ⚠Use this command to associate a transport with "GETIN" waypoint, other types of waypoints might or might not work. See also setWaypointType to set the waypoint type to "GETIN".
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value nothing</returns>
            public static Value WaypointAttachVehicle(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.WaypointAttachVehicle(leftInstance, rightInstance));
            }

            /// <summary>
            /// Gets the waypoint behavior.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value string</returns>
            public static Value WaypointBehaviour(Value rightInstance)
            {
                return new Value(GameValueMethods.WaypointBehaviour(rightInstance));
            }

            /// <summary>
            /// Gets the waypoint's combat mode setting.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value string</returns>
            public static Value WaypointCombatMode(Value rightInstance)
            {
                return new Value(GameValueMethods.WaypointCombatMode(rightInstance));
            }

            /// <summary>
            /// Gets the radius around the waypoint where the waypoint is completed.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value scalar</returns>
            public static Value WaypointCompletionRadius(Value rightInstance)
            {
                return new Value(GameValueMethods.WaypointCompletionRadius(rightInstance));
            }

            /// <summary>
            /// Gets the waypoint description.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value string</returns>
            public static Value WaypointDescription(Value rightInstance)
            {
                return new Value(GameValueMethods.WaypointDescription(rightInstance));
            }

            /// <summary>
            /// Returns true if the waypoint behavior is forced.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value bool</returns>
            public static Value WaypointForceBehaviour(Value rightInstance)
            {
                return new Value(GameValueMethods.WaypointForceBehaviour(rightInstance));
            }

            /// <summary>
            /// Gets the waypoint formation. Possible values are:  "NO CHANGE" "COLUMN" "STAG COLUMN" "WEDGE" "ECH LEFT" "ECH RIGHT" "VEE" "LINE" "FILE" "DIAMOND"
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value string</returns>
            public static Value WaypointFormation(Value rightInstance)
            {
                return new Value(GameValueMethods.WaypointFormation(rightInstance));
            }

            /// <summary>
            /// Returns buildingPos index assigned to the waypoint.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value scalar</returns>
            public static Value WaypointHousePosition(Value rightInstance)
            {
                return new Value(GameValueMethods.WaypointHousePosition(rightInstance));
            }

            /// <summary>
            /// Gets the waypoint loiter altitude.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value scalar</returns>
            public static Value WaypointLoiterAltitude(Value rightInstance)
            {
                return new Value(GameValueMethods.WaypointLoiterAltitude(rightInstance));
            }

            /// <summary>
            /// Gets the waypoint loiter radius. Waypoint uses format Waypoint.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value scalar</returns>
            public static Value WaypointLoiterRadius(Value rightInstance)
            {
                return new Value(GameValueMethods.WaypointLoiterRadius(rightInstance));
            }

            /// <summary>
            /// Gets the waypoint loiter type. Waypoint uses format Waypoint.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value string</returns>
            public static Value WaypointLoiterType(Value rightInstance)
            {
                return new Value(GameValueMethods.WaypointLoiterType(rightInstance));
            }

            /// <summary>
            /// Gets the waypoint name.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value string</returns>
            public static Value WaypointName(Value rightInstance)
            {
                return new Value(GameValueMethods.WaypointName(rightInstance));
            }

            /// <summary>
            /// Get provided waypoint's position.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value WaypointPosition(Value rightInstance)
            {
                return new Value(GameValueMethods.WaypointPosition(rightInstance));
            }

            /// <summary>
            /// Returns an array of waypoints for the specified unit/group.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value Waypoints(Value rightInstance)
            {
                return new Value(GameValueMethods.Waypoints(rightInstance));
            }

            /// <summary>
            /// Gets the waypoint script.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value string</returns>
            public static Value WaypointScript(Value rightInstance)
            {
                return new Value(GameValueMethods.WaypointScript(rightInstance));
            }

            /// <summary>
            /// Checks if the UAV has waypoints enabled.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value bool</returns>
            public static Value WaypointsEnabledUAV(Value rightInstance)
            {
                return new Value(GameValueMethods.WaypointsEnabledUAV(rightInstance));
            }

            /// <summary>
            /// A getter for showWaypoint command.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value string</returns>
            public static Value WaypointShow(Value rightInstance)
            {
                return new Value(GameValueMethods.WaypointShow(rightInstance));
            }

            /// <summary>
            /// Gets the waypoint speed. Possible values are: "UNCHANGED" "LIMITED" "NORMAL" "FULL"
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value string</returns>
            public static Value WaypointSpeed(Value rightInstance)
            {
                return new Value(GameValueMethods.WaypointSpeed(rightInstance));
            }

            /// <summary>
            /// Gets the waypoint statements.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value WaypointStatements(Value rightInstance)
            {
                return new Value(GameValueMethods.WaypointStatements(rightInstance));
            }

            /// <summary>
            /// Gets the waypoint timeout values.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value WaypointTimeout(Value rightInstance)
            {
                return new Value(GameValueMethods.WaypointTimeout(rightInstance));
            }

            /// <summary>
            /// Gets the current timeout for currentWaypoint of a group or -1 if countdown is not in progress.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value scalar</returns>
            public static Value WaypointTimeoutCurrent(Value rightInstance)
            {
                return new Value(GameValueMethods.WaypointTimeoutCurrent(rightInstance));
            }

            /// <summary>
            /// Gets the waypoint type. See Waypoints - Waypoint Types for more information.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value string</returns>
            public static Value WaypointType(Value rightInstance)
            {
                return new Value(GameValueMethods.WaypointType(rightInstance));
            }

            /// <summary>
            /// A getter for setWaypointVisible command. ⚠Returns 0 (Number) instead of Booleanfor an invalid waypoint.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value scalar</returns>
            public static Value WaypointVisible(Value rightInstance)
            {
                return new Value(GameValueMethods.WaypointVisible(rightInstance));
            }

            /// <summary>
            /// Get array with all items linked to a given weapon. ⚠This command does not return loaded magazines, see weaponsItems
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value WeaponAccessories(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.WeaponAccessories(leftInstance, rightInstance));
            }

            /// <summary>
            /// Returns array with all items assigned to the given weapon in given cargo container. ⚠This is unofficial documentation. All Information here is as it exists in the Engine. It might not reflect the reality.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value WeaponAccessoriesCargo(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.WeaponAccessoriesCargo(leftInstance, rightInstance));
            }

            /// <summary>
            /// Get array with weapons from ammo box (or any general weapon holder container).
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value WeaponCargo(Value rightInstance)
            {
                return new Value(GameValueMethods.WeaponCargo(rightInstance));
            }

            /// <summary>
            /// Returns the direction that the vehicle weapon is aiming in. For addons the weapon name must be an entry in CfgWeapons. Turret and gun angle in degrees can also be obtained using animationSourcePhase or animationPhase commands.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value WeaponDirection(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.WeaponDirection(leftInstance, rightInstance));
            }

            /// <summary>
            /// Returns current rate of how much the weapon view is distorted because of quick aiming.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value WeaponInertia(Value rightInstance)
            {
                return new Value(GameValueMethods.WeaponInertia(rightInstance));
            }

            /// <summary>
            /// Returns true if given soldier's weapon is lowered. ⚠This command will always return false if player is sprinting, even without a weapon. Alternatively, the weapon raised state could be obtained via animationState command ...slow... vs ...sras...
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value bool</returns>
            public static Value WeaponLowered(Value rightInstance)
            {
                return new Value(GameValueMethods.WeaponLowered(rightInstance));
            }

            /// <summary>
            /// Returns current ammo round reloading phase. For a magazine reloading phase see weaponState command.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value scalar</returns>
            public static Value WeaponReloadingTime(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.WeaponReloadingTime(leftInstance, rightInstance));
            }

            /// <summary>
            /// Returns array of names of all unit's weapons.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value Weapons(Value rightInstance)
            {
                return new Value(GameValueMethods.Weapons(rightInstance));
            }

            /// <summary>
            /// Returns entity's weapons information including weapon index and firemode.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value WeaponsInfo(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.WeaponsInfo(leftInstance, rightInstance));
            }

            /// <summary>
            /// Returns an array with subarrays contains class names and also names of connected items of all the vehicle's weapons.  This command will return weapon magazines as well in format [magazineName, ammoCount], or empty array [] if weapon has no magazine Since Arma 3 v1.22 it is possible to query weapon holders and ammo crates with this command. If the argument is a vehicle, the command will return vehicle's weapons. If the argument is a container, the command will act identical to weaponsItemsCargo. Since Arma 3 v1.96 the returned array always contains secondary muzzle magazine info and consistent with getUnitLoadout format for weapon items. Since Arma 3 v2.02 the returned array can contains binocular weapon items.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value WeaponsItems(Value rightInstance)
            {
                return new Value(GameValueMethods.WeaponsItems(rightInstance));
            }

            /// <summary>
            /// Returns an array with subarrays contains class names and also names of connected items of all the vehicle's cargo weapons in weaponsItems format. If weapon has no magazine, an empty array [] is returned instead of magazine info. If the argument is a vehicle with weapons, vehicles cargo is searched, unlike with weaponsItems command, which will return vehicle's weapons instead.  Since Arma 3 v1.96 the returned array always contains secondary muzzle magazine info and consistent with getUnitLoadout format for weapon items.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value WeaponsItemsCargo(Value rightInstance)
            {
                return new Value(GameValueMethods.WeaponsItemsCargo(rightInstance));
            }

            /// <summary>
            /// Returns the given or currently selected weapon state for unit or vehicle. With Syntax 2, if no optional arguments are present, currently selected weapon is queried. Since Arma 3 v1.70 this command has been improved and extended: A vehicle's weapon query doesn't need a weapon operator provided the weapon or muzzle is specified in optional param.(keep in mind that by default a vehicle has no weapons selected) Driver turret can now be accessed as well with turret path [-1]. Muzzle name is supported as well as weapon name. The command searches for weapon first, then if not found, muzzle is searched for.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value WeaponState(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.WeaponState(leftInstance, rightInstance));
            }

            /// <summary>
            /// Returns all weapons of a given turret. Use turret path [-1] for driver's turret.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value WeaponsTurret(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.WeaponsTurret(leftInstance, rightInstance));
            }

            /// <summary>
            /// For this command to have any effect, the Advanced Flight Model (AFM) has to be enabled. AFM status can be checked with difficultyEnabledRTD.Returns weight of RTD helicopter.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value WeightRTD(Value rightInstance)
            {
                return new Value(GameValueMethods.WeightRTD(rightInstance));
            }

            /// <summary>
            /// West (BLUFOR) side.
            /// </summary>
            /// <returns>Value side</returns>
            public static Value West()
            {
                return new Value(GameValueMethods.West());
            }

            /// <summary>
            /// Returns the unlocalized text value of a side or an object's/group's side. Side east / opfor west / blufor resistance / independent civilian sideUnknown sideEnemy sideFriendly sideLogic sideEmpty sideAmbientLife Result "East" "West" "Resistance" "Civilian" "Unknown" WF stands for Warfare, an Armed Assault/Arma 2 official game mode.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value string</returns>
            public static Value WFSideText(Value rightInstance)
            {
                return new Value(GameValueMethods.WFSideText(rightInstance));
            }

            /// <summary>
            /// Repeats Code while the given condition is true. A part of while-do construct. ⚠A  while loop does not have any suspension, meaning that if used in scheduled environment without any suspension (sleep or uiSleep) the code will run multiple times per frame and consumes the 3 ms per frame scheduler execution limit. This should be avoided if not intended (see Example 3).
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value while</returns>
            public static Value While(Value rightInstance)
            {
                return new Value(GameValueMethods.While(rightInstance));
            }

            /// <summary>
            /// Returns the current wind vector (in m/s) as array [x, y, z]. The last value (z, "up-down") always returns 0 – wind being only horizontal.
            /// </summary>
            /// <returns>Value array</returns>
            public static Value Wind()
            {
                return new Value(GameValueMethods.Wind());
            }

            /// <summary>
            /// Returns the current wind azimuth.
            /// </summary>
            /// <returns>Value scalar</returns>
            public static Value WindDir()
            {
                return new Value(GameValueMethods.WindDir());
            }

            /// <summary>
            /// Returns wind strength and direction. For this command to have any effect, the Advanced Flight Model (AFM) has to be enabled. AFM status can be checked with difficultyEnabledRTD.
            /// </summary>
            /// <returns>Value array</returns>
            public static Value WindRTD()
            {
                return new Value(GameValueMethods.WindRTD());
            }

            /// <summary>
            /// Returns the current wind strength.
            /// </summary>
            /// <returns>Value scalar</returns>
            public static Value WindStr()
            {
                return new Value(GameValueMethods.WindStr());
            }

            /// <summary>
            /// For this command to have any effect, the Advanced Flight Model (AFM) has to be enabled. AFM status can be checked with difficultyEnabledRTD. Returns force produced by wings.
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value WingsForcesRTD(Value rightInstance)
            {
                return new Value(GameValueMethods.WingsForcesRTD(rightInstance));
            }

            /// <summary>
            /// 
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value with</returns>
            public static Value With(Value rightInstance)
            {
                return new Value(GameValueMethods.With(rightInstance));
            }

            /// <summary>
            /// Return the name of the currently loaded world.
            /// </summary>
            /// <returns>Value string</returns>
            public static Value WorldName()
            {
                return new Value(GameValueMethods.WorldName());
            }

            /// <summary>
            /// Returns the engine calculated size (terrain side length) of the current world (BIS_fnc_mapSize may return the same value, but is just a simple look up in  config).
            /// </summary>
            /// <returns>Value scalar</returns>
            public static Value WorldSize()
            {
                return new Value(GameValueMethods.WorldSize());
            }

            /// <summary>
            /// Converts position from world space to object model space. ⚠For scaled objects, the relative position will be divided by the object scale.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value WorldToModel(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.WorldToModel(leftInstance, rightInstance));
            }

            /// <summary>
            /// Converts position from world space to object model space in render time scope. ⚠For scaled objects, the relative position will be divided by the object scale.
            /// </summary>
            /// <param name="leftInstance"></param>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value WorldToModelVisual(Value leftInstance, Value rightInstance)
            {
                return new Value(GameValueMethods.WorldToModelVisual(leftInstance, rightInstance));
            }

            /// <summary>
            /// Converts position in world space into screen (UI) space. If a specified position is not within the current screen view, an empty array is returned. SafeZones should be considered: the result can be out of the [0,0]..[1,1] range the result can be a filled array even if the position is not displayed on screen if it would appear on a triplescreen setup
            /// </summary>
            /// <param name="rightInstance"></param>
            /// <returns>Value array</returns>
            public static Value WorldToScreen(Value rightInstance)
            {
                return new Value(GameValueMethods.WorldToScreen(rightInstance));
            }


        }
    }
}