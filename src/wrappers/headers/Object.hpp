#pragma once

#include <intercept.hpp>

#ifdef _WIN32
#include <windows.h>
#define char_t wchar_t

#else
#define char_t char

#endif



namespace RV::Bindings
{
	class __declspec(dllexport) Object
	{
	private:
		intercept::types::object _internalObject;
	public:
		Object();
		Object(intercept::types::object object) : _internalObject{ object }{}
		Object(const char* type, vector3 position);
		//Object(const char* type, vector3 position, const char** markers, int length, float placement, const char* special);
		operator intercept::types::object()
		{
			return _internalObject;
		}
		//vector3 aim_pos();
		//vector3 eye_pos();
		vector3 get_pos();
		vector3 get_pos_asl();
		vector3 get_pos_aslw();
		vector3 get_pos_atl();
		vector3 get_pos_world();
		vector3 get_rel_pos(float distance, float direction);
		vector3 model_to_world(const vector3 position);
		vector3 model_to_world_world(const vector3 modelPos);

		void set_pos(const vector3 position);
		void set_pos_asl(const vector3 position);
		void set_pos_aslw(const vector3 position);
		void set_pos_atl(const vector3 position);
		void set_pos_world(const vector3 position);
		//void set_vehicle_position(const vector3 position, char** markers, float placement, char * special);

		//vector3 unit_aim_position();
		//vector3 visible_position();
		//vector3 visible_position_asl();

		vector3 world_to_model(const vector3 position);
		vector3 world_to_model_visual(const vector3 position);

		const char_t* type_of();
		bool is_kind_of(const char* typeName);
		//void update();

		vector3 vectorUp();
		//ARRAY animationNames();
		float currentZeroing();
		//ARRAY triggerArea();
		bool isAutoHoverOn();
		//ARRAY getAllHitPointsDamage();
		float getObjectScale();
		const char_t* triggerText();
		float getFatigue();
		vector3 eyeDirection();
		void fillWeaponsFromPool();
		//ARRAY hcSelected();
		bool isObjectRTD();
		const char_t* roleDescription();
		//ARRAY simpleTasks();
		float getAmmoCargo();
		RV::Bindings::Object* flagOwner();
		//ARRAY getEngineTargetRPMRTD();
		float speed();
		bool reloadEnabled();
		float rating();
		void hideObject();
		const char_t* primaryWeapon();
		float curatorCameraAreaCeiling();
		void removeVest();
		vector3 formationPosition();
		//ARRAY getTrimOffsetRTD();
		bool moveToFailed();
		float rankId();
		void removeAllItemsWithMagazines();
		//ARRAY getAllEnv3DSoundControllers();
		float getPlayerVoNVolume();
		void removeBackpackGlobal();
		const char_t* face();
		RV::Bindings::Object* getAttackTarget();
		//ARRAY getVehicleCargo();
		vector3 getPosATL();
		//ARRAY objectCurators();
		//ARRAY curatorEditingArea();
		//ARRAY allDiarySubjects();
		const char_t* assignedTeam();
		vector3 vectorDirVisual();
		bool triggerActivated();
		void unassignVehicle();
		//ARRAY boundingBox();
		float moveTime();
		float getCustomSoundControllerCount();
		//ARRAY getSensorTargets();
		const char_t* animationState();
		//ARRAY weaponCargo();
		bool isTurnedOut();
		void removeAllSecondaryWeaponItems();
		RV::Bindings::Object* camTarget();
		bool isSimpleObject();
		vector3 getCameraViewDirection();
		float scudState();
		bool isAutoTrimOnRTD();
		//ARRAY boundingBoxReal();
		void ropeDestroy();
		bool isTouchingGround();
		//ARRAY taskMarkerOffset();
		const char_t* vest();
		const char_t* headgear();
		float fuel();
		//ARRAY weaponsItemsCargo();
		float getForcedSpeed();
		float damage();
		//ARRAY getModelInfo();
		float getBleedingRemaining();
		//ARRAY squadParams();
		RV::Bindings::Object* leader();
		//ARRAY currentThrowable();
		//ARRAY uniformItems();
		float getCustomAimCoef();
		float unitRecoilCoefficient();
		void unassignCurator();
		RV::Bindings::Object* objectParent();
		void clearMagazineCargo();
		bool canMove();
		float getWingsOrientationRTD();
		bool isStaminaEnabled();
		//ARRAY getUserMFDText();
		//ARRAY weaponsItems();
		RV::Bindings::Object* unitBackpack();
		void pickWeaponPool();
		RV::Bindings::Object* getSlingLoad();
		//ARRAY getAllPylonsInfo();
		void reload();
		//ARRAY allVariables();
		const char_t* speaker();
		//ARRAY weapons();
		bool unitIsUAV();
		RV::Bindings::Object* assignedTarget();
		RV::Bindings::Object* attachedTo();
		RV::Bindings::Object* effectiveCommander();
		//CONFIG configOf();
		const char_t* landResult();
		void clearWeaponCargoGlobal();
		RV::Bindings::Object* assignedDriver();
		//ARRAY getCruiseControl();
		//ARRAY secondaryWeaponMagazine();
		float flagAnimationPhase();
		//GROUP assignedGroup();
		RV::Bindings::Object* getTowParent();
		float getDir();
		RV::Bindings::Object* uniformContainer();
		bool isPlayer();
		bool camPreloaded();
		bool local();
		//ARRAY getVehicleTiPars();
		//ARRAY boundingCenter();
		bool fleeing();
		bool isCopilotEnabled();
		float maxLoad();
		const char_t* uniform();
		const char_t* WFSideText();
		vector3 velocityModelSpace();
		//ARRAY getAllOwnedMines();
		const char_t* flagTexture();
		float getFuelCargo();
		float groupID();
		//ARRAY rotorsRpmRTD();
		float captiveNum();
		//ARRAY selectionNames();
		vector3 position();
		bool canUnloadInCombat();
		//ARRAY attachedObjects();
		const char_t* netId();
		void removeAllAssignedItems();
		bool ropeUnwound();
		void addSwitchableUnit();
		float owner();
		RV::Bindings::Object* driver();
		//ARRAY primaryWeaponMagazine();
		//ARRAY curatorEditableObjects();
		//ARRAY assignedItems();
		//ARRAY groupSelectedUnits();
		float loadUniform();
		bool isLaserOn();
		bool someAmmo();
		bool isWeaponRested();
		bool isAimPrecisionEnabled();
		RV::Bindings::Object* commander();
		const char_t* incapacitatedState();
		float collectiveRTD();
		float insideBuilding();
		//ARRAY getPylonMagazines();
		float getAnimAimPrecision();
		bool canTriggerDynamicSimulation();
		//ARRAY vehicleMoveInfo();
		//ARRAY backpackMagazines();
		bool weaponLowered();
		float handsHit();
		void removeAllCuratorCameraAreas();
		const char_t* triggerType();
		void hideBody();
		//ARRAY getPilotCameraTarget();
		void triggerAmmo();
		RV::Bindings::Object* missileTarget();
		const char_t* behaviour();
		//ARRAY getMagazineCargo();
		const char_t* lifeState();
		bool isSprintAllowed();
		float triggerInterval();
		//ARRAY triggerTimeout();
		//ARRAY units();
		void removeAllContainers();
		float getObjectType();
		//ARRAY getTurretOpticsMode();
		RV::Bindings::Object* ropeAttachedTo();
		bool moveToCompleted();
		bool canStand();
		//ARRAY rotorsForcesRTD();
		RV::Bindings::Object* formationLeader();
		const char_t* getPlateNumber();
		//ARRAY enginesTorqueRTD();
		bool isEngineOn();
		//ARRAY needService();
		const char_t* getForcedFlagTexture();
		//ARRAY getPlayerScores();
		float skill();
		//ARRAY magazineCargo();
		const char_t* backpack();
		void hcRemoveAllGroups();
		//ARRAY getPosWorld();
		float getStamina();
		float getMass();
		//ARRAY weaponState();
		float load();
		float loadAbs();
		void removeSwitchableUnit();
		bool simulationEnabled();
		//ARRAY currentMagazineDetail();
		//ARRAY unitAimPositionVisual();
		//ARRAY actionIDs();
		//ARRAY everyBackpack();
		bool vehicleReceiveRemoteTargets();
		//ARRAY listVehicleSensors();
		const char_t* currentMuzzle();
		const char_t* currentWeaponMode();
		float getWingsPositionRTD();
		const char_t* name();
		//ARRAY ropesAttachedTo();
		bool captive();
		bool isWeaponDeployed();
		void removeAllWeapons();
		const char_t* vehicleVarName();
		float triggerTimeoutCurrent();
		RV::Bindings::Object* assignedGunner();
		//ARRAY soldierMagazines();
		//ARRAY getUnitFreefallInfo();
		RV::Bindings::Object* getCorpse();
		void removeUniform();
		const char_t* faction();
		void removeAllPrimaryWeaponItems();
		bool getDiverState();
		//ARRAY getUnloadInCombat();
		//GROUP group();
		//ARRAY allTurrets();
		bool camCommitted();
		//TASK currentTask();
		//SIDE flagSide();
		bool isInRemainsCollector();
		//ARRAY magazinesAmmoCargo();
		void setPlayable();
		//ARRAY getAllUnitTraits();
		void removeAllBinocularItems();
		//ARRAY collisionDisabledWith();
		bool isAutonomous();
		const char_t* handgunMagazine();
		float getOxygenRemaining();
		RV::Bindings::Object* vehicle();
		void removeAllActions();
		//ARRAY everyContainer();
		void stopEngineRTD();
		RV::Bindings::Object* gunner();
		RV::Bindings::Object* isVehicleCargo();
		void lightDetachObject();
		RV::Bindings::Object* getConnectedUAVUnit();
		//ARRAY getPersonUsedDLCs();
		bool isAllowedCrewInImmobile();
		//ARRAY getDescription();
		//ARRAY ropeEndPosition();
		//ARRAY items();
		const char_t* getObjectID();
		float getRepairCargo();
		const char_t* pitch();
		bool isVehicleRadarOn();
		float cameraInterest();
		void removeHeadgear();
		//SIDE side();
		bool lockedInventory();
		const char_t* unitCombatMode();
		bool isFormationLeader();
		float numberOfEnginesRTD();
		vector3 velocity();
		//ARRAY getAllSoundControllers();
		bool isHidden();
		//ARRAY aimPos();
		//ARRAY ropeSegments();
		void clearWeaponCargo();
		//ARRAY assignedVehicleRole();
		float precision();
		//ARRAY ropes();
		RV::Bindings::Object* backpackContainer();
		//ARRAY vectorUpVisual();
		//ARRAY vectorDir();
		void clearBackpackCargoGlobal();
		//ARRAY equipmentDisabled();
		void removeAllHandgunItems();
		bool curatorEditingAreaType();
		void putWeaponPool();
		float getObjectDLC();
		bool lockIdentity();
		const char_t* typeOf();
		void deleteVehicleCrew();
		float score();
		bool isAwake();
		RV::Bindings::Object* laserTarget();
		//ARRAY isAutoStartUpEnabledRTD();
		//ARRAY getCenterOfMass();
		const char_t* stance();
		float curatorPoints();
		bool alive();
		//ARRAY crew();
		RV::Bindings::Object* triggerAttachedVehicle();
		const char_t* rank();
		//ARRAY getLightingAt();
		float getRotorBrakeRTD();
		//ARRAY itemsWithMagazines();
		bool isBleeding();
		const char_t* nameSound();
		float locked();
		void clearBackpackCargo();
		//ARRAY binocularItems();
		float formationDirection();
		//ARRAY getWeaponCargo();
		bool isAbleToBreathe();
		RV::Bindings::Object* getAssignedCuratorUnit();
		//ARRAY enginesPowerRTD();
		bool dynamicSimulationEnabled();
		//ARRAY hcAllGroups();
		const char_t* currentCommand();
		const char_t* unitPos();
		//ARRAY itemCargo();
		//ARRAY getUserMFDValue();
		float allowedService();
		//ARRAY secondaryWeaponItems();
		float getAimingCoef();
		//ARRAY ropeAttachedObjects();
		bool mineActive();
		const char_t* handgunWeapon();
		//ARRAY synchronizedWaypoints();
		bool vehicleCargoEnabled();
		void moveOut();
		float getObjectFOV();
		RV::Bindings::Object* assignedVehicle();
		//ARRAY expectedDestination();
		const char_t* goggles();
		void removeAllCuratorAddons();
		bool isBurning();
		//ARRAY getObjectMaterials();
		const char_t* getPlayerUID();
		float airplaneThrottle();
		const char_t* binocular();
		float getWeaponSway();
		//ARRAY handgunItems();
		void removeAllCuratorEditingAreas();
		vector3 getPos();
		//ARRAY curatorCameraArea();
		//ARRAY backpackCargo();
		//ARRAY getObjectTextures();
		//ARRAY vestMagazines();
		//ARRAY curatorAddons();
		const char_t* secondaryWeapon();
		//ARRAY getPosVisual();
		void deleteCollection();
		//ARRAY triggerStatements();
		//vector3 getPosASLW();
		//vector3 getPosWorldVisual();
		bool canDeployWeapon();
		void camDestroy();
		float curatorWaypointCost();
		bool isMarkedForCollection();
		RV::Bindings::Object* getAssignedCuratorLogic();
		//ARRAY triggerActivation();
		//TEAM_MEMBER teamMember();
		void resetSubgroupDirection();
		//ARRAY getRoadInfo();
		//ARRAY vestItems();
		void switchCamera();
		RV::Bindings::Object* currentPilot();
		bool waypointsEnabledUAV();
		//ARRAY list();
		void detach();
		float needReload();
		bool brakesDisabled();
		bool isNull();
		void removeBackpack();
		void hideObjectGlobal();
		//ARRAY getSensorThreats();
		//ARRAY getBackpackCargo();
		//ARRAY getShotParents();
		//ARRAY curatorRegisteredObjects();
		const char_t* gestureState();
		bool ropeAttachEnabled();
		RV::Bindings::Object* firstBackpack();
		//ARRAY getItemCargo();
		float getBurningValue();
		float loadBackpack();
		void unassignTeam();
		void removeAllOwnedMines();
		float ropeLength();
		float getAnimSpeedCoef();
		//ARRAY fullCrew();
		//ARRAY formationMembers();
		//ARRAY namedProperties();
		//ARRAY visiblePosition();
		RV::Bindings::Object* vestContainer();
		//ARRAY getPilotCameraDirection();
		bool conversationDisabled();
		//vector getPosASL();
		bool inflamed();
		//ARRAY weaponInertia();
		//ARRAY missileTargetPos();
		bool isDamageAllowed();
		bool isForcedWalk();
		float currentVisionMode();
		bool hasPilotCamera();
		float direction();
		float getSuppression();
		RV::Bindings::Object* assignedCommander();
		void deleteSite();
		RV::Bindings::Object* nearestBuilding();
		//vector3 getPosATLVisual();
		void clearItemCargoGlobal();
		void removeGoggles();
		float getPlayerChannel();
		void clearItemCargo();
		//ARRAY UAVControl();
		bool isWalking();
		RV::Bindings::Object* flag();
		RV::Bindings::Object* formLeader();
		bool stopped();
		void clearAllItemsFromBackpack();
		const char_t* hmd();
		bool canFire();
		const char_t* binocularMagazine();
		bool isObjectHidden();
		bool underwater();
		//ARRAY unitAimPosition();
		float morale();
		void selectPlayer();
		const char_t* combatBehaviour();
		bool isCollisionLightOn();
		const char_t* formationTask();
		bool isManualFire();
		//ARRAY wingsForcesRTD();
		void deleteVehicle();
		bool isUAVConnected();
		//ARRAY getPilotCameraRotation();
		const char_t* currentWeapon();
		float getDirVisual();
		//ARRAY enginesRpmRTD();
		void clearMagazineCargoGlobal();
		//ARRAY synchronizedObjects();
		float getDammage();
		//ARRAY weightRTD();
		float loadVest();
		const char_t* pose();
		vector3 getPosASLVisual();
		vector3 eyePos();
		void removeAllItems();
		bool vehicleReportOwnPosition();
		//GROUP createVehicleCrew();
		//ARRAY uniformMagazines();
		//ARRAY backpackItems();
		const char_t* getPlayerID();
		//ARRAY enginesIsOnRTD();
		bool didJIPOwner();
		//ARRAY primaryWeaponItems();
		//ARRAY visiblePositionASL();
		const char_t* lightIsOn();
		//ARRAY assignedCargo();
		const char_t* currentMagazine();
		bool vehicleReportRemoteTargets();
		void forceRespawn();
		RV::Bindings::Object* getConnectedUAV();
		bool lockedDriver();
		//ARRAY getPilotCameraPosition();
	};
}